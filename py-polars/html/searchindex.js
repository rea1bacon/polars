Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.concat", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.diff", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.set_ordering", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.diff", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 91, 117, 132, 133, 238, 256, 270, 571, 642, 725, 751, 777, 1059], "refer": [0, 31, 101, 102, 105, 138, 256, 350, 353, 442, 476, 518, 538, 539, 540, 543, 642, 836, 839, 947, 1014, 1015, 1016, 1019, 1059], "input": [0, 67, 73, 93, 101, 102, 105, 133, 134, 157, 185, 200, 201, 208, 222, 232, 233, 236, 256, 263, 270, 365, 385, 436, 442, 451, 467, 508, 566, 567, 568, 569, 570, 571, 573, 576, 579, 580, 581, 582, 588, 589, 596, 597, 604, 605, 606, 608, 609, 610, 613, 614, 622, 625, 626, 627, 633, 642, 653, 656, 674, 700, 701, 702, 708, 713, 719, 720, 723, 741, 751, 868, 925, 926, 928, 1059], "output": [0, 26, 28, 31, 32, 33, 34, 105, 133, 158, 159, 170, 180, 185, 187, 196, 200, 228, 232, 256, 270, 440, 441, 450, 487, 489, 491, 493, 495, 501, 563, 571, 583, 591, 592, 608, 630, 642, 653, 675, 676, 685, 689, 690, 700, 702, 719, 725, 741, 751, 1047, 1059], "seri": [0, 1, 2, 23, 59, 68, 69, 70, 71, 74, 90, 92, 95, 97, 120, 124, 141, 149, 152, 154, 155, 159, 160, 163, 164, 166, 168, 176, 177, 181, 192, 193, 210, 214, 217, 220, 221, 237, 256, 269, 270, 281, 288, 296, 297, 299, 346, 368, 374, 383, 387, 389, 390, 391, 393, 394, 395, 407, 412, 415, 427, 428, 431, 432, 433, 438, 440, 470, 476, 477, 478, 479, 480, 482, 484, 490, 496, 497, 500, 511, 532, 538, 539, 540, 543, 547, 553, 554, 562, 567, 569, 571, 572, 573, 577, 578, 584, 586, 587, 588, 591, 592, 597, 598, 600, 602, 604, 605, 606, 607, 608, 609, 611, 612, 613, 615, 616, 618, 619, 622, 624, 625, 626, 628, 630, 631, 632, 634, 642, 653, 671, 676, 724, 741, 1051, 1053, 1055, 1058, 1060, 1063, 1064, 1065, 1067], "datafram": [0, 1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 114, 115, 116, 119, 120, 121, 122, 130, 254, 255, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 350, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 594, 595, 596, 597, 598, 599, 600, 602, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 618, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 642, 653, 660, 663, 667, 668, 672, 675, 680, 681, 682, 683, 685, 689, 690, 694, 698, 707, 708, 714, 715, 716, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 750, 751, 765, 766, 776, 793, 794, 832, 864, 892, 893, 900, 945, 998, 1010, 1011, 1027, 1036, 1037, 1047, 1059, 1066, 1067], "lazyfram": [0, 1, 52, 53, 55, 57, 67, 68, 69, 70, 71, 73, 74, 112, 113, 114, 115, 116, 117, 119, 124, 174, 186, 201, 233, 256, 294, 371, 433, 642, 653, 740, 744, 1066, 1067], "express": [0, 47, 48, 73, 121, 124, 126, 133, 134, 145, 147, 149, 157, 183, 187, 195, 200, 201, 208, 222, 232, 233, 236, 238, 256, 263, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 280, 281, 288, 290, 291, 292, 294, 300, 301, 302, 303, 304, 305, 311, 313, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 360, 361, 365, 367, 368, 370, 371, 375, 377, 378, 379, 383, 385, 387, 388, 389, 390, 392, 397, 400, 401, 405, 406, 408, 409, 411, 412, 416, 433, 438, 439, 440, 441, 442, 446, 447, 448, 449, 450, 451, 453, 455, 457, 459, 463, 464, 466, 467, 469, 470, 471, 472, 475, 479, 480, 482, 495, 496, 497, 499, 501, 503, 504, 506, 508, 511, 512, 513, 515, 517, 518, 519, 520, 521, 522, 527, 528, 529, 532, 533, 534, 535, 549, 550, 553, 555, 556, 559, 560, 562, 563, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 605, 606, 607, 608, 609, 610, 613, 614, 616, 618, 619, 620, 621, 622, 623, 625, 626, 627, 629, 630, 631, 633, 634, 641, 653, 656, 660, 666, 667, 668, 671, 674, 694, 700, 701, 705, 706, 708, 713, 719, 720, 721, 723, 725, 741, 744, 751, 782, 783, 784, 792, 802, 854, 868, 898, 900, 967, 974, 988, 989, 994, 995, 996, 997, 998, 1004, 1005, 1059], "selector": [0, 140, 142, 145, 185, 187, 216, 224, 226, 256, 365, 626, 642, 653, 663, 664, 667, 689, 714, 741], "extend": [0, 93, 230, 256, 368, 642, 653, 750, 854, 1059], "function": [0, 31, 67, 68, 69, 70, 71, 91, 97, 101, 102, 105, 112, 122, 133, 138, 144, 152, 179, 186, 187, 219, 223, 226, 227, 238, 256, 266, 270, 311, 347, 362, 363, 364, 433, 440, 441, 467, 469, 484, 485, 486, 487, 488, 489, 491, 492, 493, 505, 557, 567, 569, 571, 573, 586, 587, 588, 597, 598, 600, 606, 608, 609, 613, 618, 626, 642, 653, 685, 689, 693, 716, 725, 741, 751, 792, 833, 847, 848, 849, 850, 864, 922, 945, 955, 969, 970, 976, 981, 1041, 1059, 1067], "data": [0, 1, 6, 16, 19, 29, 30, 31, 32, 36, 47, 48, 52, 58, 67, 68, 70, 74, 75, 80, 81, 85, 87, 90, 91, 92, 93, 94, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 119, 120, 122, 123, 124, 126, 132, 133, 136, 146, 156, 157, 158, 159, 170, 171, 172, 174, 185, 186, 190, 195, 196, 197, 206, 213, 218, 219, 223, 232, 235, 254, 256, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 280, 283, 284, 285, 286, 288, 290, 291, 292, 295, 296, 303, 304, 313, 318, 319, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 354, 355, 356, 357, 358, 360, 361, 367, 378, 379, 384, 385, 387, 388, 389, 390, 391, 393, 400, 405, 406, 408, 412, 416, 434, 439, 463, 464, 466, 467, 473, 475, 476, 479, 480, 482, 494, 495, 503, 504, 505, 511, 513, 515, 517, 518, 519, 520, 522, 527, 532, 533, 534, 535, 538, 539, 540, 543, 553, 555, 556, 557, 559, 560, 563, 566, 571, 573, 580, 590, 591, 592, 593, 594, 604, 605, 607, 608, 616, 619, 629, 630, 631, 634, 642, 653, 658, 659, 668, 674, 675, 676, 693, 719, 741, 748, 749, 750, 751, 761, 765, 766, 767, 769, 773, 775, 781, 785, 793, 798, 800, 801, 804, 805, 806, 807, 808, 810, 811, 812, 813, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 837, 840, 841, 842, 843, 844, 852, 853, 864, 870, 872, 873, 875, 876, 878, 879, 880, 881, 885, 894, 895, 897, 901, 905, 923, 945, 947, 951, 953, 965, 966, 976, 981, 987, 988, 989, 991, 993, 994, 995, 996, 998, 999, 1002, 1003, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1019, 1039, 1040, 1041, 1042, 1044, 1049, 1058, 1059, 1066], "type": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 80, 90, 92, 93, 94, 95, 96, 101, 102, 104, 105, 108, 109, 112, 113, 118, 119, 120, 123, 124, 133, 152, 156, 158, 159, 160, 171, 172, 213, 219, 221, 224, 256, 266, 268, 270, 272, 273, 274, 275, 276, 277, 280, 288, 290, 291, 292, 295, 296, 297, 300, 301, 302, 303, 304, 313, 318, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 354, 355, 356, 358, 365, 367, 380, 385, 387, 388, 389, 390, 405, 406, 408, 412, 416, 433, 442, 475, 479, 480, 482, 503, 504, 511, 513, 515, 517, 518, 519, 520, 522, 527, 532, 533, 534, 535, 538, 553, 555, 556, 557, 563, 571, 573, 580, 590, 591, 592, 593, 594, 596, 597, 604, 605, 606, 607, 608, 616, 619, 629, 630, 631, 634, 642, 653, 660, 666, 668, 675, 676, 680, 694, 706, 714, 741, 748, 749, 761, 767, 769, 773, 775, 776, 782, 783, 784, 800, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 840, 841, 842, 844, 852, 862, 870, 872, 873, 875, 876, 878, 879, 880, 881, 885, 894, 895, 897, 901, 905, 922, 951, 953, 976, 987, 988, 989, 991, 993, 994, 995, 996, 998, 999, 1002, 1003, 1008, 1009, 1010, 1011, 1014, 1039, 1040, 1042, 1050, 1059, 1066], "config": [0, 67, 200, 232, 256, 594, 653, 700, 719, 741], "except": [0, 161, 173, 175, 211, 256, 596, 653, 681, 741, 744, 863, 890, 1029, 1040, 1049, 1059], "test": [0, 103, 105, 653, 677, 684, 741], "util": [0, 97, 600, 653, 668, 741], "sql": [0, 29, 52, 56, 103, 172, 256, 623, 653], "These": [1, 31, 130, 223, 256, 354, 641, 833, 840], "allow": [1, 30, 31, 47, 48, 58, 80, 91, 112, 114, 115, 116, 117, 124, 126, 132, 170, 173, 174, 195, 196, 198, 218, 219, 224, 235, 256, 270, 343, 350, 353, 440, 478, 495, 538, 539, 540, 642, 680, 681, 685, 689, 714, 721, 741, 744, 751, 829, 836, 839, 949, 966, 968, 1014, 1015, 1016, 1041, 1059, 1067], "you": [1, 13, 31, 35, 48, 57, 67, 74, 90, 92, 93, 94, 96, 101, 102, 103, 105, 106, 108, 109, 110, 112, 116, 119, 130, 133, 146, 158, 159, 170, 183, 195, 196, 197, 215, 218, 223, 238, 256, 270, 300, 301, 302, 339, 340, 346, 350, 353, 354, 365, 371, 385, 411, 433, 440, 442, 478, 483, 485, 486, 487, 488, 489, 491, 492, 493, 523, 526, 538, 540, 571, 586, 598, 616, 619, 634, 642, 660, 664, 675, 676, 677, 681, 684, 706, 725, 741, 744, 750, 751, 782, 783, 784, 825, 826, 832, 836, 839, 840, 853, 868, 900, 949, 954, 999, 1002, 1014, 1016, 1040, 1049, 1059, 1067], "regist": [1, 52, 54, 55, 56, 57, 68, 69, 70, 71, 125, 127, 1066], "custom": [1, 31, 68, 69, 70, 71, 125, 126, 127, 133, 238, 256, 270, 350, 353, 433, 440, 484, 571, 608, 642, 685, 725, 741, 751, 836, 839, 922, 955, 1059, 1067], "dedic": [1, 91, 170, 196, 256], "namespac": [1, 255, 641, 653, 740], "underli": [1, 76, 83, 90, 92, 93, 94, 96, 108, 109, 110, 121, 124, 126, 145, 146, 170, 171, 196, 213, 256, 289, 319, 320, 324, 328, 330, 331, 332, 334, 336, 338, 341, 344, 345, 346, 348, 355, 356, 357, 358, 478, 494, 512, 514, 642, 667, 741, 744, 750, 768, 801, 802, 806, 810, 812, 813, 817, 819, 822, 824, 827, 830, 831, 832, 834, 841, 842, 843, 844, 853, 949, 965, 976, 988, 990, 1035, 1040, 1059], "polar": [1, 256, 641, 642, 647, 653, 741, 744, 1059, 1066], "class": [1, 2, 3, 4, 5, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 121, 122, 197, 219, 256, 630, 642, 647, 653, 696, 741, 1039, 1040, 1059, 1066], "without": [1, 6, 97, 104, 107, 111, 113, 117, 226, 227, 256, 270, 311, 347, 485, 486, 487, 488, 489, 491, 492, 493, 622, 642, 716, 741, 777, 792, 798, 833, 864, 945, 1040, 1059], "requir": [1, 30, 31, 35, 48, 67, 91, 95, 119, 120, 132, 134, 138, 195, 219, 222, 256, 286, 362, 363, 364, 434, 500, 538, 539, 540, 560, 619, 642, 656, 708, 713, 741, 766, 848, 849, 850, 923, 975, 1014, 1015, 1016, 1040, 1041, 1044, 1059], "subclass": [1, 256], "mixin": 1, "expr": [1, 67, 68, 69, 70, 71, 145, 147, 149, 172, 173, 183, 187, 195, 200, 201, 232, 233, 256, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 638, 642, 643, 644, 647, 648, 649, 650, 667, 669, 680, 681, 695, 700, 701, 702, 705, 719, 720, 741, 792, 802, 855, 892, 893, 898, 900, 904, 917, 920, 974, 988, 992, 1012, 1030, 1059], "ar": [1, 6, 9, 11, 15, 18, 26, 30, 31, 47, 48, 57, 58, 67, 74, 75, 82, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 117, 119, 120, 122, 124, 130, 132, 133, 134, 138, 142, 144, 147, 151, 152, 157, 158, 159, 170, 172, 173, 174, 179, 180, 185, 187, 195, 196, 197, 200, 201, 202, 208, 214, 219, 222, 227, 228, 232, 233, 236, 256, 266, 268, 294, 307, 309, 310, 316, 317, 347, 354, 359, 361, 362, 363, 364, 385, 387, 389, 390, 391, 393, 394, 395, 398, 403, 433, 442, 464, 467, 476, 479, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 502, 505, 507, 508, 520, 521, 522, 523, 526, 527, 538, 540, 551, 567, 568, 569, 570, 576, 579, 581, 582, 583, 588, 589, 591, 592, 609, 610, 613, 614, 622, 625, 626, 627, 630, 631, 633, 635, 636, 638, 641, 642, 643, 644, 647, 648, 649, 650, 653, 656, 664, 669, 674, 675, 676, 677, 680, 681, 684, 685, 689, 690, 694, 697, 700, 701, 703, 708, 713, 716, 719, 720, 721, 723, 741, 744, 748, 750, 790, 791, 833, 840, 846, 847, 848, 849, 850, 861, 868, 872, 875, 876, 878, 879, 880, 881, 888, 892, 922, 947, 951, 955, 961, 978, 981, 996, 997, 999, 1002, 1003, 1014, 1016, 1028, 1040, 1041, 1049, 1051, 1053, 1055, 1059, 1060, 1063, 1064, 1065, 1067], "all": [1, 8, 15, 18, 23, 26, 31, 36, 54, 67, 73, 90, 93, 95, 96, 101, 102, 104, 105, 106, 110, 112, 114, 115, 121, 122, 126, 139, 142, 148, 161, 166, 168, 170, 171, 174, 175, 179, 182, 183, 190, 195, 196, 197, 201, 207, 211, 216, 218, 224, 226, 228, 233, 256, 267, 268, 269, 287, 305, 311, 317, 318, 365, 370, 376, 380, 382, 384, 387, 390, 394, 395, 397, 401, 411, 416, 430, 433, 440, 441, 458, 465, 471, 476, 481, 500, 506, 508, 513, 519, 520, 521, 522, 525, 528, 529, 531, 537, 550, 563, 568, 580, 588, 589, 591, 596, 598, 603, 618, 625, 626, 627, 633, 642, 647, 653, 660, 664, 666, 668, 670, 685, 689, 694, 701, 706, 707, 714, 720, 721, 741, 744, 792, 794, 798, 800, 863, 870, 885, 890, 900, 905, 919, 922, 947, 982, 989, 995, 996, 997, 998, 1001, 1004, 1005, 1007, 1013, 1029, 1059, 1066, 1067], "support": [1, 30, 31, 35, 74, 90, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 108, 109, 113, 121, 126, 130, 132, 170, 171, 172, 196, 197, 207, 208, 215, 219, 256, 428, 467, 506, 508, 532, 580, 642, 647, 680, 707, 708, 741, 744, 917, 982, 1008, 1041, 1059, 1066], "target": [1, 29, 30, 31, 72, 256, 518, 538, 539, 540, 591, 994, 1014, 1015, 1016], "thi": [1, 6, 8, 12, 13, 26, 28, 30, 31, 33, 35, 39, 47, 48, 52, 53, 57, 58, 67, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 126, 128, 130, 132, 133, 134, 138, 142, 143, 144, 146, 151, 152, 157, 158, 159, 160, 164, 166, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 188, 189, 190, 195, 196, 197, 198, 200, 201, 205, 207, 209, 210, 213, 215, 218, 219, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 238, 239, 255, 256, 266, 269, 270, 271, 280, 286, 293, 294, 296, 297, 305, 311, 318, 319, 331, 339, 340, 343, 346, 347, 350, 353, 357, 361, 367, 383, 384, 385, 389, 397, 401, 411, 412, 416, 423, 424, 425, 426, 429, 433, 434, 437, 438, 440, 446, 447, 448, 449, 450, 451, 461, 462, 464, 467, 471, 473, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 495, 497, 499, 500, 501, 506, 507, 508, 518, 524, 525, 530, 531, 537, 538, 540, 541, 546, 550, 558, 560, 561, 562, 563, 567, 569, 571, 572, 581, 584, 586, 588, 591, 592, 597, 598, 600, 606, 609, 613, 619, 622, 626, 630, 633, 642, 653, 654, 656, 657, 660, 664, 666, 668, 673, 674, 675, 676, 678, 680, 681, 685, 689, 690, 694, 696, 697, 700, 701, 702, 705, 706, 707, 708, 713, 714, 716, 719, 720, 721, 722, 725, 726, 740, 741, 744, 750, 751, 760, 766, 772, 775, 776, 777, 792, 798, 800, 801, 802, 813, 825, 826, 829, 832, 833, 836, 839, 843, 847, 852, 853, 860, 861, 864, 869, 874, 875, 877, 882, 884, 886, 887, 889, 900, 901, 905, 912, 913, 914, 915, 918, 923, 927, 929, 930, 931, 932, 934, 935, 937, 938, 940, 944, 945, 946, 947, 948, 949, 950, 951, 954, 955, 956, 957, 959, 962, 963, 964, 966, 969, 970, 971, 974, 975, 976, 977, 982, 983, 985, 994, 1000, 1001, 1006, 1007, 1013, 1014, 1016, 1017, 1022, 1023, 1027, 1028, 1035, 1037, 1039, 1040, 1041, 1043, 1044, 1046, 1048, 1049, 1059, 1066, 1067], "featur": [1, 35, 39, 58, 72, 256], "i": [1, 6, 12, 13, 15, 28, 30, 31, 32, 33, 34, 39, 47, 48, 52, 57, 58, 67, 72, 73, 74, 77, 79, 80, 82, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 126, 128, 132, 133, 134, 142, 144, 146, 153, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 177, 179, 180, 183, 185, 186, 187, 195, 196, 197, 198, 201, 207, 208, 209, 210, 211, 213, 218, 219, 222, 223, 224, 226, 227, 228, 229, 233, 235, 238, 239, 255, 256, 263, 266, 268, 269, 270, 271, 281, 294, 305, 311, 318, 320, 330, 343, 347, 350, 354, 362, 363, 364, 367, 380, 383, 385, 398, 404, 411, 414, 428, 432, 433, 437, 440, 442, 446, 449, 451, 467, 476, 478, 479, 480, 483, 485, 486, 487, 488, 489, 491, 492, 493, 495, 496, 497, 501, 502, 505, 506, 507, 508, 510, 512, 513, 518, 519, 520, 522, 524, 525, 527, 528, 530, 531, 532, 535, 537, 538, 539, 540, 543, 546, 563, 564, 567, 569, 571, 572, 577, 580, 581, 583, 584, 586, 587, 588, 591, 592, 598, 607, 609, 613, 619, 620, 621, 622, 624, 626, 630, 632, 633, 642, 656, 660, 664, 666, 668, 673, 674, 675, 676, 679, 680, 681, 683, 685, 689, 690, 694, 701, 702, 706, 707, 708, 709, 713, 714, 716, 717, 720, 725, 726, 741, 744, 749, 750, 751, 777, 792, 800, 802, 812, 829, 833, 836, 840, 847, 848, 849, 850, 852, 853, 861, 862, 863, 864, 869, 871, 877, 882, 883, 884, 886, 887, 888, 890, 893, 900, 903, 917, 921, 922, 945, 947, 949, 951, 954, 962, 964, 966, 967, 968, 969, 970, 971, 977, 978, 981, 982, 985, 988, 989, 994, 995, 996, 998, 1000, 1001, 1003, 1004, 1006, 1007, 1008, 1011, 1013, 1014, 1015, 1016, 1019, 1022, 1029, 1035, 1040, 1041, 1047, 1048, 1049, 1059, 1066, 1067], "primarili": 1, "intend": [1, 591], "us": [1, 10, 12, 13, 18, 23, 24, 28, 29, 31, 35, 38, 48, 52, 53, 54, 55, 57, 58, 67, 74, 91, 93, 94, 96, 98, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 125, 126, 128, 133, 140, 142, 147, 148, 152, 157, 158, 159, 166, 168, 170, 171, 173, 177, 179, 182, 183, 185, 186, 187, 195, 196, 197, 198, 200, 201, 208, 209, 210, 215, 216, 217, 218, 219, 223, 224, 226, 227, 228, 229, 232, 233, 236, 238, 256, 264, 270, 271, 281, 289, 290, 297, 311, 316, 317, 346, 350, 353, 354, 357, 359, 362, 363, 364, 365, 370, 371, 384, 385, 398, 411, 433, 440, 442, 445, 467, 473, 476, 478, 480, 483, 485, 486, 487, 488, 489, 491, 492, 493, 495, 497, 500, 501, 505, 507, 508, 510, 512, 514, 515, 516, 518, 519, 521, 523, 524, 528, 530, 532, 534, 536, 538, 539, 540, 543, 564, 567, 568, 569, 570, 571, 572, 578, 580, 582, 583, 586, 588, 589, 591, 592, 593, 598, 600, 607, 609, 610, 613, 614, 616, 619, 620, 621, 622, 624, 625, 626, 627, 630, 632, 634, 641, 642, 652, 653, 660, 663, 664, 669, 670, 673, 674, 675, 676, 677, 681, 683, 684, 689, 700, 701, 708, 709, 714, 716, 717, 719, 720, 723, 725, 741, 744, 750, 751, 768, 769, 776, 777, 792, 793, 832, 836, 839, 840, 843, 846, 848, 849, 850, 855, 856, 861, 864, 867, 868, 888, 900, 922, 928, 945, 947, 949, 951, 954, 966, 969, 970, 971, 975, 977, 981, 985, 988, 990, 991, 994, 995, 997, 999, 1000, 1004, 1006, 1008, 1010, 1014, 1015, 1016, 1019, 1030, 1036, 1038, 1039, 1040, 1041, 1048, 1049, 1059, 1066, 1067], "librari": [1, 76, 83, 440, 642, 1067], "author": 1, "domain": [1, 519, 995], "specif": [1, 26, 30, 31, 90, 92, 94, 96, 101, 103, 104, 108, 109, 113, 123, 124, 170, 256, 350, 353, 484, 538, 539, 540, 543, 642, 741, 744, 836, 839, 955, 1014, 1015, 1016, 1019, 1059, 1067], "capabl": [1, 31, 256], "which": [1, 9, 18, 27, 28, 31, 32, 33, 34, 35, 47, 48, 67, 68, 69, 70, 71, 93, 101, 102, 103, 104, 105, 112, 113, 119, 125, 127, 134, 142, 146, 147, 157, 158, 159, 173, 218, 222, 224, 228, 256, 266, 294, 343, 347, 350, 354, 368, 385, 387, 390, 391, 393, 394, 395, 433, 451, 483, 485, 486, 487, 488, 489, 491, 492, 493, 527, 573, 591, 592, 630, 631, 633, 642, 656, 664, 666, 675, 676, 681, 702, 713, 714, 741, 750, 829, 833, 836, 840, 853, 854, 868, 872, 876, 878, 879, 880, 881, 922, 954, 969, 1003, 1040, 1059, 1067], "mai": [1, 30, 39, 48, 74, 90, 92, 93, 94, 96, 101, 104, 106, 108, 109, 113, 114, 117, 133, 144, 146, 158, 159, 173, 204, 205, 219, 226, 227, 228, 256, 270, 311, 318, 319, 331, 343, 347, 354, 365, 427, 432, 433, 440, 450, 485, 486, 487, 488, 489, 491, 492, 493, 498, 499, 538, 540, 586, 587, 591, 598, 618, 642, 675, 676, 681, 685, 704, 705, 716, 722, 725, 741, 750, 751, 777, 792, 800, 801, 813, 829, 833, 840, 847, 853, 864, 916, 921, 945, 973, 974, 1014, 1016, 1040, 1059, 1067], "exist": [1, 29, 30, 31, 67, 104, 113, 124, 223, 232, 233, 256, 265, 288, 291, 292, 320, 642, 719, 720, 741, 802], "belong": [1, 158, 256, 675, 741], "core": [1, 219, 256, 1067], "cannot": [1, 101, 102, 105, 106, 119, 128, 133, 197, 198, 238, 256, 270, 289, 365, 442, 495, 514, 534, 548, 571, 642, 706, 725, 741, 751, 768, 966, 990, 1010, 1059], "overrid": [1, 31, 90, 92, 93, 94, 95, 96, 101, 108, 109, 121, 122, 126, 128, 256, 442, 642, 741, 928, 1059], "str": [1, 7, 9, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 47, 48, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 75, 90, 92, 93, 94, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 126, 127, 130, 134, 137, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 166, 168, 169, 170, 172, 173, 176, 177, 178, 179, 180, 181, 183, 185, 187, 189, 191, 192, 193, 194, 195, 196, 198, 202, 204, 205, 207, 208, 209, 210, 211, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 263, 264, 265, 270, 288, 290, 291, 292, 296, 312, 315, 321, 343, 346, 347, 350, 353, 354, 365, 367, 371, 373, 377, 383, 385, 392, 407, 408, 414, 415, 416, 428, 431, 433, 441, 442, 450, 452, 453, 455, 467, 469, 471, 473, 479, 481, 483, 485, 486, 487, 488, 489, 491, 492, 493, 499, 500, 507, 508, 547, 548, 550, 553, 565, 566, 568, 570, 571, 572, 574, 575, 578, 580, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 606, 608, 610, 611, 612, 614, 615, 617, 618, 619, 620, 621, 623, 624, 625, 627, 628, 629, 630, 631, 632, 642, 648, 656, 660, 661, 662, 663, 664, 666, 667, 668, 671, 673, 674, 675, 676, 678, 680, 681, 689, 690, 694, 696, 697, 698, 702, 703, 705, 706, 707, 708, 713, 714, 715, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 747, 773, 775, 793, 794, 803, 829, 832, 833, 836, 839, 840, 852, 856, 897, 898, 905, 922, 928, 937, 938, 945, 950, 969, 970, 1023, 1025, 1036, 1037, 1038, 1059, 1063, 1066, 1067], "dt": [1, 67, 159, 256, 591, 594, 650, 676, 741, 744, 1065], "attempt": [1, 218, 256, 591, 592], "do": [1, 31, 47, 48, 67, 73, 74, 112, 119, 120, 146, 158, 159, 173, 187, 213, 223, 226, 256, 311, 411, 467, 525, 531, 537, 616, 619, 634, 642, 660, 666, 675, 676, 681, 685, 694, 706, 741, 744, 750, 792, 853, 900, 1001, 1007, 1013, 1040, 1049, 1059], "so": [1, 58, 103, 112, 128, 156, 158, 159, 187, 256, 281, 294, 385, 414, 433, 525, 531, 537, 642, 675, 676, 741, 903, 1001, 1007, 1013], "rais": [1, 14, 18, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 119, 120, 187, 195, 256, 289, 346, 354, 432, 450, 512, 514, 527, 538, 539, 540, 543, 593, 607, 768, 832, 840, 921, 988, 990, 1003, 1014, 1015, 1016, 1019, 1040, 1049, 1059], "an": [1, 6, 26, 29, 30, 31, 39, 68, 70, 71, 73, 76, 80, 81, 83, 90, 101, 102, 103, 104, 105, 107, 110, 112, 114, 122, 124, 126, 133, 135, 136, 144, 147, 149, 152, 158, 159, 170, 171, 173, 183, 187, 193, 195, 213, 218, 223, 226, 232, 238, 256, 265, 266, 270, 289, 295, 300, 301, 302, 306, 307, 308, 309, 310, 311, 320, 321, 346, 350, 357, 368, 370, 371, 377, 397, 409, 411, 414, 432, 433, 440, 441, 451, 472, 480, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 512, 514, 519, 538, 539, 540, 543, 553, 559, 567, 569, 573, 577, 580, 588, 591, 592, 595, 600, 604, 605, 607, 609, 613, 616, 618, 619, 622, 625, 626, 630, 631, 633, 634, 642, 653, 658, 659, 660, 666, 668, 671, 675, 676, 681, 685, 694, 706, 719, 721, 725, 741, 744, 751, 768, 773, 781, 782, 783, 784, 785, 788, 789, 790, 791, 792, 802, 836, 843, 847, 854, 877, 898, 900, 903, 921, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 969, 970, 988, 990, 995, 1014, 1015, 1016, 1019, 1040, 1049, 1059, 1066], "attributeerror": 1, "howev": [1, 93, 133, 144, 218, 256, 591, 847, 1059], "can": [1, 13, 31, 35, 38, 57, 67, 81, 91, 93, 101, 102, 105, 106, 110, 112, 114, 116, 117, 122, 123, 124, 126, 128, 130, 132, 133, 134, 135, 142, 143, 152, 157, 158, 159, 166, 168, 183, 187, 197, 200, 208, 218, 222, 223, 226, 232, 238, 256, 270, 307, 310, 311, 339, 340, 343, 346, 354, 368, 385, 397, 411, 433, 450, 458, 467, 471, 473, 478, 485, 486, 487, 488, 489, 491, 492, 493, 495, 497, 500, 501, 502, 505, 508, 522, 525, 531, 537, 538, 540, 550, 563, 576, 580, 598, 600, 633, 641, 642, 652, 656, 660, 664, 666, 675, 676, 700, 702, 708, 713, 719, 722, 741, 744, 751, 777, 792, 825, 826, 829, 832, 833, 840, 854, 868, 900, 922, 933, 945, 949, 969, 970, 971, 975, 978, 981, 996, 998, 1001, 1007, 1013, 1014, 1016, 1040, 1059, 1066], "other": [1, 18, 31, 35, 57, 101, 102, 105, 112, 119, 120, 142, 146, 153, 172, 173, 179, 180, 195, 197, 200, 201, 227, 230, 232, 233, 254, 256, 263, 267, 269, 281, 300, 301, 302, 315, 360, 361, 375, 378, 379, 385, 389, 400, 407, 423, 424, 425, 426, 439, 442, 446, 449, 457, 459, 463, 464, 466, 508, 549, 557, 559, 566, 567, 568, 569, 570, 579, 581, 582, 588, 589, 591, 609, 610, 613, 614, 622, 625, 626, 627, 642, 653, 664, 680, 681, 689, 690, 700, 701, 716, 719, 720, 721, 741, 744, 750, 782, 783, 784, 796, 853, 875, 896, 912, 913, 914, 915, 968, 1042, 1050, 1058, 1059], "onli": [1, 18, 26, 31, 52, 54, 58, 67, 72, 74, 101, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 124, 126, 130, 133, 142, 146, 158, 159, 170, 172, 173, 177, 196, 197, 210, 215, 217, 218, 228, 238, 256, 264, 270, 281, 294, 299, 300, 301, 302, 343, 351, 365, 374, 397, 467, 471, 478, 485, 486, 487, 488, 489, 491, 492, 493, 550, 561, 571, 591, 592, 642, 660, 664, 675, 676, 677, 680, 681, 684, 725, 741, 750, 751, 779, 782, 783, 784, 793, 829, 853, 859, 877, 945, 949, 1035, 1038, 1059, 1066, 1067], "gener": [1, 103, 121, 122, 123, 124, 126, 138, 187, 198, 216, 218, 223, 256, 495, 501, 573, 591, 604, 605, 619, 630, 631, 642, 741, 966, 977, 1036, 1059, 1067], "userwarn": 1, "pl": [1, 2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 126, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 642, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 850, 853, 854, 855, 856, 857, 859, 862, 863, 864, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 889, 892, 893, 899, 900, 901, 904, 905, 907, 912, 913, 915, 916, 917, 918, 920, 922, 927, 928, 929, 930, 931, 932, 933, 934, 935, 941, 942, 943, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 973, 977, 978, 979, 980, 982, 983, 984, 985, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1059, 1066, 1067], "register_expr_namespac": [1, 68, 70, 71], "greet": 1, "def": [1, 68, 69, 70, 71, 122, 123, 124, 126, 130, 186, 223, 256, 263, 469, 519, 566, 608, 642, 693, 741, 744, 995, 1067], "__init__": [1, 2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 121, 1066], "self": [1, 53, 54, 55, 57, 68, 69, 70, 71, 73, 135, 136, 139, 146, 161, 163, 164, 175, 176, 177, 178, 179, 181, 184, 185, 187, 189, 190, 192, 193, 198, 204, 206, 207, 209, 210, 211, 216, 223, 225, 228, 229, 230, 234, 235, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 287, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 642, 656, 657, 659, 660, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 741, 750, 751, 773, 785, 853, 857, 865, 927, 928, 939, 942, 943, 948, 969, 970, 971, 983, 1046, 1050, 1059], "_expr": [1, 69], "hello": [1, 18, 53, 56, 525, 531, 537, 905, 1001, 1007, 1013], "return": [1, 9, 26, 28, 31, 32, 33, 34, 47, 48, 52, 56, 67, 68, 69, 70, 71, 72, 73, 82, 84, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 113, 123, 129, 133, 134, 135, 138, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 156, 157, 158, 159, 161, 163, 169, 170, 171, 172, 174, 175, 182, 183, 185, 186, 187, 195, 196, 197, 198, 211, 212, 218, 219, 222, 223, 224, 228, 232, 233, 238, 241, 245, 250, 256, 266, 268, 272, 273, 274, 275, 276, 277, 280, 281, 288, 290, 291, 292, 293, 303, 304, 313, 318, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 354, 355, 356, 358, 367, 381, 385, 387, 388, 389, 390, 391, 393, 394, 395, 402, 405, 406, 408, 412, 414, 415, 416, 431, 432, 438, 442, 451, 453, 458, 469, 475, 479, 480, 482, 495, 496, 502, 503, 504, 511, 513, 515, 517, 518, 519, 520, 522, 523, 524, 526, 527, 530, 532, 533, 534, 535, 546, 552, 553, 554, 555, 556, 558, 559, 561, 562, 563, 566, 567, 571, 573, 574, 575, 576, 577, 580, 590, 591, 592, 593, 594, 600, 602, 604, 605, 607, 608, 616, 619, 622, 625, 628, 629, 630, 631, 633, 634, 642, 656, 658, 660, 664, 665, 666, 668, 675, 676, 677, 683, 684, 685, 693, 694, 702, 706, 711, 712, 713, 714, 719, 720, 728, 732, 737, 741, 744, 748, 749, 750, 751, 758, 759, 761, 762, 767, 769, 772, 777, 781, 793, 794, 800, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 837, 838, 840, 841, 842, 844, 847, 852, 853, 861, 863, 864, 870, 872, 873, 875, 876, 878, 879, 880, 881, 885, 887, 890, 894, 895, 897, 901, 903, 904, 905, 920, 921, 927, 928, 933, 945, 951, 952, 953, 954, 966, 967, 968, 970, 978, 987, 988, 989, 991, 993, 994, 995, 996, 998, 999, 1000, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1022, 1029, 1031, 1043, 1045, 1046, 1050, 1059, 1066, 1067], "lit": [1, 265, 385, 397, 586, 598, 616, 619, 633, 634, 642, 856, 1059], "alia": [1, 12, 67, 69, 71, 158, 159, 175, 225, 232, 256, 263, 267, 270, 288, 290, 291, 292, 293, 300, 301, 302, 306, 307, 308, 309, 310, 314, 318, 319, 320, 321, 324, 325, 326, 327, 329, 331, 332, 333, 335, 337, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 354, 356, 357, 360, 361, 371, 373, 375, 378, 379, 383, 385, 388, 389, 397, 400, 401, 402, 409, 411, 423, 424, 425, 426, 439, 441, 442, 454, 457, 459, 463, 464, 466, 468, 470, 476, 478, 496, 512, 513, 516, 518, 519, 523, 526, 532, 534, 535, 536, 547, 548, 549, 557, 558, 559, 565, 566, 567, 569, 571, 573, 574, 575, 578, 579, 581, 582, 586, 587, 588, 591, 594, 595, 598, 599, 608, 609, 613, 618, 619, 625, 626, 630, 633, 642, 675, 676, 678, 684, 715, 719, 741, 801, 803, 809, 829, 832, 836, 838, 843, 890, 900, 928, 994, 995, 1010, 1011, 1059], "hi": [1, 473, 642], "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 18, 53, 56, 525, 531, 537, 544, 905, 1001, 1007, 1013, 1020], "select": [1, 29, 52, 53, 54, 67, 68, 69, 70, 100, 101, 102, 103, 104, 106, 110, 112, 117, 123, 133, 169, 173, 183, 186, 195, 201, 207, 220, 225, 228, 256, 262, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 296, 298, 299, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 319, 320, 321, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 345, 346, 347, 348, 349, 352, 354, 355, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 372, 374, 376, 380, 382, 383, 384, 386, 387, 389, 390, 392, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 429, 430, 433, 434, 435, 436, 437, 438, 440, 443, 444, 445, 456, 458, 460, 461, 462, 465, 466, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 490, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 517, 518, 519, 520, 521, 522, 524, 525, 527, 530, 531, 533, 534, 535, 537, 538, 541, 542, 544, 545, 547, 548, 551, 554, 555, 556, 558, 560, 561, 562, 563, 564, 567, 569, 571, 572, 574, 575, 576, 577, 578, 580, 581, 583, 584, 585, 586, 587, 588, 591, 594, 596, 597, 598, 599, 600, 602, 606, 609, 611, 612, 613, 615, 618, 619, 623, 624, 625, 626, 628, 632, 642, 661, 678, 681, 693, 701, 702, 707, 715, 721, 741, 744, 765, 766, 832, 840, 892, 893, 900, 969, 970, 982, 998, 1014, 1030, 1059, 1066], "shape": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 49, 52, 53, 54, 56, 58, 59, 67, 68, 69, 70, 71, 74, 75, 87, 90, 92, 93, 94, 95, 96, 97, 112, 117, 124, 126, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 152, 154, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 172, 173, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 198, 200, 204, 205, 207, 208, 209, 210, 211, 212, 214, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 602, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 642, 656, 658, 660, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 700, 702, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 747, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 765, 766, 772, 773, 775, 776, 778, 779, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 849, 850, 853, 854, 855, 856, 857, 859, 862, 863, 864, 867, 868, 870, 872, 875, 876, 878, 879, 880, 881, 885, 887, 892, 893, 899, 900, 901, 904, 905, 907, 912, 913, 915, 916, 917, 918, 920, 922, 927, 928, 933, 941, 942, 943, 945, 947, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 969, 970, 973, 977, 978, 979, 980, 982, 983, 984, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1027, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1042, 1043, 1044, 1045, 1046, 1047, 1050, 1059, 1066], "3": [1, 2, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 49, 52, 54, 55, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 92, 93, 94, 95, 96, 97, 103, 105, 112, 117, 118, 119, 120, 123, 124, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 263, 264, 265, 266, 270, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 319, 320, 321, 325, 327, 328, 330, 336, 338, 345, 346, 347, 348, 350, 352, 353, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 400, 401, 402, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 435, 436, 437, 438, 439, 441, 442, 457, 458, 459, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 505, 507, 508, 509, 512, 515, 516, 518, 519, 520, 521, 523, 526, 528, 532, 533, 534, 535, 536, 539, 543, 547, 548, 549, 550, 552, 553, 554, 558, 561, 562, 563, 565, 566, 571, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 595, 596, 597, 598, 599, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 642, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 747, 750, 751, 752, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 772, 773, 775, 776, 778, 779, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 801, 802, 803, 806, 807, 809, 810, 812, 814, 815, 816, 818, 820, 821, 822, 824, 828, 830, 832, 833, 834, 836, 838, 839, 840, 842, 843, 847, 849, 850, 853, 854, 855, 856, 857, 859, 862, 863, 864, 867, 868, 870, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 888, 889, 899, 900, 901, 904, 907, 912, 913, 915, 916, 917, 918, 920, 922, 927, 928, 929, 930, 931, 932, 933, 934, 935, 941, 942, 943, 945, 946, 947, 950, 951, 952, 953, 954, 955, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 973, 977, 979, 980, 981, 982, 983, 985, 991, 992, 994, 995, 996, 997, 999, 1002, 1004, 1008, 1012, 1015, 1019, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1059, 1066, 1067], "1": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 112, 113, 117, 118, 119, 120, 121, 124, 126, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 572, 573, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 632, 633, 642, 656, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 772, 773, 776, 778, 779, 780, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 848, 849, 850, 853, 854, 855, 856, 857, 859, 862, 863, 864, 867, 868, 870, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 887, 889, 892, 893, 899, 900, 901, 903, 904, 907, 912, 913, 915, 916, 917, 918, 920, 922, 927, 929, 930, 931, 932, 933, 934, 935, 941, 942, 943, 945, 946, 947, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 994, 996, 997, 998, 1004, 1010, 1011, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1059, 1066, 1067], "2": [1, 2, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 49, 52, 54, 55, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 92, 93, 94, 95, 96, 97, 103, 112, 117, 118, 119, 120, 123, 124, 126, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 278, 280, 281, 282, 283, 284, 285, 286, 287, 293, 295, 297, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 318, 320, 321, 324, 325, 326, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 457, 458, 459, 460, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 505, 506, 507, 508, 509, 511, 513, 516, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 531, 532, 534, 535, 536, 537, 538, 540, 541, 542, 544, 545, 547, 548, 549, 550, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 602, 604, 605, 606, 607, 608, 609, 611, 612, 613, 615, 618, 622, 623, 624, 625, 626, 628, 631, 632, 633, 642, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 747, 750, 751, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 772, 776, 778, 779, 780, 781, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 800, 802, 804, 805, 808, 810, 815, 816, 822, 824, 825, 826, 831, 832, 833, 834, 837, 840, 842, 844, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 859, 862, 863, 864, 867, 868, 870, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 889, 899, 900, 901, 904, 905, 907, 912, 913, 915, 916, 917, 918, 920, 922, 924, 927, 928, 929, 930, 931, 932, 933, 934, 935, 941, 942, 943, 945, 946, 947, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 973, 977, 979, 981, 982, 983, 984, 985, 987, 989, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1007, 1010, 1011, 1013, 1014, 1016, 1017, 1018, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1059, 1066, 1067], "column_0": [1, 133, 223, 256], "register_dataframe_namespac": [1, 69, 70, 71], "split": [1, 31, 68, 171, 256, 534, 535, 1010, 1011], "splitfram": [1, 68], "df": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 49, 52, 53, 68, 69, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 112, 122, 124, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 594, 595, 596, 597, 598, 599, 600, 602, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 618, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 642, 675, 676, 702, 715, 716, 725, 728, 737, 741, 744, 765, 766, 776, 832, 892, 893, 900, 998, 1005, 1010, 1011, 1037, 1059, 1067], "_df": [1, 68], "by_alternate_row": 1, "list": [1, 2, 30, 31, 38, 52, 56, 67, 68, 70, 73, 90, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 112, 113, 122, 123, 124, 126, 137, 140, 143, 144, 145, 149, 155, 157, 158, 163, 170, 182, 185, 195, 196, 197, 200, 208, 214, 215, 223, 224, 225, 226, 232, 236, 237, 256, 264, 286, 312, 367, 373, 382, 440, 451, 452, 467, 473, 479, 480, 484, 485, 486, 487, 488, 489, 491, 492, 493, 507, 508, 519, 533, 547, 548, 553, 557, 573, 576, 580, 581, 592, 595, 603, 605, 607, 623, 625, 626, 631, 642, 661, 665, 667, 674, 675, 700, 708, 714, 715, 719, 721, 723, 724, 741, 744, 766, 780, 793, 847, 852, 857, 860, 864, 865, 875, 945, 951, 955, 956, 957, 958, 959, 960, 962, 963, 964, 967, 995, 1009, 1030, 1039, 1042, 1059, 1067], "with_row_count": [1, 256, 442, 485, 486, 488, 491, 492, 493, 642, 741, 970, 1059], "name": [1, 16, 20, 22, 29, 31, 33, 53, 54, 55, 56, 57, 68, 69, 70, 71, 74, 79, 90, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 120, 121, 122, 124, 125, 126, 127, 133, 134, 137, 140, 141, 142, 145, 150, 151, 154, 156, 157, 169, 170, 172, 173, 179, 180, 185, 187, 191, 195, 196, 197, 199, 200, 201, 208, 214, 216, 218, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 256, 265, 270, 288, 290, 291, 292, 365, 385, 397, 433, 441, 450, 452, 467, 471, 508, 519, 520, 547, 548, 550, 567, 568, 569, 570, 572, 574, 575, 576, 579, 580, 581, 582, 583, 585, 588, 589, 591, 596, 602, 603, 609, 610, 613, 614, 617, 619, 620, 621, 622, 625, 626, 627, 628, 630, 633, 642, 656, 661, 663, 664, 667, 674, 680, 681, 689, 690, 697, 699, 700, 701, 702, 708, 713, 714, 715, 716, 719, 720, 722, 723, 741, 744, 747, 781, 793, 922, 945, 950, 994, 995, 996, 1004, 1023, 1025, 1036, 1037, 1041, 1059, 1066, 1067], "n": [1, 12, 15, 23, 34, 38, 40, 54, 55, 68, 69, 70, 71, 99, 101, 102, 112, 133, 135, 146, 158, 161, 170, 171, 175, 196, 197, 198, 209, 211, 212, 215, 217, 229, 241, 250, 256, 293, 311, 314, 319, 320, 327, 352, 357, 368, 381, 402, 410, 415, 423, 431, 433, 468, 469, 479, 491, 493, 495, 505, 510, 528, 531, 534, 535, 537, 540, 552, 554, 558, 559, 564, 566, 583, 591, 592, 593, 600, 602, 616, 619, 620, 621, 624, 628, 632, 634, 642, 658, 660, 675, 677, 684, 709, 711, 712, 717, 728, 737, 741, 744, 750, 772, 781, 792, 795, 801, 802, 809, 838, 843, 853, 854, 863, 890, 899, 904, 912, 920, 922, 941, 962, 964, 966, 981, 985, 1004, 1010, 1011, 1016, 1029, 1031, 1038, 1043, 1048, 1059, 1066, 1067], "filter": [1, 68, 104, 112, 113, 117, 142, 166, 167, 168, 238, 256, 516, 536, 565, 598, 633, 642, 664, 668, 678, 725, 741, 744, 969, 1059], "col": [1, 12, 28, 31, 67, 68, 69, 70, 94, 96, 112, 122, 124, 133, 149, 157, 158, 159, 167, 169, 174, 183, 186, 195, 200, 208, 225, 226, 232, 236, 256, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 383, 384, 385, 386, 388, 389, 391, 392, 393, 396, 397, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 445, 456, 457, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 544, 545, 546, 547, 548, 549, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 577, 579, 581, 582, 586, 587, 588, 594, 597, 598, 599, 600, 601, 606, 609, 613, 617, 618, 626, 633, 642, 659, 671, 674, 675, 676, 678, 683, 693, 700, 708, 715, 719, 721, 723, 741, 744, 765, 766, 776, 829, 832, 892, 893, 900, 951, 969, 970, 998, 1014, 1059, 1067], "0": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 35, 48, 49, 52, 57, 67, 68, 69, 71, 91, 101, 102, 103, 105, 106, 110, 112, 114, 115, 116, 117, 118, 121, 122, 123, 124, 126, 132, 133, 135, 136, 138, 139, 140, 143, 147, 148, 152, 153, 155, 156, 157, 158, 160, 164, 169, 170, 171, 172, 174, 176, 177, 178, 181, 182, 183, 184, 187, 188, 189, 193, 196, 197, 198, 199, 200, 205, 207, 208, 209, 210, 216, 217, 218, 219, 220, 223, 226, 228, 229, 232, 234, 236, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 262, 264, 265, 267, 272, 273, 274, 275, 276, 277, 280, 281, 282, 294, 295, 298, 299, 301, 302, 303, 304, 306, 311, 312, 313, 316, 317, 328, 332, 333, 335, 336, 342, 348, 349, 354, 360, 361, 362, 363, 364, 366, 368, 369, 370, 371, 374, 375, 378, 379, 380, 384, 387, 390, 391, 393, 394, 395, 397, 398, 400, 405, 406, 409, 411, 414, 420, 433, 435, 436, 437, 439, 440, 442, 443, 444, 445, 456, 457, 459, 461, 462, 463, 464, 465, 466, 468, 469, 470, 473, 474, 475, 476, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 500, 502, 503, 504, 505, 509, 510, 518, 519, 538, 540, 546, 549, 551, 555, 556, 557, 559, 564, 565, 567, 573, 574, 575, 576, 577, 578, 579, 581, 583, 585, 586, 591, 593, 595, 598, 604, 605, 611, 612, 616, 617, 618, 619, 623, 629, 630, 631, 632, 633, 634, 642, 658, 659, 663, 665, 669, 670, 673, 674, 675, 680, 683, 688, 692, 694, 695, 696, 699, 700, 705, 706, 708, 709, 717, 719, 721, 722, 723, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 741, 744, 750, 752, 753, 754, 755, 756, 757, 758, 760, 762, 773, 778, 779, 781, 786, 787, 792, 793, 794, 796, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 827, 828, 834, 835, 840, 846, 848, 849, 850, 855, 859, 862, 864, 872, 874, 876, 878, 879, 880, 881, 887, 888, 900, 903, 922, 927, 930, 931, 941, 945, 946, 947, 954, 955, 957, 958, 960, 961, 962, 964, 965, 966, 978, 979, 980, 984, 985, 987, 994, 995, 998, 1014, 1016, 1022, 1032, 1033, 1036, 1041, 1042, 1046, 1048, 1049, 1059, 1067], "drop": [1, 93, 133, 141, 142, 224, 232, 256, 314, 316, 317, 410, 473, 642, 664, 714, 719, 741, 795, 797, 798, 899, 945, 1059], "aaa": [1, 31, 256, 512, 547, 548, 988], "bbb": [1, 31, 256, 547, 548, 744], "ccc": [1, 31, 256, 547, 548], "ddd": [1, 31, 256, 547, 548], "eee": [1, 31, 256, 744], "fff": 1, "column": [1, 15, 16, 19, 20, 22, 31, 33, 38, 58, 67, 68, 74, 77, 79, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 124, 132, 133, 134, 138, 140, 141, 142, 143, 145, 150, 151, 154, 156, 157, 158, 159, 163, 164, 169, 170, 172, 173, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 208, 209, 210, 214, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 236, 256, 265, 266, 268, 270, 280, 312, 320, 322, 323, 324, 328, 330, 331, 332, 334, 336, 338, 341, 344, 345, 348, 350, 351, 353, 355, 356, 358, 365, 367, 371, 373, 385, 397, 407, 412, 429, 432, 433, 442, 448, 450, 452, 467, 471, 473, 477, 479, 480, 485, 486, 487, 488, 489, 491, 492, 493, 500, 507, 508, 517, 534, 535, 538, 539, 540, 541, 543, 550, 565, 567, 568, 569, 570, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 642, 656, 663, 664, 665, 667, 674, 675, 676, 680, 681, 685, 686, 687, 688, 689, 691, 692, 693, 695, 697, 699, 700, 701, 702, 703, 708, 709, 710, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 725, 741, 744, 748, 749, 793, 804, 805, 806, 810, 812, 813, 817, 819, 822, 824, 827, 830, 831, 834, 836, 837, 839, 841, 842, 844, 852, 896, 901, 918, 921, 945, 951, 975, 993, 1010, 1011, 1014, 1015, 1016, 1017, 1019, 1027, 1036, 1037, 1059, 1067], "txt": [1, 12, 112], "utf8": [1, 10, 18, 58, 75, 93, 97, 101, 102, 112, 121, 123, 126, 143, 144, 145, 152, 199, 218, 256, 290, 350, 353, 416, 442, 511, 515, 517, 518, 519, 520, 522, 523, 532, 533, 534, 535, 538, 539, 540, 541, 543, 580, 582, 642, 665, 667, 699, 741, 744, 836, 839, 886, 905, 987, 991, 993, 994, 995, 996, 998, 999, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1019, 1059], "register_lazyframe_namespac": [1, 68, 69, 71], "dtypeoper": [1, 70], "ldf": [1, 70, 723, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736], "_ldf": [1, 70], "upcast_integer_typ": [1, 70], "with_column": [1, 12, 70, 159, 186, 226, 233, 256, 263, 265, 270, 281, 290, 295, 297, 300, 301, 302, 307, 310, 312, 314, 318, 324, 326, 344, 346, 350, 353, 356, 360, 361, 369, 370, 375, 378, 379, 380, 384, 385, 388, 391, 393, 394, 395, 397, 400, 411, 423, 424, 425, 426, 439, 441, 442, 457, 459, 463, 464, 467, 468, 469, 470, 471, 473, 476, 483, 485, 486, 487, 488, 489, 491, 492, 493, 512, 516, 519, 520, 523, 526, 528, 529, 532, 534, 535, 536, 546, 549, 550, 557, 559, 566, 568, 570, 571, 579, 582, 589, 592, 595, 605, 608, 610, 614, 623, 627, 631, 633, 642, 676, 693, 720, 741, 744, 776, 832, 900], "tp": [1, 70], "cast": [1, 69, 70, 75, 90, 119, 120, 152, 158, 159, 186, 219, 232, 256, 269, 297, 309, 310, 319, 350, 353, 442, 466, 469, 478, 521, 522, 546, 551, 557, 582, 623, 642, 675, 676, 693, 719, 741, 744, 776, 777, 790, 791, 801, 836, 839, 949, 997, 998, 1028, 1037, 1042, 1059], "int64": [1, 2, 31, 33, 69, 70, 97, 101, 143, 152, 158, 159, 174, 186, 199, 213, 219, 256, 283, 284, 285, 286, 309, 310, 325, 329, 333, 335, 337, 342, 349, 365, 469, 478, 521, 551, 557, 573, 580, 596, 604, 605, 607, 619, 625, 642, 659, 665, 675, 676, 678, 683, 693, 699, 702, 741, 763, 764, 765, 766, 790, 791, 807, 811, 818, 820, 823, 828, 835, 949, 968, 1028, 1040, 1041, 1042, 1059], "int8": [1, 70, 152, 256, 309, 310, 551, 616, 619, 634, 642, 790, 791, 795, 928, 952, 1028, 1046, 1059], "int16": [1, 70, 309, 310, 551, 642, 744, 790, 791, 928, 1028, 1038, 1059], "int32": [1, 70, 90, 93, 97, 123, 124, 158, 159, 171, 256, 295, 331, 358, 527, 557, 619, 642, 675, 676, 741, 744, 813, 844, 927, 1003, 1042, 1059], "b": [1, 27, 28, 30, 32, 35, 54, 55, 57, 58, 59, 70, 74, 75, 90, 92, 93, 94, 95, 96, 97, 105, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 155, 156, 157, 158, 160, 161, 163, 164, 166, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 263, 265, 269, 270, 282, 287, 288, 290, 291, 292, 295, 297, 305, 312, 315, 316, 317, 365, 367, 369, 370, 371, 373, 376, 380, 382, 384, 385, 387, 390, 391, 392, 393, 394, 395, 397, 401, 407, 411, 416, 418, 423, 424, 425, 426, 441, 458, 465, 467, 469, 471, 473, 476, 481, 483, 500, 506, 508, 517, 521, 528, 550, 561, 563, 565, 567, 568, 569, 570, 571, 572, 576, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 595, 596, 597, 598, 599, 602, 606, 608, 609, 610, 611, 612, 613, 614, 615, 618, 620, 621, 624, 625, 626, 627, 628, 632, 642, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 677, 680, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 697, 698, 699, 700, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 747, 750, 776, 777, 794, 796, 846, 847, 853, 856, 868, 875, 886, 900, 912, 913, 915, 950, 968, 993, 997, 1004, 1027, 1041, 1045, 1059, 1066], "4": [1, 2, 15, 23, 27, 28, 30, 31, 32, 35, 49, 52, 54, 55, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 92, 93, 94, 95, 96, 97, 112, 118, 119, 120, 126, 133, 134, 135, 136, 139, 142, 145, 146, 147, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 177, 179, 180, 182, 183, 185, 186, 187, 188, 192, 196, 197, 203, 208, 211, 212, 213, 214, 215, 216, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 267, 269, 270, 282, 283, 284, 285, 287, 293, 295, 298, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 320, 324, 329, 336, 337, 338, 344, 345, 347, 348, 349, 350, 353, 354, 355, 356, 358, 360, 361, 366, 367, 369, 370, 373, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 394, 395, 397, 400, 401, 402, 409, 410, 411, 412, 415, 423, 424, 425, 426, 427, 428, 431, 436, 439, 441, 442, 457, 459, 463, 464, 466, 467, 469, 470, 471, 473, 474, 476, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 502, 506, 507, 508, 509, 512, 523, 524, 526, 527, 528, 530, 532, 534, 535, 538, 547, 548, 549, 550, 552, 553, 554, 557, 558, 559, 566, 568, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 595, 597, 598, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 623, 624, 625, 626, 627, 628, 630, 632, 633, 642, 656, 658, 659, 660, 664, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 750, 753, 760, 763, 764, 765, 772, 779, 780, 782, 792, 794, 796, 810, 811, 817, 819, 822, 823, 824, 825, 826, 827, 831, 833, 834, 835, 836, 839, 840, 841, 842, 853, 855, 856, 863, 864, 867, 868, 870, 875, 878, 879, 880, 881, 885, 899, 900, 901, 904, 912, 913, 915, 916, 917, 920, 928, 934, 941, 942, 943, 945, 947, 951, 954, 958, 960, 961, 962, 963, 964, 966, 968, 978, 982, 983, 988, 999, 1000, 1002, 1003, 1006, 1008, 1010, 1011, 1014, 1027, 1029, 1030, 1031, 1038, 1041, 1042, 1043, 1050, 1059, 1067], "c": [1, 27, 28, 30, 32, 35, 54, 55, 57, 58, 59, 68, 70, 74, 75, 93, 95, 97, 105, 112, 122, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 149, 150, 152, 153, 155, 156, 157, 158, 161, 163, 164, 171, 172, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 193, 194, 195, 198, 199, 200, 204, 205, 207, 208, 209, 210, 211, 213, 216, 217, 218, 219, 220, 222, 223, 226, 227, 229, 230, 232, 236, 239, 240, 241, 242, 243, 244, 246, 249, 250, 256, 263, 265, 270, 287, 385, 397, 407, 416, 418, 441, 467, 469, 500, 534, 538, 561, 563, 568, 570, 572, 578, 579, 580, 582, 583, 584, 585, 586, 587, 589, 597, 598, 599, 602, 606, 608, 609, 610, 611, 612, 613, 614, 615, 624, 626, 627, 628, 632, 642, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 671, 674, 675, 680, 683, 689, 692, 694, 697, 698, 699, 700, 706, 707, 708, 713, 716, 719, 721, 723, 726, 727, 728, 729, 730, 731, 733, 736, 737, 741, 744, 794, 868, 886, 1010, 1014, 1045, 1059], "5": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 35, 55, 57, 59, 67, 68, 70, 71, 74, 90, 93, 94, 95, 96, 97, 99, 102, 118, 124, 133, 135, 136, 139, 145, 146, 147, 148, 152, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 167, 169, 170, 173, 174, 175, 177, 179, 182, 183, 185, 187, 188, 189, 192, 197, 203, 208, 211, 212, 213, 214, 215, 216, 218, 221, 226, 228, 231, 232, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 263, 264, 267, 288, 291, 292, 293, 295, 297, 299, 300, 301, 302, 311, 312, 313, 314, 315, 320, 321, 325, 346, 348, 349, 350, 353, 355, 361, 364, 365, 368, 370, 374, 375, 378, 379, 381, 382, 385, 388, 391, 393, 394, 395, 397, 400, 402, 409, 411, 412, 415, 420, 423, 424, 425, 426, 430, 431, 457, 459, 464, 466, 467, 468, 469, 473, 474, 476, 480, 481, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 496, 502, 508, 513, 522, 523, 526, 527, 546, 549, 552, 554, 558, 559, 571, 572, 573, 577, 578, 579, 581, 583, 584, 585, 586, 587, 588, 589, 591, 594, 595, 596, 597, 598, 602, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 624, 626, 627, 628, 632, 642, 658, 659, 660, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 679, 681, 682, 683, 684, 687, 688, 689, 694, 704, 705, 706, 707, 708, 709, 710, 711, 712, 718, 719, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 750, 753, 757, 760, 772, 776, 780, 782, 788, 792, 793, 794, 795, 796, 802, 803, 804, 805, 806, 807, 832, 834, 835, 836, 837, 839, 841, 842, 850, 853, 854, 863, 864, 867, 868, 900, 901, 904, 907, 912, 913, 915, 920, 927, 928, 934, 941, 942, 943, 945, 946, 947, 951, 954, 955, 956, 957, 959, 960, 963, 966, 968, 978, 984, 989, 998, 999, 1003, 1029, 1043, 1046, 1050, 1059, 1067], "6": [1, 27, 28, 30, 31, 32, 33, 34, 35, 55, 57, 59, 68, 70, 74, 90, 93, 94, 95, 96, 133, 137, 140, 141, 142, 143, 145, 146, 149, 150, 153, 154, 155, 156, 158, 159, 161, 163, 164, 165, 167, 169, 170, 172, 176, 177, 178, 179, 181, 184, 187, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 223, 225, 226, 227, 228, 229, 230, 232, 234, 241, 249, 250, 256, 263, 267, 270, 287, 295, 309, 310, 312, 315, 320, 324, 343, 344, 345, 348, 356, 359, 361, 369, 370, 376, 381, 382, 384, 402, 403, 404, 412, 423, 424, 425, 426, 464, 466, 472, 473, 475, 476, 477, 480, 482, 485, 486, 487, 488, 489, 491, 492, 493, 496, 508, 513, 517, 523, 526, 527, 549, 552, 554, 566, 571, 586, 587, 588, 595, 598, 608, 626, 642, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 672, 675, 676, 677, 679, 680, 682, 684, 685, 689, 692, 694, 697, 699, 700, 702, 704, 705, 706, 707, 708, 711, 712, 715, 716, 718, 719, 722, 728, 736, 737, 741, 744, 780, 786, 790, 791, 796, 829, 842, 864, 892, 893, 901, 912, 913, 915, 934, 947, 951, 953, 958, 960, 962, 964, 968, 989, 993, 999, 1003, 1028, 1059, 1066, 1067], "7": [1, 27, 28, 30, 31, 32, 33, 34, 35, 57, 68, 70, 74, 118, 137, 138, 139, 140, 141, 143, 145, 149, 150, 153, 158, 159, 161, 163, 165, 172, 176, 177, 178, 180, 181, 184, 187, 189, 191, 193, 195, 197, 198, 199, 200, 204, 205, 207, 209, 210, 211, 212, 217, 218, 219, 220, 226, 227, 228, 229, 230, 256, 263, 267, 285, 310, 312, 320, 324, 344, 346, 347, 354, 356, 358, 366, 381, 384, 402, 423, 424, 425, 426, 442, 466, 473, 476, 480, 492, 508, 541, 552, 554, 571, 586, 587, 591, 598, 608, 626, 642, 661, 663, 665, 667, 671, 675, 676, 677, 679, 680, 684, 690, 692, 695, 697, 699, 700, 711, 712, 716, 741, 744, 757, 765, 802, 806, 813, 832, 833, 840, 842, 887, 912, 913, 915, 928, 951, 963, 1017, 1059, 1067], "float32": [1, 28, 70, 152, 217, 218, 256, 607, 741, 744, 871, 927, 1059], "lazi": [1, 52, 53, 54, 55, 57, 70, 74, 112, 124, 173, 186, 256, 270, 600, 616, 619, 634, 642, 680, 681, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 741, 1066, 1067], "i16": [1, 70, 500, 642, 744, 928, 1038, 1059, 1067], "i32": [1, 70, 90, 93, 97, 123, 124, 200, 256, 295, 331, 358, 482, 500, 527, 633, 642, 700, 741, 813, 844, 927, 953, 1003, 1059, 1067], "f32": [1, 70, 142, 217, 256, 411, 476, 500, 583, 595, 642, 664, 741, 744, 900, 927, 947, 1059], "i64": [1, 2, 15, 19, 49, 52, 54, 68, 69, 70, 71, 74, 90, 92, 93, 94, 95, 96, 97, 112, 133, 134, 135, 136, 137, 140, 142, 143, 145, 146, 148, 149, 154, 155, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 172, 173, 176, 179, 180, 181, 185, 186, 187, 188, 191, 192, 193, 194, 198, 200, 204, 205, 207, 208, 210, 211, 212, 214, 220, 222, 223, 224, 225, 226, 227, 228, 230, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 246, 249, 250, 256, 263, 265, 269, 270, 283, 284, 285, 286, 287, 293, 297, 300, 301, 302, 307, 308, 309, 310, 312, 314, 315, 325, 327, 329, 333, 335, 337, 342, 349, 352, 365, 367, 368, 370, 371, 372, 373, 375, 376, 381, 382, 383, 384, 385, 388, 391, 393, 394, 395, 397, 399, 402, 410, 411, 412, 413, 414, 415, 417, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 438, 440, 441, 457, 458, 459, 467, 468, 469, 470, 471, 472, 473, 476, 477, 478, 480, 481, 482, 483, 495, 497, 498, 500, 501, 502, 506, 507, 508, 528, 529, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 562, 565, 571, 573, 579, 580, 582, 586, 587, 588, 589, 594, 595, 596, 597, 598, 602, 604, 605, 606, 607, 608, 609, 610, 613, 614, 618, 622, 623, 626, 627, 628, 633, 642, 656, 658, 660, 662, 663, 664, 667, 668, 670, 671, 672, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 689, 690, 691, 693, 694, 697, 698, 700, 702, 704, 705, 707, 708, 710, 711, 712, 713, 714, 715, 716, 719, 722, 723, 724, 725, 727, 728, 729, 730, 733, 736, 737, 741, 744, 747, 750, 751, 763, 764, 765, 766, 772, 776, 782, 785, 788, 789, 790, 791, 794, 807, 809, 811, 818, 820, 823, 828, 835, 838, 853, 854, 856, 857, 863, 867, 875, 899, 900, 901, 904, 912, 913, 915, 916, 917, 918, 920, 922, 933, 945, 950, 951, 953, 956, 959, 963, 966, 969, 970, 973, 977, 978, 982, 983, 1027, 1029, 1030, 1031, 1037, 1043, 1044, 1047, 1050, 1059, 1066, 1067], "register_series_namespac": [1, 68, 69, 70], "math": [1, 71, 313, 574, 575, 642, 786, 979, 1032, 1059], "mathshortcut": [1, 71], "": [1, 2, 28, 31, 35, 52, 55, 59, 71, 90, 91, 97, 101, 102, 103, 113, 117, 126, 132, 134, 142, 144, 157, 158, 164, 172, 173, 185, 187, 192, 193, 197, 200, 201, 208, 212, 216, 222, 224, 225, 226, 232, 233, 256, 270, 327, 350, 353, 365, 398, 415, 416, 427, 428, 431, 440, 451, 458, 461, 462, 467, 468, 478, 482, 484, 508, 512, 518, 519, 520, 523, 524, 526, 528, 530, 532, 533, 535, 538, 539, 540, 543, 544, 546, 547, 548, 567, 568, 569, 570, 576, 580, 583, 588, 589, 596, 599, 600, 609, 610, 613, 614, 622, 623, 625, 626, 627, 642, 656, 663, 664, 674, 675, 681, 689, 700, 701, 708, 713, 714, 715, 719, 720, 725, 741, 744, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 772, 773, 775, 777, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 802, 809, 825, 826, 833, 836, 839, 840, 847, 849, 850, 854, 855, 856, 857, 859, 862, 863, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 899, 901, 904, 905, 907, 916, 917, 918, 920, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 941, 942, 943, 945, 946, 947, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 968, 969, 970, 971, 973, 977, 978, 979, 980, 982, 983, 985, 988, 989, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1059], "_": [1, 67, 71, 187, 216, 256, 519, 534, 995, 1010, 1036, 1059], "squar": [1, 71, 238, 398, 509, 642, 725, 888, 984, 1059], "cube": [1, 71, 298, 470, 642, 778, 1059], "s2": [1, 120, 152, 256, 780, 796, 875, 887, 922, 934, 968, 1041, 1050, 1059], "renam": [1, 93, 101, 102, 200, 201, 232, 233, 236, 256, 265, 441, 454, 471, 548, 550, 622, 625, 642, 696, 700, 701, 719, 720, 723, 741, 747, 800, 808, 1025, 1037, 1059], "n2": [1, 433], "in_plac": [1, 163, 206, 230, 256, 948, 950, 976, 983, 1059], "true": [1, 6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 47, 48, 52, 54, 56, 73, 74, 75, 90, 91, 95, 97, 99, 101, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 130, 132, 134, 135, 136, 139, 148, 152, 153, 155, 156, 157, 158, 159, 164, 166, 167, 168, 170, 173, 174, 177, 182, 183, 185, 187, 188, 195, 196, 197, 198, 200, 208, 214, 216, 218, 219, 222, 223, 224, 225, 226, 228, 232, 237, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 264, 265, 266, 267, 268, 269, 270, 281, 288, 289, 291, 292, 295, 306, 307, 308, 309, 310, 312, 319, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 378, 379, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 400, 403, 404, 408, 429, 432, 433, 439, 453, 463, 464, 466, 473, 478, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 500, 501, 505, 507, 508, 512, 514, 516, 521, 522, 527, 533, 534, 536, 538, 539, 540, 543, 547, 548, 553, 560, 563, 566, 567, 568, 569, 570, 571, 573, 576, 577, 583, 584, 591, 592, 593, 598, 604, 605, 616, 619, 625, 630, 631, 633, 634, 642, 656, 658, 659, 660, 666, 668, 670, 674, 675, 676, 680, 681, 683, 685, 689, 694, 700, 706, 708, 713, 714, 715, 719, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 741, 744, 748, 749, 750, 751, 761, 768, 773, 777, 780, 781, 793, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 840, 841, 842, 843, 844, 846, 848, 849, 850, 857, 861, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 888, 892, 893, 918, 921, 934, 942, 943, 945, 949, 961, 968, 981, 983, 988, 990, 992, 997, 998, 1003, 1009, 1010, 1012, 1014, 1015, 1016, 1019, 1040, 1041, 1049, 1050, 1059, 1066, 1067], "s3": [1, 30, 104, 113, 117, 256, 922, 1059], "n3": 1, "8": [1, 27, 28, 30, 32, 33, 34, 35, 46, 52, 57, 64, 66, 67, 68, 70, 71, 74, 118, 122, 133, 137, 138, 139, 140, 141, 142, 143, 145, 149, 150, 153, 156, 161, 163, 172, 176, 177, 178, 181, 189, 191, 193, 195, 197, 198, 199, 200, 204, 205, 207, 209, 210, 211, 212, 217, 218, 219, 220, 226, 227, 229, 230, 232, 256, 267, 269, 282, 305, 307, 310, 311, 312, 316, 317, 320, 384, 401, 410, 411, 423, 424, 425, 426, 459, 466, 470, 473, 480, 481, 500, 506, 508, 524, 530, 538, 554, 566, 572, 578, 583, 584, 585, 587, 589, 595, 597, 602, 606, 608, 609, 610, 611, 612, 613, 614, 615, 624, 627, 628, 632, 642, 661, 663, 664, 665, 667, 671, 677, 680, 684, 685, 694, 697, 699, 700, 711, 712, 716, 719, 741, 744, 750, 792, 813, 864, 887, 899, 900, 912, 913, 915, 941, 945, 951, 954, 955, 958, 960, 962, 964, 1000, 1006, 1014, 1059, 1067], "9": [1, 27, 28, 30, 31, 32, 35, 52, 57, 67, 74, 133, 138, 139, 152, 159, 161, 165, 196, 197, 200, 211, 226, 227, 230, 232, 249, 256, 263, 267, 269, 282, 294, 305, 307, 310, 312, 313, 316, 317, 320, 355, 384, 389, 397, 401, 410, 422, 429, 466, 473, 475, 480, 484, 490, 492, 502, 506, 519, 541, 554, 571, 581, 586, 587, 631, 642, 676, 677, 679, 684, 700, 711, 716, 719, 736, 741, 794, 806, 817, 819, 827, 833, 834, 840, 841, 875, 887, 899, 918, 951, 955, 961, 963, 965, 978, 995, 1017, 1059], "27": [1, 71, 249, 310, 331, 345, 358, 642, 736, 1059, 1067], "16": [1, 31, 43, 61, 69, 158, 159, 232, 256, 307, 310, 384, 459, 470, 527, 571, 586, 594, 595, 598, 642, 675, 676, 706, 719, 741, 744, 833, 840, 941, 979, 1003, 1032, 1059], "64": [1, 42, 45, 48, 63, 69, 71, 459, 470, 642, 741, 941, 1059], "25": [1, 31, 71, 97, 124, 139, 158, 159, 173, 228, 232, 256, 314, 324, 326, 331, 344, 347, 354, 356, 358, 473, 485, 486, 487, 488, 489, 491, 492, 493, 559, 600, 642, 675, 676, 681, 687, 717, 719, 741, 744, 794, 795, 808, 833, 840, 846, 864, 941, 945, 1059], "125": [1, 31, 71, 256, 263, 642, 941, 1059], "arg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 186, 219, 256, 469, 576, 599, 642, 693, 741, 751, 1040, 1041, 1059], "ani": [2, 3, 4, 5, 8, 28, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 59, 60, 61, 62, 63, 64, 65, 66, 72, 90, 91, 92, 93, 94, 95, 96, 101, 102, 104, 105, 106, 108, 109, 110, 112, 113, 114, 116, 121, 123, 124, 126, 130, 133, 138, 142, 146, 148, 149, 152, 169, 170, 171, 185, 186, 195, 196, 197, 214, 215, 218, 219, 224, 226, 256, 263, 266, 267, 270, 295, 348, 360, 361, 370, 375, 378, 379, 389, 400, 407, 411, 439, 440, 442, 454, 457, 459, 463, 464, 466, 467, 469, 471, 480, 484, 496, 527, 538, 539, 540, 543, 549, 550, 553, 559, 566, 567, 570, 571, 583, 597, 606, 607, 633, 642, 664, 670, 693, 714, 741, 744, 750, 751, 796, 834, 853, 856, 875, 887, 896, 900, 928, 951, 955, 967, 970, 1003, 1014, 1015, 1016, 1019, 1030, 1039, 1040, 1041, 1059, 1066, 1067], "kwarg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 138, 186, 219, 256, 469, 642, 693, 741, 1041, 1059, 1066], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 642, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1059, 1066], "nest": [2, 49, 58, 97, 110, 116, 144, 256, 653, 847, 1059, 1066, 1067], "fix": [2, 105, 122, 124, 357, 485, 486, 487, 488, 489, 491, 492, 493, 642, 843], "length": [2, 12, 49, 74, 112, 122, 158, 159, 207, 256, 311, 312, 347, 354, 428, 433, 451, 473, 482, 484, 485, 486, 487, 488, 489, 491, 492, 493, 506, 524, 526, 530, 532, 546, 616, 619, 620, 621, 634, 642, 675, 676, 694, 707, 741, 780, 792, 793, 802, 833, 840, 889, 917, 922, 939, 945, 953, 955, 956, 957, 958, 959, 960, 962, 963, 964, 982, 1000, 1002, 1006, 1008, 1022, 1059], "inner": [2, 49, 58, 75, 123, 172, 227, 256, 283, 284, 285, 286, 315, 416, 479, 557, 642, 680, 702, 716, 741, 763, 764, 765, 766, 796, 905, 1042, 1059], "width": [2, 24, 31, 101, 102, 256, 283, 284, 285, 286, 524, 530, 546, 741, 763, 764, 765, 766, 1000, 1006, 1022], "int": [2, 12, 13, 15, 23, 24, 28, 31, 35, 39, 48, 54, 57, 69, 93, 96, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 122, 123, 124, 125, 126, 127, 128, 133, 134, 135, 144, 147, 148, 150, 160, 161, 162, 164, 169, 170, 171, 173, 175, 176, 177, 181, 182, 183, 193, 195, 198, 203, 204, 205, 207, 209, 210, 211, 212, 217, 220, 222, 226, 229, 231, 234, 241, 250, 256, 263, 287, 293, 300, 301, 302, 311, 314, 362, 363, 364, 368, 369, 370, 376, 380, 381, 402, 408, 410, 414, 415, 427, 428, 431, 432, 433, 466, 468, 469, 470, 473, 476, 479, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 506, 510, 518, 521, 524, 527, 528, 530, 532, 534, 535, 541, 546, 552, 553, 554, 558, 564, 566, 573, 583, 584, 590, 593, 594, 600, 602, 604, 605, 612, 615, 616, 619, 620, 621, 624, 625, 626, 628, 629, 632, 634, 642, 656, 658, 668, 669, 670, 677, 681, 684, 694, 704, 705, 707, 709, 711, 712, 713, 717, 718, 722, 728, 737, 741, 758, 759, 772, 773, 780, 781, 782, 783, 784, 792, 795, 847, 848, 849, 850, 854, 855, 856, 862, 863, 864, 887, 889, 890, 897, 898, 899, 903, 904, 916, 917, 920, 921, 922, 930, 934, 935, 937, 938, 939, 940, 941, 944, 945, 947, 951, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 973, 974, 977, 982, 985, 994, 997, 1000, 1003, 1004, 1006, 1008, 1010, 1011, 1017, 1022, 1028, 1029, 1030, 1031, 1038, 1043, 1048, 1059, 1066, 1067], "polarsdatatyp": [2, 49, 101, 102, 107, 111, 112, 121, 122, 123, 124, 126, 133, 143, 256, 270, 295, 365, 440, 442, 521, 571, 573, 580, 596, 607, 608, 616, 619, 634, 642, 665, 741, 744, 751, 773, 928, 997, 1059], "pythondatatyp": [2, 49], "null": [2, 28, 30, 54, 67, 74, 93, 101, 102, 109, 112, 117, 132, 134, 135, 139, 142, 148, 152, 153, 165, 172, 177, 178, 184, 187, 189, 204, 205, 208, 209, 210, 214, 219, 222, 225, 227, 229, 232, 239, 256, 266, 268, 269, 270, 280, 287, 289, 300, 301, 302, 305, 307, 310, 314, 316, 317, 325, 329, 333, 335, 337, 342, 349, 361, 362, 363, 364, 365, 368, 369, 370, 376, 384, 391, 392, 393, 394, 395, 401, 403, 404, 410, 413, 414, 417, 423, 424, 425, 426, 427, 432, 433, 442, 464, 465, 468, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 498, 499, 500, 502, 507, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 526, 527, 530, 532, 534, 535, 536, 546, 547, 548, 557, 568, 570, 579, 581, 582, 584, 589, 596, 607, 610, 614, 620, 621, 625, 627, 633, 642, 656, 658, 664, 670, 679, 680, 692, 702, 704, 705, 708, 713, 715, 716, 719, 721, 726, 741, 751, 760, 768, 781, 782, 795, 798, 807, 811, 818, 820, 823, 828, 835, 848, 849, 850, 854, 856, 861, 867, 880, 881, 892, 893, 899, 913, 915, 916, 921, 922, 940, 941, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 968, 973, 974, 978, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1006, 1008, 1010, 1011, 1012, 1038, 1040, 1041, 1042, 1049, 1059, 1066, 1067], "paramet": [2, 7, 9, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 47, 48, 49, 52, 53, 54, 55, 57, 59, 67, 68, 69, 70, 71, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 169, 170, 171, 172, 173, 175, 177, 179, 180, 182, 183, 185, 186, 187, 189, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 236, 238, 241, 248, 250, 256, 263, 265, 266, 267, 268, 269, 270, 280, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 314, 315, 319, 320, 321, 327, 343, 346, 347, 348, 350, 352, 353, 354, 357, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 375, 376, 377, 378, 379, 380, 381, 384, 385, 389, 398, 400, 402, 407, 408, 409, 410, 411, 414, 415, 416, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 439, 440, 441, 442, 453, 457, 459, 463, 464, 466, 467, 468, 469, 470, 471, 473, 474, 476, 478, 479, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 546, 547, 548, 549, 550, 552, 553, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 598, 599, 600, 602, 603, 604, 605, 607, 608, 609, 610, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 642, 656, 658, 660, 662, 663, 664, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 680, 681, 684, 685, 689, 690, 693, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 725, 728, 735, 737, 741, 744, 747, 750, 751, 760, 766, 767, 768, 769, 770, 771, 772, 773, 776, 781, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 801, 802, 803, 809, 829, 832, 833, 834, 836, 838, 839, 840, 843, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 862, 863, 864, 867, 868, 877, 883, 884, 888, 890, 896, 897, 898, 899, 900, 903, 904, 905, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 928, 941, 945, 946, 947, 948, 949, 950, 951, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 977, 981, 982, 983, 985, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1022, 1023, 1025, 1029, 1030, 1036, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1047, 1048, 1049, 1050, 1059, 1066], "The": [2, 18, 29, 31, 35, 48, 49, 52, 56, 59, 67, 72, 73, 90, 92, 93, 94, 96, 99, 101, 103, 108, 109, 110, 112, 117, 128, 133, 141, 142, 143, 145, 146, 156, 157, 158, 159, 160, 165, 170, 173, 180, 185, 195, 196, 197, 200, 201, 218, 225, 228, 232, 233, 236, 238, 256, 265, 287, 288, 289, 290, 324, 338, 343, 344, 347, 350, 354, 355, 365, 368, 376, 380, 432, 440, 467, 476, 479, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 501, 502, 505, 511, 514, 515, 521, 523, 524, 525, 530, 531, 537, 538, 546, 580, 596, 600, 620, 621, 622, 625, 633, 635, 636, 638, 642, 643, 644, 648, 649, 650, 664, 667, 675, 676, 677, 679, 681, 684, 685, 690, 694, 700, 701, 702, 715, 719, 720, 723, 725, 741, 747, 750, 751, 767, 768, 769, 781, 806, 824, 829, 830, 833, 836, 840, 841, 853, 854, 862, 921, 947, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 970, 978, 981, 987, 990, 991, 997, 999, 1000, 1001, 1006, 1007, 1013, 1014, 1022, 1051, 1053, 1055, 1059, 1060, 1063, 1064, 1065, 1067], "size": [2, 13, 35, 48, 101, 102, 122, 123, 124, 126, 128, 144, 158, 226, 256, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 573, 604, 605, 620, 621, 642, 675, 741, 847, 951, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 1059, 1067], "datatyp": [2, 28, 33, 49, 65, 90, 92, 93, 94, 96, 98, 105, 107, 108, 109, 111, 126, 143, 145, 152, 199, 256, 295, 365, 500, 557, 580, 596, 607, 642, 653, 667, 699, 702, 741, 751, 773, 794, 877, 882, 884, 886, 975, 1042, 1059], "valu": [2, 8, 11, 12, 15, 26, 28, 31, 33, 49, 50, 52, 56, 58, 65, 67, 74, 75, 93, 95, 101, 102, 103, 112, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 139, 142, 146, 147, 148, 153, 156, 158, 159, 160, 161, 165, 169, 170, 173, 175, 176, 177, 178, 179, 181, 183, 185, 187, 188, 189, 191, 195, 196, 197, 198, 204, 205, 208, 209, 210, 211, 214, 215, 219, 222, 223, 226, 227, 228, 229, 239, 240, 242, 243, 244, 246, 247, 256, 262, 263, 264, 266, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 310, 311, 312, 314, 316, 317, 320, 324, 338, 344, 355, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 390, 391, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 409, 410, 413, 414, 415, 417, 419, 420, 421, 427, 430, 431, 434, 436, 438, 439, 440, 442, 443, 444, 445, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 473, 474, 476, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 502, 503, 504, 505, 507, 508, 509, 511, 512, 513, 514, 515, 516, 518, 519, 521, 522, 528, 529, 532, 534, 535, 536, 546, 549, 551, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 566, 572, 579, 582, 584, 586, 587, 588, 589, 597, 598, 603, 606, 607, 609, 610, 611, 612, 613, 614, 615, 618, 619, 620, 621, 626, 627, 633, 642, 656, 664, 669, 670, 675, 676, 678, 679, 681, 686, 687, 688, 689, 691, 692, 695, 697, 702, 704, 705, 708, 709, 710, 713, 716, 717, 726, 727, 729, 730, 731, 733, 734, 741, 744, 746, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 768, 769, 770, 771, 776, 779, 782, 783, 784, 786, 787, 792, 793, 794, 795, 797, 798, 802, 806, 824, 830, 841, 847, 848, 849, 850, 853, 854, 855, 856, 859, 861, 862, 863, 864, 865, 867, 868, 870, 872, 873, 875, 876, 878, 879, 880, 881, 885, 890, 892, 893, 894, 895, 898, 899, 902, 903, 904, 906, 908, 909, 910, 916, 920, 923, 928, 929, 930, 932, 933, 935, 937, 938, 939, 940, 941, 944, 945, 946, 947, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 973, 974, 978, 979, 980, 981, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1002, 1004, 1005, 1008, 1010, 1011, 1012, 1022, 1028, 1029, 1030, 1031, 1032, 1033, 1040, 1041, 1042, 1045, 1047, 1049, 1050, 1059, 1067], "within": [2, 49, 119, 120, 157, 158, 159, 173, 228, 256, 476, 508, 642, 675, 676, 681, 741, 1066], "exampl": [2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 67, 68, 69, 70, 71, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 102, 103, 104, 105, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 642, 653, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 772, 773, 775, 776, 777, 779, 780, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 853, 854, 855, 856, 857, 859, 862, 863, 864, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 889, 892, 893, 899, 900, 901, 904, 905, 907, 912, 913, 915, 916, 917, 918, 920, 922, 927, 928, 929, 930, 931, 932, 933, 934, 935, 941, 942, 943, 945, 946, 947, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 973, 977, 978, 979, 980, 982, 983, 985, 987, 988, 989, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1059, 1066], "dtype": [2, 31, 38, 70, 74, 75, 90, 92, 94, 96, 97, 101, 102, 108, 109, 112, 121, 122, 123, 124, 126, 132, 158, 159, 173, 217, 218, 219, 226, 256, 270, 295, 296, 300, 301, 302, 309, 310, 357, 365, 407, 432, 438, 440, 442, 478, 479, 485, 486, 487, 488, 489, 491, 492, 493, 500, 521, 538, 551, 553, 557, 562, 571, 573, 584, 596, 600, 604, 605, 607, 608, 616, 619, 625, 634, 642, 675, 676, 681, 741, 744, 763, 764, 773, 775, 781, 782, 783, 784, 790, 791, 794, 795, 843, 847, 871, 877, 884, 896, 921, 927, 928, 952, 968, 975, 997, 1014, 1028, 1038, 1040, 1041, 1042, 1046, 1059, 1067], "method": [2, 3, 4, 5, 8, 27, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 74, 91, 101, 102, 105, 110, 116, 121, 130, 132, 133, 142, 146, 157, 165, 170, 183, 189, 195, 196, 197, 224, 232, 238, 248, 256, 263, 266, 267, 270, 294, 350, 353, 360, 361, 368, 375, 378, 379, 384, 397, 400, 439, 457, 459, 463, 464, 466, 470, 471, 474, 476, 485, 486, 487, 488, 489, 491, 492, 493, 541, 549, 550, 559, 561, 566, 571, 583, 591, 617, 619, 630, 635, 636, 638, 642, 643, 644, 647, 648, 649, 650, 653, 664, 673, 679, 695, 696, 714, 719, 725, 735, 741, 750, 751, 836, 839, 853, 854, 867, 946, 947, 960, 1017, 1042, 1051, 1053, 1055, 1059, 1060, 1063, 1064, 1065], "attribut": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 59, 60, 61, 62, 63, 64, 65, 66, 121, 256, 635, 636, 638, 643, 644, 648, 649, 650, 741, 1051, 1053, 1055, 1060, 1063, 1064, 1065], "A": [5, 28, 31, 52, 55, 73, 97, 101, 102, 103, 112, 128, 152, 158, 173, 187, 214, 226, 227, 228, 232, 233, 256, 262, 312, 320, 360, 361, 368, 378, 379, 387, 390, 391, 393, 400, 433, 439, 440, 451, 463, 464, 481, 484, 485, 486, 487, 488, 489, 491, 492, 493, 512, 513, 518, 519, 520, 522, 528, 529, 546, 581, 595, 599, 642, 675, 681, 697, 716, 719, 720, 741, 744, 793, 802, 854, 955, 956, 957, 959, 962, 963, 964, 988, 989, 994, 995, 996, 998, 1004, 1005, 1022, 1059, 1066], "encod": [5, 66, 101, 102, 112, 216, 256, 288, 289, 291, 292, 377, 514, 642, 768, 990], "set": [5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 23, 24, 26, 28, 30, 31, 32, 33, 34, 47, 48, 67, 68, 91, 93, 96, 101, 102, 105, 106, 110, 112, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 132, 137, 142, 151, 157, 158, 159, 160, 170, 173, 179, 198, 200, 207, 216, 218, 223, 224, 226, 232, 256, 270, 294, 357, 380, 389, 423, 424, 425, 426, 428, 432, 433, 442, 469, 473, 484, 485, 486, 487, 488, 489, 491, 492, 493, 495, 501, 505, 506, 525, 531, 532, 537, 538, 539, 540, 543, 573, 577, 591, 592, 604, 605, 616, 619, 620, 621, 625, 630, 631, 633, 634, 642, 653, 664, 666, 674, 675, 676, 680, 681, 685, 689, 700, 702, 707, 714, 719, 725, 741, 750, 751, 777, 843, 862, 875, 912, 913, 914, 915, 917, 921, 922, 928, 955, 956, 957, 958, 959, 960, 962, 963, 964, 966, 970, 977, 981, 982, 1001, 1007, 1008, 1013, 1014, 1015, 1016, 1019, 1040, 1059, 1067], "string": [5, 7, 9, 12, 13, 14, 18, 28, 29, 31, 33, 34, 38, 52, 58, 66, 75, 97, 101, 102, 103, 112, 119, 120, 121, 122, 123, 126, 129, 134, 152, 156, 157, 158, 159, 173, 185, 187, 197, 200, 201, 208, 217, 222, 223, 226, 228, 232, 233, 236, 256, 263, 291, 297, 343, 347, 350, 353, 354, 365, 367, 373, 377, 385, 416, 442, 453, 467, 469, 485, 486, 487, 488, 489, 491, 492, 493, 508, 511, 512, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 546, 567, 568, 569, 570, 576, 579, 581, 582, 588, 589, 591, 592, 599, 609, 610, 613, 614, 622, 625, 626, 627, 630, 631, 633, 642, 656, 666, 673, 674, 675, 676, 681, 700, 701, 702, 708, 713, 719, 720, 723, 741, 744, 770, 776, 829, 833, 836, 839, 840, 852, 868, 905, 986, 987, 988, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1038, 1059, 1067], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 377, 642, 662, 673, 696, 741], "activ": [6, 10, 16, 17, 19, 20, 21, 22, 25, 411, 519, 900, 995], "bool": [6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 47, 48, 67, 73, 74, 75, 90, 91, 95, 97, 101, 102, 106, 109, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 129, 132, 134, 135, 136, 148, 149, 151, 152, 153, 155, 156, 157, 158, 159, 163, 164, 166, 167, 168, 173, 185, 187, 197, 198, 202, 206, 208, 214, 216, 218, 219, 222, 223, 224, 225, 228, 230, 232, 240, 242, 243, 246, 256, 265, 266, 267, 268, 269, 270, 280, 286, 288, 289, 291, 292, 295, 306, 307, 308, 309, 310, 311, 312, 330, 346, 348, 354, 359, 360, 361, 362, 363, 364, 378, 379, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 400, 403, 404, 408, 411, 429, 432, 434, 439, 440, 446, 447, 448, 449, 453, 463, 464, 466, 473, 476, 478, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 497, 500, 501, 505, 507, 508, 512, 514, 516, 527, 528, 529, 533, 534, 536, 538, 539, 540, 543, 548, 560, 563, 566, 567, 568, 569, 570, 571, 573, 576, 577, 583, 586, 591, 592, 593, 604, 605, 607, 616, 619, 625, 630, 631, 634, 642, 656, 658, 660, 666, 668, 670, 674, 675, 676, 680, 681, 685, 689, 694, 703, 706, 708, 713, 714, 715, 719, 727, 729, 730, 733, 741, 744, 748, 749, 750, 751, 760, 766, 768, 773, 777, 781, 788, 789, 790, 791, 792, 793, 812, 832, 834, 840, 846, 848, 849, 850, 857, 861, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 892, 893, 897, 898, 900, 918, 921, 923, 942, 943, 945, 947, 948, 949, 950, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 968, 970, 971, 976, 981, 983, 988, 990, 992, 1003, 1004, 1005, 1009, 1010, 1012, 1014, 1015, 1016, 1019, 1039, 1040, 1041, 1044, 1047, 1049, 1059, 1066], "decim": [6, 28, 31, 256, 494, 541, 642, 965, 1017, 1059], "temporari": 6, "remov": [6, 8, 140, 216, 227, 256, 270, 365, 441, 525, 531, 537, 538, 540, 596, 642, 663, 716, 741, 750, 1001, 1007, 1013, 1014, 1016, 1059], "later": [6, 591, 702, 741], "onc": [6, 55, 101, 102, 105, 128, 132, 133, 196, 198, 236, 256, 270, 294, 495, 642, 657, 723, 741, 751, 966, 1059], "stabil": 6, "happen": [6, 473, 642, 945, 1059], "being": [6, 101, 102, 112, 117, 145, 216, 226, 227, 256, 270, 311, 347, 485, 486, 487, 488, 489, 491, 492, 493, 495, 501, 595, 642, 667, 716, 741, 777, 792, 833, 864, 945, 1059, 1067], "consid": [6, 101, 102, 112, 117, 133, 142, 153, 179, 196, 224, 226, 227, 256, 270, 300, 301, 302, 311, 347, 440, 485, 486, 487, 488, 489, 491, 492, 493, 586, 598, 642, 664, 677, 684, 689, 714, 716, 725, 741, 751, 777, 782, 783, 784, 792, 833, 864, 877, 945, 968, 969, 970, 1059], "break": [6, 117, 226, 227, 256, 270, 311, 312, 347, 473, 485, 486, 487, 488, 489, 491, 492, 493, 642, 716, 741, 777, 792, 793, 833, 864, 945, 1059], "chang": [6, 26, 67, 101, 102, 117, 226, 227, 228, 256, 270, 311, 314, 347, 468, 485, 486, 487, 488, 489, 491, 492, 493, 495, 501, 642, 716, 741, 750, 777, 792, 833, 864, 941, 945, 976, 1059], "current": [6, 9, 26, 54, 91, 97, 103, 129, 132, 135, 136, 172, 256, 326, 347, 433, 468, 642, 653, 658, 659, 680, 741, 744, 781, 785, 800, 808, 833, 941, 1059, 1066], "alpha": [6, 73, 270, 362, 363, 364, 642, 660, 666, 668, 694, 706, 741, 848, 849, 850, 1059], "state": [6, 8, 73, 83, 129, 586, 653, 660, 666, 668, 694, 706, 741], "cfg": [7, 8, 9, 15, 130], "path": [7, 9, 27, 28, 29, 30, 31, 32, 33, 34, 35, 47, 48, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 256, 455, 497, 522, 642, 662, 696, 702, 706, 741, 971, 998, 1059], "previous": 7, "save": [7, 158, 159, 173, 228, 256, 318, 326, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 642, 653, 675, 676, 681, 741, 808, 829, 833, 840], "share": [7, 58, 119, 120, 144, 256, 847, 1059], "option": [7, 8, 9, 26, 30, 31, 39, 67, 101, 104, 105, 106, 110, 113, 114, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 169, 173, 179, 214, 218, 223, 256, 398, 484, 485, 486, 487, 488, 489, 491, 492, 493, 505, 532, 607, 625, 633, 642, 653, 680, 681, 689, 741, 744, 884, 888, 955, 956, 957, 958, 959, 960, 962, 963, 964, 981, 1008, 1037, 1059], "from": [7, 8, 28, 31, 52, 53, 54, 67, 74, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 139, 140, 144, 146, 151, 156, 158, 159, 170, 171, 173, 174, 179, 187, 191, 195, 197, 198, 200, 201, 216, 223, 224, 226, 228, 256, 306, 313, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 361, 365, 377, 384, 398, 433, 461, 462, 464, 468, 469, 475, 485, 486, 488, 491, 492, 493, 495, 508, 518, 519, 521, 527, 538, 539, 540, 543, 561, 563, 574, 575, 579, 590, 591, 592, 593, 594, 619, 624, 629, 630, 631, 641, 642, 662, 663, 668, 673, 675, 676, 681, 689, 696, 697, 700, 701, 714, 721, 741, 744, 750, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 853, 884, 888, 922, 937, 938, 939, 941, 966, 994, 995, 997, 1003, 1014, 1015, 1016, 1019, 1047, 1050, 1059, 1066, 1067], "json": [7, 9, 33, 34, 108, 109, 115, 256, 377, 455, 521, 522, 642, 653, 662, 673, 696, 702, 741, 997, 998], "file": [7, 9, 27, 28, 32, 33, 34, 35, 47, 48, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 146, 256, 455, 662, 668, 696, 702, 741, 750, 853, 1059], "produc": [7, 123, 124, 126, 409, 450, 591, 592, 608, 685, 741, 898], "filepath": 7, "same": [7, 18, 30, 31, 56, 58, 67, 73, 74, 75, 106, 112, 119, 120, 122, 130, 133, 157, 197, 208, 224, 232, 233, 236, 238, 256, 262, 269, 446, 449, 467, 484, 485, 486, 487, 488, 489, 491, 492, 493, 508, 548, 553, 580, 591, 642, 674, 685, 708, 714, 719, 720, 723, 741, 746, 750, 751, 802, 955, 956, 957, 958, 959, 960, 962, 963, 964, 1050, 1059], "reset": [8, 130], "default": [8, 13, 26, 27, 28, 30, 31, 32, 33, 34, 35, 48, 67, 74, 90, 92, 93, 94, 95, 96, 97, 101, 102, 103, 105, 108, 109, 110, 112, 121, 122, 123, 124, 125, 126, 142, 144, 157, 159, 160, 170, 172, 173, 179, 185, 187, 195, 196, 197, 198, 209, 216, 224, 226, 229, 234, 256, 265, 297, 312, 346, 354, 359, 361, 362, 363, 364, 380, 428, 432, 433, 435, 442, 461, 462, 464, 468, 473, 476, 485, 486, 487, 488, 489, 491, 492, 493, 495, 501, 510, 518, 525, 527, 531, 532, 537, 538, 539, 540, 543, 564, 573, 577, 583, 591, 592, 593, 600, 604, 605, 607, 616, 619, 624, 625, 630, 631, 632, 634, 642, 664, 666, 674, 676, 680, 681, 689, 702, 709, 714, 717, 741, 750, 776, 832, 840, 846, 847, 848, 849, 850, 862, 917, 921, 922, 928, 937, 938, 941, 947, 966, 977, 985, 988, 994, 1001, 1003, 1007, 1008, 1013, 1014, 1015, 1016, 1019, 1048, 1059, 1067], "note": [8, 18, 30, 31, 39, 52, 56, 57, 67, 90, 91, 92, 94, 96, 97, 101, 103, 104, 108, 109, 110, 112, 113, 116, 117, 122, 124, 126, 128, 130, 132, 133, 134, 138, 147, 158, 159, 169, 170, 172, 173, 183, 186, 195, 196, 197, 215, 218, 222, 223, 227, 228, 232, 256, 270, 309, 310, 316, 317, 339, 340, 343, 347, 354, 385, 391, 393, 397, 411, 432, 471, 485, 486, 487, 488, 489, 490, 491, 492, 493, 505, 512, 518, 519, 520, 523, 525, 526, 528, 531, 537, 538, 550, 551, 559, 586, 591, 592, 598, 616, 618, 619, 633, 634, 642, 652, 656, 660, 668, 669, 675, 676, 677, 681, 684, 697, 706, 708, 713, 716, 719, 741, 751, 790, 791, 825, 826, 829, 840, 900, 921, 961, 969, 970, 976, 981, 988, 994, 995, 996, 999, 1001, 1002, 1004, 1007, 1013, 1014, 1028, 1040, 1059, 1066], "oper": [8, 31, 58, 74, 80, 81, 90, 92, 93, 94, 95, 96, 101, 110, 133, 146, 152, 157, 164, 174, 180, 183, 185, 186, 190, 197, 213, 218, 219, 223, 226, 235, 236, 256, 263, 264, 267, 306, 307, 308, 309, 310, 311, 360, 361, 375, 378, 379, 397, 400, 423, 424, 425, 426, 433, 439, 454, 457, 459, 463, 464, 466, 470, 471, 478, 549, 550, 559, 566, 567, 569, 581, 582, 595, 642, 653, 668, 674, 677, 680, 684, 689, 690, 723, 741, 750, 788, 789, 790, 791, 792, 853, 912, 913, 914, 915, 949, 1035, 1039, 1040, 1041, 1049, 1059], "environ": [8, 26, 125, 128], "local": [8, 30, 104, 113, 126, 256, 354, 804, 805, 837, 840, 942, 943, 1059], "non": [8, 31, 39, 67, 95, 159, 171, 179, 200, 201, 223, 227, 232, 233, 256, 385, 433, 442, 468, 484, 485, 486, 487, 488, 489, 491, 492, 493, 513, 519, 567, 568, 569, 570, 579, 581, 582, 588, 589, 591, 609, 610, 613, 614, 620, 621, 622, 625, 626, 627, 642, 676, 689, 700, 701, 716, 719, 720, 741, 868, 922, 941, 955, 956, 957, 958, 959, 960, 962, 963, 964, 989, 995, 1040, 1059], "env": [8, 127], "back": [8, 67, 146, 219, 256, 467, 544, 642, 702, 741, 750, 853, 1020, 1041, 1059], "none": [9, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 47, 48, 50, 52, 54, 55, 57, 67, 75, 90, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 135, 139, 142, 147, 148, 156, 158, 159, 160, 165, 169, 172, 173, 174, 177, 179, 183, 184, 187, 195, 198, 205, 207, 208, 214, 216, 219, 223, 224, 225, 226, 227, 228, 256, 266, 268, 269, 270, 282, 287, 300, 301, 302, 305, 307, 310, 312, 316, 317, 346, 347, 354, 361, 362, 363, 364, 365, 368, 369, 370, 376, 380, 384, 385, 391, 392, 393, 394, 395, 401, 403, 404, 414, 423, 424, 425, 426, 428, 433, 440, 442, 453, 455, 464, 465, 468, 470, 473, 476, 477, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 495, 499, 500, 501, 502, 506, 507, 511, 512, 515, 516, 521, 522, 523, 524, 525, 526, 527, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 543, 546, 547, 548, 557, 567, 568, 570, 571, 573, 579, 582, 584, 589, 591, 592, 593, 594, 596, 597, 606, 607, 608, 609, 610, 613, 614, 619, 620, 621, 624, 625, 627, 629, 630, 631, 632, 633, 642, 658, 659, 664, 669, 670, 675, 676, 679, 680, 681, 683, 685, 689, 692, 702, 705, 706, 707, 708, 714, 715, 716, 721, 725, 741, 744, 748, 749, 750, 751, 758, 759, 781, 782, 793, 794, 796, 814, 815, 816, 821, 832, 833, 840, 845, 846, 848, 849, 850, 854, 855, 856, 858, 861, 862, 864, 866, 867, 868, 877, 880, 881, 884, 887, 888, 892, 893, 903, 912, 913, 915, 917, 922, 928, 929, 930, 931, 932, 936, 945, 946, 947, 950, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 966, 970, 972, 974, 977, 978, 981, 982, 985, 987, 988, 991, 992, 997, 998, 999, 1000, 1001, 1002, 1003, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1019, 1034, 1037, 1038, 1041, 1042, 1048, 1049, 1059, 1066], "written": [9, 27, 28, 31, 32, 33, 34, 35, 47, 48, 256, 702, 741], "contain": [9, 29, 31, 67, 72, 91, 92, 95, 97, 104, 113, 119, 123, 132, 134, 142, 158, 171, 183, 187, 222, 256, 270, 291, 292, 389, 442, 513, 516, 518, 519, 520, 522, 535, 536, 642, 656, 664, 675, 694, 713, 741, 744, 928, 934, 989, 992, 994, 995, 996, 998, 1011, 1012, 1035, 1059], "where": [9, 31, 52, 67, 103, 123, 142, 146, 170, 179, 196, 209, 229, 256, 281, 356, 359, 361, 464, 479, 496, 505, 508, 510, 564, 577, 583, 620, 621, 624, 632, 633, 642, 664, 689, 709, 717, 741, 750, 761, 842, 846, 853, 967, 981, 985, 1048, 1050, 1059, 1066], "ascii": [10, 18, 524, 526, 530, 546, 1000, 1002, 1006, 1022], "charact": [10, 12, 18, 24, 28, 29, 101, 102, 112, 256, 343, 517, 519, 523, 524, 525, 530, 531, 533, 534, 537, 546, 694, 741, 744, 829, 993, 995, 999, 1000, 1001, 1006, 1007, 1009, 1010, 1013, 1022], "displai": [10, 11, 12, 15, 17, 21, 23, 31, 256], "tabl": [10, 14, 15, 17, 18, 19, 20, 21, 23, 24, 29, 30, 31, 53, 54, 55, 57, 90, 97, 101, 102, 104, 112, 113, 187, 213, 219, 226, 227, 256, 716, 741, 1041, 1059, 1066], "outlin": 10, "fals": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 33, 35, 47, 48, 52, 67, 73, 91, 95, 97, 101, 102, 105, 106, 109, 110, 112, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 132, 134, 135, 136, 139, 152, 153, 155, 156, 157, 158, 159, 163, 164, 166, 167, 168, 170, 173, 174, 177, 182, 183, 185, 187, 188, 195, 196, 197, 198, 202, 206, 208, 214, 216, 218, 219, 222, 223, 224, 228, 230, 232, 239, 240, 242, 243, 244, 246, 249, 256, 266, 267, 268, 270, 280, 286, 288, 291, 292, 306, 307, 308, 309, 310, 311, 312, 330, 346, 348, 354, 359, 360, 361, 362, 363, 364, 378, 379, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 400, 403, 404, 408, 411, 429, 432, 434, 439, 440, 453, 463, 464, 466, 473, 476, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 497, 500, 501, 505, 507, 508, 512, 516, 521, 527, 528, 529, 533, 534, 536, 538, 539, 540, 560, 563, 566, 567, 568, 569, 570, 573, 576, 577, 583, 586, 591, 592, 593, 604, 605, 607, 616, 619, 625, 630, 631, 633, 634, 642, 656, 658, 659, 660, 666, 668, 674, 675, 676, 680, 681, 683, 685, 694, 703, 706, 708, 713, 714, 719, 726, 727, 729, 730, 731, 733, 736, 741, 744, 750, 760, 766, 773, 777, 780, 781, 788, 789, 790, 791, 792, 793, 812, 832, 834, 840, 846, 848, 849, 850, 857, 868, 869, 870, 872, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 888, 892, 893, 900, 918, 921, 923, 934, 942, 943, 945, 947, 948, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 968, 971, 976, 981, 983, 988, 992, 997, 1003, 1004, 1005, 1009, 1010, 1012, 1014, 1015, 1016, 1039, 1040, 1041, 1044, 1047, 1049, 1050, 1059, 1066], "revert": 10, "abc": [10, 16, 17, 18, 19, 20, 21, 22, 23, 263, 519, 528, 642, 744, 995, 1004], "xyz": [10, 16, 17, 18, 19, 20, 21, 22, 23, 263, 513, 519, 642, 989, 995, 1037, 1059], "f64": [10, 14, 16, 17, 19, 20, 21, 22, 23, 49, 52, 67, 69, 71, 93, 117, 124, 135, 136, 138, 139, 140, 143, 147, 148, 152, 155, 156, 157, 164, 172, 173, 177, 178, 187, 188, 189, 207, 208, 209, 229, 232, 236, 240, 242, 243, 244, 245, 246, 248, 249, 256, 262, 265, 272, 273, 274, 275, 276, 277, 295, 298, 299, 303, 304, 311, 313, 316, 317, 348, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 374, 375, 378, 379, 384, 391, 393, 394, 395, 397, 398, 400, 420, 435, 436, 437, 439, 443, 444, 445, 456, 459, 461, 462, 463, 464, 468, 470, 474, 475, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 503, 504, 505, 509, 510, 555, 556, 559, 564, 574, 575, 578, 579, 581, 583, 585, 596, 611, 612, 623, 624, 632, 642, 658, 663, 669, 670, 674, 680, 681, 687, 688, 695, 708, 709, 717, 719, 721, 723, 727, 729, 730, 731, 732, 733, 735, 736, 741, 744, 752, 753, 754, 755, 756, 757, 778, 779, 786, 787, 792, 793, 794, 834, 849, 850, 855, 859, 864, 941, 945, 955, 957, 958, 960, 961, 962, 964, 965, 979, 980, 984, 1032, 1033, 1046, 1059, 1067], "fmt": [11, 383, 599, 642, 678, 741], "floatfmt": 11, "mix": [11, 538, 540, 794, 1014, 1016, 1059], "control": [11, 31, 57, 74, 122, 256, 666, 741], "how": [11, 30, 31, 58, 67, 74, 75, 93, 96, 103, 142, 172, 226, 227, 256, 297, 314, 346, 354, 384, 409, 410, 467, 479, 490, 521, 593, 633, 642, 664, 680, 716, 741, 776, 795, 832, 840, 898, 899, 961, 997, 1059], "float": [11, 31, 41, 42, 117, 119, 120, 121, 124, 126, 139, 144, 147, 173, 189, 198, 205, 248, 256, 299, 300, 301, 302, 312, 316, 317, 348, 359, 360, 361, 362, 363, 364, 369, 374, 378, 379, 384, 387, 390, 391, 393, 394, 395, 400, 408, 435, 439, 443, 456, 461, 462, 463, 464, 470, 473, 474, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 559, 578, 611, 612, 617, 619, 624, 626, 632, 642, 669, 681, 695, 705, 706, 735, 741, 744, 773, 779, 782, 783, 784, 793, 794, 796, 834, 846, 847, 848, 849, 850, 855, 859, 864, 874, 888, 897, 898, 924, 930, 931, 937, 938, 944, 945, 946, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 969, 970, 981, 985, 1028, 1040, 1048, 1059, 1067], "point": [11, 31, 41, 42, 124, 126, 147, 158, 174, 256, 299, 312, 316, 317, 348, 369, 374, 391, 393, 494, 495, 591, 642, 669, 675, 685, 697, 741, 779, 793, 834, 855, 859, 874, 965, 966, 1040, 1059], "full": [11, 38, 67, 72, 74, 101, 102, 104, 112, 113, 158, 159, 256, 538, 539, 540, 543, 675, 676, 685, 741, 744, 1014, 1015, 1016, 1019], "format": [11, 14, 18, 28, 31, 100, 101, 102, 112, 117, 145, 156, 170, 179, 196, 197, 215, 254, 256, 347, 350, 353, 453, 538, 539, 540, 543, 667, 673, 689, 702, 741, 836, 839, 1014, 1015, 1016, 1019, 1058], "number": [11, 12, 13, 15, 23, 24, 28, 31, 35, 48, 67, 84, 90, 92, 94, 96, 99, 101, 102, 103, 105, 108, 109, 112, 115, 122, 124, 125, 127, 128, 134, 135, 144, 145, 147, 148, 161, 170, 171, 174, 175, 182, 183, 198, 204, 205, 209, 211, 222, 226, 229, 239, 241, 250, 256, 281, 287, 293, 305, 311, 314, 328, 331, 336, 338, 348, 355, 356, 358, 362, 363, 364, 368, 370, 376, 381, 391, 393, 401, 402, 410, 415, 427, 431, 433, 469, 473, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 498, 499, 501, 510, 523, 526, 528, 534, 535, 541, 552, 558, 564, 583, 584, 591, 602, 620, 621, 624, 628, 632, 642, 656, 658, 667, 668, 669, 670, 677, 684, 694, 704, 705, 709, 711, 713, 717, 726, 728, 737, 741, 772, 781, 792, 795, 810, 813, 822, 824, 834, 841, 842, 844, 847, 848, 849, 850, 854, 856, 863, 874, 890, 899, 904, 916, 920, 922, 934, 935, 945, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 973, 974, 977, 985, 999, 1002, 1004, 1010, 1011, 1017, 1029, 1043, 1048, 1059, 1067], "plai": [12, 582], "sam": 12, "As": [12, 90, 92, 93, 94, 96, 105, 108, 109, 256, 741], "time": [12, 30, 38, 40, 52, 57, 72, 73, 110, 112, 146, 158, 159, 173, 228, 256, 293, 318, 319, 320, 321, 322, 326, 327, 343, 346, 347, 350, 352, 353, 354, 357, 407, 408, 433, 485, 486, 487, 488, 489, 491, 492, 493, 538, 540, 543, 557, 558, 581, 582, 591, 592, 593, 594, 600, 630, 631, 642, 660, 675, 676, 681, 694, 741, 744, 750, 772, 800, 801, 802, 803, 808, 809, 829, 832, 833, 836, 838, 839, 840, 843, 853, 896, 898, 1014, 1016, 1019, 1042, 1043, 1059, 1067], "goe": 12, "By": [12, 13, 67, 101, 102, 105, 112, 158, 159, 173, 209, 228, 229, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 510, 527, 564, 583, 607, 624, 632, 642, 675, 676, 681, 709, 717, 741, 829, 833, 840, 985, 1003, 1040, 1048, 1059], "begin": [12, 31, 256, 362, 363, 364, 518, 591, 642, 848, 849, 850, 994, 1059], "beauti": 12, "friendship": 12, "len": [12, 31, 122, 124, 171, 256, 306, 312, 473, 524, 530, 546, 642, 793, 945, 1000, 1006, 1022, 1059], "u32": [12, 52, 158, 184, 234, 239, 247, 249, 256, 264, 271, 278, 279, 280, 281, 282, 305, 306, 324, 328, 332, 336, 338, 344, 345, 348, 355, 356, 401, 405, 406, 409, 418, 442, 460, 465, 476, 483, 485, 486, 488, 491, 492, 493, 496, 513, 523, 526, 557, 561, 567, 572, 576, 577, 584, 615, 642, 675, 692, 722, 726, 734, 736, 741, 760, 761, 762, 773, 806, 810, 817, 819, 822, 824, 827, 830, 831, 834, 841, 842, 864, 907, 947, 954, 989, 999, 1002, 1042, 1045, 1047, 1059], "37": 12, "beaut": 12, "48": [12, 159, 256, 676, 741], "fmt_str_length": 12, "50": [12, 31, 146, 256, 300, 301, 302, 347, 354, 642, 782, 840, 1059], "print": [12, 15, 17, 18, 23, 102, 118, 143, 156, 157, 171, 174, 217, 235, 256, 383, 453, 594, 642, 678, 741, 875, 955, 1038, 1059, 1067], "overwrit": [13, 29, 30, 90, 92, 93, 94, 96, 101, 102, 108, 109, 112, 132, 256, 265, 642, 668, 741], "chunk": [13, 48, 99, 101, 102, 110, 112, 114, 115, 116, 124, 126, 146, 171, 182, 256, 269, 477, 642, 741, 750, 780, 853, 860, 934, 948, 1035, 1059], "stream": [13, 32, 47, 48, 73, 134, 157, 172, 222, 224, 256, 656, 660, 666, 668, 674, 680, 685, 689, 694, 706, 708, 713, 714, 741], "engin": [13, 29, 103, 128, 133, 157, 172, 224, 238, 256, 674, 680, 685, 689, 714, 725, 741, 751, 1059], "determin": [13, 31, 65, 67, 74, 93, 96, 101, 102, 105, 110, 112, 116, 133, 140, 152, 158, 159, 170, 171, 187, 223, 228, 256, 297, 330, 346, 354, 433, 442, 450, 473, 479, 485, 486, 487, 488, 489, 491, 492, 493, 505, 521, 541, 593, 616, 619, 634, 642, 675, 676, 741, 776, 812, 832, 840, 864, 922, 928, 945, 981, 997, 1017, 1059], "schema": [13, 30, 52, 58, 68, 69, 70, 74, 75, 85, 86, 88, 90, 92, 93, 94, 96, 97, 101, 102, 103, 107, 108, 109, 111, 112, 115, 122, 124, 133, 135, 136, 143, 144, 180, 183, 218, 256, 283, 284, 285, 433, 450, 521, 566, 625, 642, 658, 659, 665, 685, 690, 702, 725, 741, 744, 765, 785, 997, 1059], "thread": [13, 28, 99, 101, 102, 103, 128, 256, 270, 411, 495, 501, 642, 900], "pool": [13, 128], "For": [13, 30, 31, 103, 104, 105, 113, 142, 146, 159, 172, 173, 238, 256, 295, 362, 363, 364, 433, 451, 478, 505, 512, 518, 519, 520, 528, 586, 591, 598, 599, 642, 664, 676, 681, 725, 741, 750, 848, 849, 850, 853, 949, 981, 988, 994, 995, 996, 1004, 1040, 1059], "some": [13, 26, 30, 31, 93, 101, 102, 112, 142, 256, 664, 741, 875, 1059, 1067], "dataset": [13, 35, 101, 102, 110, 112, 116, 117, 172, 256, 398, 642, 653, 680, 685, 741, 888, 1059], "esp": 13, "when": [13, 15, 17, 21, 31, 35, 38, 48, 57, 58, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 101, 102, 106, 110, 112, 113, 114, 115, 117, 124, 126, 133, 134, 143, 144, 146, 148, 152, 158, 159, 172, 186, 195, 197, 200, 201, 208, 216, 218, 222, 224, 233, 256, 300, 301, 302, 346, 354, 362, 363, 364, 370, 433, 440, 442, 451, 469, 483, 507, 508, 525, 531, 537, 538, 576, 586, 591, 598, 642, 656, 670, 675, 676, 680, 685, 700, 701, 708, 713, 714, 720, 741, 750, 782, 783, 784, 832, 840, 847, 848, 849, 850, 853, 856, 928, 954, 969, 970, 1001, 1007, 1013, 1014, 1036, 1059], "have": [13, 26, 31, 38, 67, 75, 91, 101, 102, 103, 105, 110, 116, 124, 126, 146, 159, 170, 190, 196, 197, 215, 256, 311, 362, 363, 364, 451, 473, 476, 520, 538, 540, 591, 642, 676, 689, 706, 722, 741, 744, 750, 792, 848, 849, 850, 853, 861, 945, 947, 1014, 1016, 1059, 1067], "larg": [13, 67, 158, 159, 173, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 829, 833, 840], "element": [13, 23, 123, 126, 134, 169, 187, 195, 209, 222, 229, 256, 270, 272, 273, 274, 275, 276, 277, 293, 298, 303, 304, 306, 307, 308, 309, 310, 311, 366, 367, 380, 389, 409, 411, 412, 423, 424, 425, 426, 436, 437, 467, 468, 476, 479, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 502, 503, 504, 509, 510, 534, 535, 541, 555, 556, 558, 564, 583, 620, 621, 624, 632, 642, 656, 708, 709, 713, 717, 741, 751, 752, 753, 754, 755, 756, 757, 772, 778, 781, 786, 787, 788, 789, 790, 791, 792, 851, 852, 857, 863, 875, 887, 890, 898, 900, 901, 912, 913, 914, 915, 925, 926, 941, 947, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 978, 979, 980, 984, 985, 1010, 1011, 1017, 1029, 1032, 1033, 1038, 1043, 1044, 1048, 1059], "too": [13, 158, 159, 173, 228, 256, 343, 347, 354, 483, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 829, 833, 840], "optimist": 13, "lead": [13, 35, 97, 117, 158, 159, 256, 270, 440, 497, 525, 537, 546, 553, 563, 583, 642, 675, 676, 685, 725, 741, 751, 971, 1001, 1013, 1022, 1059], "out": [13, 47, 48, 97, 118, 159, 197, 256, 289, 414, 432, 512, 514, 633, 676, 741, 768, 903, 921, 988, 990], "memori": [13, 48, 74, 90, 91, 94, 95, 96, 101, 102, 106, 110, 112, 114, 115, 116, 132, 133, 146, 197, 206, 238, 256, 467, 477, 500, 642, 741, 750, 751, 853, 948, 975, 976, 1059], "error": [13, 30, 76, 101, 102, 112, 158, 159, 173, 187, 195, 228, 256, 265, 289, 295, 343, 347, 354, 397, 416, 432, 485, 486, 487, 488, 489, 491, 492, 493, 512, 514, 518, 520, 521, 522, 538, 539, 540, 543, 642, 675, 676, 681, 725, 741, 768, 773, 829, 833, 840, 905, 921, 988, 990, 994, 996, 997, 998, 1014, 1015, 1016, 1019, 1059], "row": [13, 18, 23, 28, 31, 33, 35, 48, 67, 68, 70, 74, 82, 84, 89, 93, 94, 96, 97, 101, 102, 105, 106, 110, 112, 114, 115, 116, 117, 119, 122, 124, 133, 134, 135, 142, 146, 149, 152, 156, 157, 158, 160, 161, 166, 168, 169, 170, 171, 173, 174, 175, 179, 183, 197, 198, 207, 211, 212, 215, 217, 222, 224, 226, 227, 234, 238, 241, 250, 256, 270, 281, 367, 381, 402, 412, 433, 467, 468, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 506, 508, 517, 521, 552, 573, 576, 586, 587, 598, 602, 604, 605, 618, 620, 621, 628, 633, 642, 656, 658, 660, 664, 668, 671, 672, 675, 677, 681, 682, 684, 685, 689, 707, 711, 712, 713, 714, 716, 722, 725, 728, 737, 741, 750, 852, 853, 863, 887, 901, 941, 951, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 982, 993, 997, 1029, 1059, 1067], "per": [13, 28, 31, 122, 124, 134, 156, 183, 184, 201, 208, 222, 233, 245, 247, 248, 256, 270, 294, 411, 414, 432, 508, 576, 642, 656, 701, 708, 713, 720, 732, 734, 735, 741, 900, 903, 921], "everi": [13, 101, 102, 112, 158, 212, 215, 228, 256, 306, 307, 308, 309, 310, 311, 347, 354, 367, 405, 406, 410, 412, 414, 415, 423, 428, 431, 517, 554, 586, 587, 642, 668, 675, 712, 741, 788, 789, 790, 791, 792, 833, 840, 852, 894, 895, 899, 901, 903, 904, 912, 917, 920, 993, 1031, 1059], "process": [13, 28, 47, 48, 128, 256, 741], "liter": [14, 18, 30, 52, 105, 124, 125, 126, 127, 156, 170, 176, 177, 181, 182, 185, 195, 196, 200, 201, 210, 214, 227, 232, 233, 256, 265, 288, 320, 360, 361, 368, 375, 378, 379, 385, 400, 439, 442, 457, 459, 463, 464, 470, 512, 528, 529, 549, 559, 567, 568, 569, 570, 573, 577, 579, 581, 582, 588, 589, 590, 591, 592, 593, 604, 605, 607, 609, 610, 613, 614, 616, 619, 622, 625, 626, 627, 629, 630, 631, 634, 642, 670, 700, 701, 716, 719, 720, 741, 744, 767, 802, 854, 868, 969, 970, 988, 1004, 1005, 1059, 1066], "left": [14, 31, 54, 67, 119, 120, 158, 159, 172, 173, 227, 256, 362, 363, 364, 384, 385, 485, 486, 487, 488, 489, 491, 492, 493, 496, 524, 546, 557, 579, 586, 587, 591, 592, 598, 618, 630, 631, 633, 642, 675, 676, 680, 681, 716, 741, 848, 849, 850, 868, 967, 1000, 1022, 1042, 1059], "center": [14, 31, 256, 362, 363, 364, 484, 485, 486, 487, 488, 489, 491, 492, 493, 642, 848, 849, 850, 955, 956, 957, 958, 959, 960, 962, 963, 964, 1059], "right": [14, 16, 31, 101, 102, 119, 120, 158, 159, 172, 173, 256, 312, 362, 363, 364, 385, 423, 424, 425, 426, 473, 485, 486, 487, 488, 489, 491, 492, 493, 496, 505, 530, 579, 591, 592, 630, 631, 642, 675, 676, 680, 681, 741, 793, 848, 849, 850, 868, 912, 913, 914, 915, 945, 967, 981, 1006, 1059], "cell": [14, 31, 256], "align": [14, 31, 67, 74, 256, 546, 1022], "keyerror": [14, 18], "recognis": [14, 18, 121], "column_abc": 14, "column_xyz": 14, "visibl": [15, 144, 256, 847, 1059], "eg": [15, 23, 31, 103, 256, 347, 538, 540, 559, 642, 1014, 1016], "low": [15, 128], "rang": [15, 31, 103, 139, 144, 158, 171, 256, 312, 313, 324, 338, 344, 345, 347, 354, 355, 384, 473, 573, 581, 590, 591, 592, 593, 604, 605, 629, 630, 631, 642, 675, 741, 793, 794, 806, 824, 830, 831, 833, 840, 841, 847, 941, 945, 1059], "100": [15, 31, 93, 96, 101, 102, 112, 115, 256, 521, 541, 546, 741, 956, 957, 959, 997, 1017, 1059, 1067], "98": [15, 164, 256, 293, 507, 541, 553, 558, 642, 1017], "99": [15, 31, 147, 148, 164, 167, 256, 264, 293, 368, 370, 507, 553, 558, 642, 669, 670, 741, 846, 854, 1059], "tbl_col": 15, "10": [15, 27, 28, 30, 31, 32, 35, 48, 52, 67, 74, 97, 103, 112, 124, 126, 136, 146, 155, 158, 159, 161, 163, 164, 165, 182, 186, 187, 188, 192, 193, 200, 211, 232, 236, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 265, 269, 278, 279, 280, 282, 300, 305, 307, 310, 312, 314, 316, 317, 318, 320, 326, 339, 340, 346, 347, 354, 357, 380, 381, 384, 389, 397, 401, 402, 410, 415, 427, 428, 431, 436, 468, 469, 473, 506, 546, 552, 566, 579, 586, 591, 595, 598, 600, 602, 607, 608, 628, 631, 642, 660, 675, 676, 677, 679, 684, 693, 694, 700, 710, 711, 719, 723, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 741, 744, 751, 782, 793, 795, 800, 802, 808, 832, 840, 843, 846, 863, 875, 890, 899, 904, 916, 917, 920, 925, 941, 969, 970, 1029, 1059, 1067], "95": [15, 264, 642], "96": [15, 264, 642], "97": [15, 164, 256, 264, 642], "move": [16, 197, 256, 362, 363, 364, 485, 486, 488, 492, 642, 848, 849, 850, 956, 957, 959, 963, 1059], "inlin": [16, 197, 256, 512, 518, 519, 528, 988, 994, 995, 1004], "parenthes": 16, "below": [17, 31, 104, 113, 142, 256, 370, 591, 592, 633, 642, 664, 741], "ascii_ful": 18, "ascii_full_condens": 18, "ascii_no_bord": 18, "ascii_borders_onli": 18, "ascii_borders_only_condens": 18, "ascii_horizontal_onli": 18, "ascii_markdown": 18, "utf8_ful": [18, 67, 97], "utf8_full_condens": [18, 97], "utf8_no_bord": 18, "utf8_borders_onli": 18, "utf8_horizontal_onli": 18, "noth": [18, 294, 513, 518, 522, 642, 989, 994, 998], "rounded_corn": 18, "style": [18, 31, 110, 116, 187, 256], "border": 18, "line": [18, 31, 101, 102, 105, 112, 156, 166, 168, 256, 518, 994], "includ": [18, 26, 28, 30, 31, 72, 104, 113, 124, 134, 139, 144, 158, 185, 197, 222, 223, 226, 256, 312, 348, 385, 473, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 531, 533, 534, 537, 586, 620, 621, 642, 656, 675, 713, 741, 793, 794, 834, 847, 868, 945, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 1009, 1010, 1013, 1049, 1059], "divid": [18, 347, 354, 362, 363, 364, 398, 642, 833, 840, 848, 849, 850, 888, 1059], "dens": [18, 156, 256, 476, 642, 947, 1059], "space": [18, 158, 256, 473, 642, 675, 741, 945, 1059], "horizont": [18, 74, 152, 163, 226, 256, 567, 568, 569, 570, 581, 582, 586, 587, 588, 589, 595, 598, 609, 610, 613, 614, 618, 626, 627], "markdown": 18, "compat": [18, 31, 35, 48, 256, 512, 513, 518, 519, 520, 528, 529, 741, 744, 988, 989, 994, 995, 996, 1004, 1005], "No": [18, 544, 1020], "appli": [18, 28, 31, 52, 74, 112, 121, 124, 126, 152, 186, 256, 322, 323, 324, 328, 330, 331, 332, 334, 336, 338, 341, 344, 345, 348, 351, 355, 356, 358, 363, 364, 440, 469, 484, 485, 486, 488, 492, 528, 538, 539, 540, 543, 566, 586, 587, 598, 608, 618, 633, 642, 677, 684, 685, 693, 741, 804, 805, 806, 810, 812, 813, 817, 819, 822, 824, 827, 830, 831, 834, 837, 841, 842, 844, 849, 850, 955, 956, 957, 959, 963, 1004, 1014, 1015, 1016, 1019, 1059], "round": [18, 31, 69, 97, 256, 299, 374, 555, 642, 779, 859, 1059], "corner": [18, 31, 97, 256], "op": [18, 126, 256, 479, 538, 540, 642, 741, 1014, 1016, 1059], "one": [18, 29, 31, 57, 67, 82, 90, 92, 93, 94, 95, 96, 108, 109, 125, 126, 127, 130, 148, 149, 156, 157, 158, 159, 170, 179, 187, 195, 196, 202, 218, 221, 237, 256, 264, 370, 433, 437, 484, 507, 519, 553, 591, 623, 626, 633, 642, 670, 671, 674, 675, 676, 689, 703, 721, 724, 741, 750, 856, 884, 922, 926, 955, 995, 1023, 1059], "more": [18, 31, 33, 35, 48, 57, 67, 74, 89, 90, 91, 92, 93, 94, 95, 96, 103, 104, 108, 109, 110, 113, 124, 126, 130, 133, 138, 139, 170, 174, 179, 183, 195, 196, 198, 218, 224, 238, 256, 267, 270, 286, 300, 301, 302, 398, 434, 437, 440, 466, 495, 505, 519, 538, 539, 540, 560, 623, 626, 633, 642, 689, 714, 741, 744, 751, 766, 782, 783, 784, 794, 884, 888, 923, 966, 981, 995, 1014, 1015, 1016, 1044, 1059, 1067], "semigraph": 18, "box": [18, 133, 256], "draw": [18, 23, 24, 123, 495, 501, 642, 1067], "found": [18, 28, 54, 77, 86, 88, 93, 97, 143, 227, 256, 496, 522, 538, 540, 642, 716, 741, 967, 998, 1014, 1016, 1059, 1066], "unicod": 18, "block": [18, 157, 224, 256, 674, 697, 714, 722, 725, 741, 969, 970, 1059], "http": [18, 31, 91, 103, 132, 138, 256, 518, 520, 994, 996], "en": [18, 31, 256], "wikipedia": 18, "org": [18, 91, 103, 132, 138, 256], "wiki": 18, "drawing_charact": 18, "box_draw": 18, "mno": 18, "tbl_format": 18, "tbl_hide_column_data_typ": 18, "tbl_hide_dataframe_shap": 18, "hide": [19, 20, 21, 22, 31, 256], "etc": [19, 30, 31, 101, 104, 106, 110, 113, 114, 116, 256, 744, 969, 970, 1059], "inform": [21, 72, 104, 113, 138, 256, 300, 301, 302, 398, 505, 512, 518, 519, 528, 591, 592, 642, 694, 741, 782, 783, 784, 888, 981, 988, 994, 995, 1004, 1059], "separ": [22, 28, 99, 101, 102, 112, 185, 187, 216, 223, 225, 256, 270, 412, 416, 517, 582, 586, 587, 642, 715, 741, 901, 905, 993, 1027, 1036, 1059], "between": [22, 74, 121, 122, 124, 126, 138, 189, 248, 256, 295, 315, 385, 416, 423, 424, 425, 426, 468, 473, 474, 489, 495, 501, 511, 574, 575, 583, 585, 617, 620, 621, 642, 695, 735, 741, 773, 796, 868, 905, 912, 913, 914, 915, 941, 945, 946, 960, 987, 1059], "set_tbl_column_data_type_inlin": 22, "max": [23, 31, 35, 48, 52, 128, 139, 148, 157, 158, 159, 187, 256, 300, 301, 307, 370, 433, 467, 476, 485, 497, 535, 610, 623, 642, 670, 674, 675, 676, 741, 782, 783, 788, 794, 856, 922, 947, 956, 971, 1011, 1059], "both": [23, 28, 58, 158, 159, 172, 173, 180, 195, 256, 269, 365, 385, 485, 486, 487, 488, 489, 491, 492, 493, 591, 592, 630, 631, 642, 652, 675, 676, 680, 681, 690, 741, 868, 877, 1059], "tbl_row": 23, "char": [24, 58, 75, 519, 526, 995, 1002], "enabl": [25, 75, 119, 120, 129, 200, 232, 256, 497, 642, 700, 719, 741, 971, 1059], "addit": [25, 30, 31, 93, 104, 113, 122, 140, 142, 145, 157, 185, 200, 201, 202, 208, 225, 232, 233, 236, 256, 263, 326, 365, 368, 467, 508, 512, 518, 519, 528, 567, 569, 576, 579, 580, 581, 582, 588, 596, 609, 613, 622, 625, 626, 642, 663, 667, 674, 700, 701, 703, 708, 715, 719, 720, 723, 741, 800, 808, 854, 988, 994, 995, 1004, 1059], "verbos": [25, 130, 519, 995], "debug": [25, 660, 668, 685, 741, 1067], "log": [25, 69, 293, 359, 437, 459, 470, 558, 642, 772, 846, 1043, 1059], "if_set": 26, "env_onli": 26, "dict": [26, 30, 31, 35, 55, 68, 70, 72, 90, 92, 93, 94, 95, 96, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 124, 151, 170, 185, 191, 195, 196, 197, 199, 214, 215, 223, 256, 266, 268, 312, 442, 473, 483, 642, 697, 699, 741, 928, 1059], "show": [26, 31, 56, 142, 156, 174, 184, 256, 664, 694, 706, 741], "variabl": [26, 49, 54, 125, 128, 179, 216, 256, 689, 741, 1036, 1059, 1066], "restrict": [26, 535, 591, 592, 1011], "dictionari": [26, 31, 90, 92, 93, 94, 96, 101, 102, 107, 108, 109, 111, 112, 170, 185, 195, 196, 197, 214, 215, 256, 442, 642, 741, 928, 1059], "those": [26, 31, 101, 197, 256, 476, 518, 642, 744, 947, 994, 1059], "been": [26, 31, 256, 294, 476, 485, 486, 487, 488, 489, 491, 492, 493, 573, 642, 696, 741, 947, 1059], "set_fmt_float": 26, "directli": [26, 54, 124, 126, 130, 197, 256, 362, 363, 364, 619, 642, 741, 848, 849, 850, 1059, 1067], "via": [26, 101, 102, 105, 112, 114, 115, 116, 170, 196, 256, 270, 520, 642, 996], "set_stat": 26, "all_stat": 26, "binaryio": [27, 32, 100, 101, 105, 106, 107, 110, 111, 256], "bytesio": [27, 28, 31, 32, 35, 100, 101, 102, 105, 106, 110, 256], "compress": [27, 32, 35, 47, 48, 256, 741], "avrocompress": [27, 256], "uncompress": [27, 32, 35, 48, 106, 114, 256, 741], "write": [27, 28, 29, 30, 31, 32, 33, 35, 48, 102, 106, 130, 256, 300, 301, 302, 455, 642, 683, 706, 741, 782, 783, 784, 1059], "apach": [27, 35, 100, 103, 256], "avro": [27, 100, 256, 653], "should": [27, 28, 29, 31, 32, 33, 34, 35, 47, 48, 74, 90, 92, 94, 96, 104, 108, 109, 110, 112, 116, 121, 122, 126, 132, 133, 134, 140, 158, 159, 170, 173, 195, 196, 197, 215, 216, 222, 225, 228, 238, 256, 264, 270, 297, 311, 312, 343, 347, 354, 357, 365, 391, 393, 411, 473, 484, 485, 486, 487, 488, 489, 491, 492, 493, 496, 505, 580, 596, 603, 607, 620, 621, 633, 642, 656, 663, 675, 676, 680, 681, 685, 702, 706, 708, 713, 715, 741, 744, 751, 776, 792, 793, 829, 833, 840, 843, 900, 945, 955, 956, 957, 958, 959, 960, 962, 963, 964, 967, 981, 1059], "snappi": [27, 35, 48, 256, 741], "deflat": [27, 256], "import": [27, 28, 31, 32, 35, 38, 67, 90, 94, 95, 112, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 139, 140, 142, 156, 158, 171, 173, 185, 187, 216, 218, 219, 226, 228, 256, 313, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 485, 486, 488, 491, 492, 493, 574, 575, 591, 592, 594, 630, 631, 642, 653, 662, 663, 664, 675, 681, 685, 689, 702, 741, 786, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 872, 876, 878, 879, 884, 955, 979, 1032, 1059, 1067], "pathlib": [27, 28, 32, 35, 112, 256], "foo": [27, 28, 30, 32, 33, 34, 35, 56, 133, 137, 138, 140, 141, 142, 143, 146, 149, 150, 152, 153, 154, 155, 160, 161, 162, 163, 164, 165, 167, 172, 176, 177, 178, 181, 184, 187, 189, 191, 192, 193, 195, 198, 199, 200, 203, 204, 205, 207, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 223, 224, 225, 229, 230, 231, 235, 256, 296, 300, 301, 302, 343, 381, 383, 402, 408, 413, 414, 417, 418, 480, 498, 499, 511, 513, 515, 517, 519, 520, 525, 531, 533, 535, 537, 542, 545, 552, 554, 572, 578, 580, 583, 584, 585, 597, 601, 602, 606, 609, 611, 612, 613, 615, 617, 622, 624, 628, 632, 633, 642, 661, 663, 664, 665, 671, 678, 679, 680, 692, 697, 699, 700, 714, 715, 718, 721, 741, 744, 775, 782, 829, 905, 951, 989, 991, 993, 995, 996, 1011, 1018, 1021, 1059], "bar": [27, 28, 30, 32, 33, 34, 35, 56, 133, 137, 138, 140, 141, 142, 143, 146, 149, 150, 152, 153, 154, 155, 161, 163, 164, 165, 167, 172, 176, 177, 178, 181, 184, 187, 189, 191, 192, 193, 195, 198, 199, 200, 204, 205, 207, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 224, 225, 229, 230, 235, 256, 296, 383, 418, 505, 515, 517, 520, 533, 535, 572, 578, 580, 583, 584, 585, 597, 602, 606, 609, 611, 612, 613, 615, 622, 624, 628, 632, 633, 642, 661, 663, 664, 665, 671, 678, 679, 680, 692, 697, 699, 700, 714, 715, 718, 741, 744, 775, 905, 981, 991, 993, 996, 1011, 1059], "ham": [27, 28, 30, 32, 35, 137, 138, 140, 141, 142, 143, 149, 150, 153, 160, 161, 163, 172, 176, 177, 178, 181, 184, 189, 191, 193, 195, 198, 199, 200, 204, 205, 207, 209, 210, 211, 216, 217, 218, 219, 220, 224, 229, 230, 256, 296, 580, 661, 663, 664, 665, 671, 680, 692, 697, 699, 700, 714, 721, 741, 775], "d": [27, 28, 30, 31, 32, 35, 58, 75, 93, 117, 139, 156, 158, 160, 161, 164, 172, 211, 213, 226, 230, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 263, 265, 327, 350, 353, 385, 469, 500, 513, 519, 534, 538, 539, 540, 579, 600, 642, 675, 680, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 741, 809, 836, 839, 868, 989, 995, 1010, 1014, 1015, 1016, 1059], "e": [27, 28, 30, 32, 35, 58, 75, 91, 101, 102, 105, 106, 110, 114, 116, 139, 156, 158, 159, 161, 173, 211, 213, 218, 226, 228, 256, 263, 270, 343, 347, 354, 359, 365, 385, 435, 442, 485, 486, 487, 488, 489, 491, 492, 493, 500, 505, 596, 633, 642, 675, 676, 681, 683, 697, 741, 744, 829, 833, 840, 846, 868, 968, 981, 1040, 1059], "dirpath": [27, 28, 32, 35, 112, 256], "new_fil": [27, 28, 32, 35, 256], "has_head": [28, 31, 101, 102, 105, 112, 256], "quot": [28, 29, 101, 102, 112, 256], "batch_siz": [28, 101, 102, 115, 117, 256], "1024": [28, 48, 101, 102, 115, 256, 741], "datetime_format": [28, 256], "date_format": [28, 256], "time_format": [28, 256], "float_precis": [28, 31, 256], "null_valu": [28, 101, 102, 112, 256], "textiowrapp": [28, 256], "comma": [28, 256], "csv": [28, 47, 48, 101, 102, 105, 112, 256, 653, 741], "result": [28, 33, 34, 47, 48, 67, 74, 94, 96, 103, 104, 112, 114, 116, 117, 126, 146, 158, 159, 172, 183, 197, 205, 219, 228, 236, 256, 270, 312, 350, 353, 362, 363, 364, 368, 398, 433, 440, 467, 473, 480, 484, 485, 486, 487, 488, 489, 491, 492, 493, 497, 499, 533, 534, 540, 559, 573, 586, 587, 591, 592, 593, 608, 616, 619, 620, 621, 634, 642, 657, 675, 676, 680, 685, 694, 702, 705, 723, 741, 750, 751, 836, 839, 848, 849, 850, 853, 888, 945, 951, 955, 956, 957, 958, 959, 960, 962, 963, 964, 971, 974, 1009, 1010, 1016, 1040, 1059, 1066, 1067], "If": [28, 29, 30, 31, 32, 33, 34, 35, 48, 52, 58, 72, 74, 90, 91, 92, 93, 94, 95, 96, 101, 102, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 125, 132, 133, 134, 142, 146, 156, 158, 159, 161, 169, 170, 173, 175, 179, 183, 196, 197, 198, 207, 211, 215, 216, 218, 222, 223, 224, 226, 227, 256, 266, 268, 270, 300, 301, 302, 312, 320, 339, 340, 354, 371, 398, 428, 433, 440, 442, 453, 467, 473, 476, 478, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 501, 505, 506, 520, 521, 523, 525, 526, 531, 532, 533, 534, 535, 537, 538, 539, 540, 543, 567, 569, 571, 573, 577, 583, 584, 586, 588, 591, 592, 598, 604, 605, 607, 609, 613, 616, 619, 620, 621, 625, 626, 630, 631, 633, 634, 642, 656, 664, 666, 675, 676, 680, 681, 685, 689, 697, 702, 707, 713, 714, 716, 725, 741, 744, 750, 751, 782, 783, 784, 793, 802, 825, 826, 840, 853, 861, 863, 864, 887, 888, 890, 917, 922, 945, 947, 949, 951, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 971, 977, 981, 982, 996, 997, 999, 1001, 1002, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1019, 1029, 1035, 1040, 1049, 1059, 1066], "instead": [28, 33, 34, 52, 56, 67, 74, 101, 110, 116, 124, 133, 158, 159, 170, 173, 183, 185, 195, 196, 197, 200, 201, 219, 228, 232, 233, 256, 280, 312, 343, 347, 354, 365, 473, 485, 486, 487, 488, 489, 491, 492, 493, 523, 525, 531, 537, 567, 569, 573, 577, 578, 588, 591, 592, 604, 605, 609, 613, 616, 619, 625, 626, 630, 631, 634, 642, 669, 675, 676, 681, 700, 701, 702, 719, 720, 741, 744, 760, 793, 829, 833, 840, 945, 969, 970, 999, 1001, 1007, 1013, 1041, 1059, 1066], "whether": [28, 94, 96, 126, 134, 202, 222, 256, 312, 330, 348, 403, 404, 447, 448, 473, 497, 642, 656, 685, 703, 708, 713, 741, 744, 777, 793, 812, 834, 892, 893, 945, 1059, 1066], "header": [28, 31, 35, 48, 97, 101, 102, 105, 112, 143, 187, 223, 256, 741], "field": [28, 59, 86, 88, 93, 218, 225, 256, 433, 442, 482, 519, 520, 521, 534, 535, 548, 586, 587, 608, 625, 642, 715, 741, 793, 922, 945, 953, 996, 1008, 1010, 1011, 1025, 1027, 1059], "symbol": [28, 256], "byte": [28, 48, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 144, 256, 288, 291, 292, 523, 526, 741, 767, 770, 771, 847, 999, 1002, 1059], "specifi": [28, 31, 67, 77, 86, 88, 105, 124, 134, 140, 144, 145, 148, 157, 158, 159, 172, 185, 195, 197, 200, 201, 202, 208, 222, 225, 232, 233, 236, 256, 362, 363, 364, 365, 370, 442, 467, 479, 485, 486, 487, 488, 489, 491, 492, 493, 508, 524, 530, 567, 569, 576, 579, 580, 581, 582, 588, 591, 592, 596, 609, 613, 622, 625, 626, 630, 631, 642, 656, 663, 667, 670, 674, 675, 676, 680, 700, 701, 703, 708, 713, 715, 719, 720, 723, 741, 847, 848, 849, 850, 856, 1000, 1006, 1059], "defin": [28, 31, 38, 121, 122, 124, 133, 142, 145, 158, 159, 183, 186, 238, 256, 270, 385, 432, 469, 483, 485, 486, 487, 488, 489, 491, 492, 493, 571, 591, 592, 607, 625, 630, 631, 642, 664, 667, 675, 676, 693, 725, 741, 744, 751, 868, 921, 954, 1059], "chrono": [28, 256, 350, 353, 538, 539, 540, 543, 836, 839, 1014, 1015, 1016, 1019], "rust": [28, 35, 83, 106, 110, 133, 238, 256, 520, 751, 996, 1059], "crate": [28, 256, 512, 513, 518, 519, 520, 528, 529, 538, 539, 540, 543, 744, 988, 989, 994, 995, 996, 1004, 1005, 1014, 1015, 1016, 1019], "fraction": [28, 119, 120, 198, 256, 348, 468, 495, 538, 540, 642, 834, 941, 966, 1014, 1016, 1059], "second": [28, 123, 158, 159, 173, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 538, 540, 593, 594, 629, 633, 642, 675, 676, 681, 741, 744, 829, 833, 840, 1014, 1016, 1067], "precis": [28, 31, 38, 39, 170, 196, 197, 215, 256, 319, 541, 744, 801, 1017], "infer": [28, 90, 92, 93, 94, 95, 96, 101, 102, 105, 108, 109, 112, 115, 133, 256, 480, 521, 538, 539, 540, 541, 543, 619, 642, 741, 951, 997, 1014, 1015, 1016, 1017, 1019, 1059], "maximum": [28, 101, 102, 112, 117, 122, 123, 124, 126, 176, 256, 405, 443, 461, 476, 609, 610, 642, 686, 741, 782, 814, 894, 929, 937, 942, 947, 1059], "timeunit": [28, 38, 40, 256, 319, 320, 352, 357, 540, 591, 592, 593, 744, 801, 802, 838, 843, 1016], "frame": [28, 29, 31, 52, 53, 54, 55, 56, 57, 67, 74, 93, 119, 124, 133, 135, 170, 171, 180, 183, 186, 195, 196, 197, 219, 226, 256, 658, 690, 693, 741, 744, 781, 1059, 1066, 1067], "datetim": [28, 31, 67, 97, 124, 139, 156, 158, 159, 171, 173, 228, 256, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 408, 485, 486, 487, 488, 489, 491, 492, 493, 538, 540, 557, 591, 592, 594, 600, 607, 630, 631, 642, 675, 676, 681, 741, 744, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 884, 897, 898, 937, 938, 970, 1014, 1016, 1042, 1059], "place": [28, 134, 141, 146, 163, 164, 187, 192, 197, 204, 205, 208, 222, 230, 256, 280, 416, 427, 498, 499, 507, 642, 656, 704, 705, 708, 713, 741, 750, 760, 853, 905, 916, 948, 950, 973, 974, 983, 1059], "float64": [28, 31, 93, 101, 124, 143, 144, 152, 199, 219, 232, 256, 272, 273, 274, 275, 276, 277, 295, 303, 304, 313, 348, 365, 391, 393, 475, 503, 504, 555, 556, 580, 596, 616, 619, 634, 642, 665, 699, 719, 741, 744, 834, 1041, 1046, 1059], "repres": [28, 50, 65, 90, 92, 94, 95, 96, 209, 229, 235, 256, 391, 393, 510, 564, 567, 580, 583, 596, 607, 620, 621, 624, 632, 642, 709, 717, 741, 970, 985, 1048, 1059], "empti": [28, 81, 93, 101, 102, 105, 112, 135, 136, 158, 167, 179, 256, 607, 622, 658, 659, 675, 689, 741, 744, 781, 785, 871, 1059], "table_nam": [29, 31, 256], "connect": [29, 101, 103, 106, 110, 114, 116, 117, 256, 654], "if_exist": [29, 256], "dbwritemod": [29, 256], "fail": [29, 30, 91, 104, 106, 109, 113, 132, 224, 256, 281, 351, 433, 538, 539, 540, 543, 642, 714, 741, 751, 1014, 1015, 1016, 1019, 1059], "dbwriteengin": [29, 256], "sqlalchemi": [29, 256], "databas": [29, 103, 256, 653], "creat": [29, 31, 90, 94, 96, 113, 122, 123, 124, 125, 126, 127, 135, 136, 158, 159, 184, 187, 228, 232, 256, 320, 347, 354, 433, 477, 485, 486, 488, 491, 492, 493, 532, 563, 581, 590, 591, 592, 593, 594, 629, 630, 631, 642, 658, 659, 666, 675, 676, 719, 741, 781, 785, 798, 802, 833, 840, 939, 948, 1008, 1040, 1059, 1066, 1067], "append": [29, 30, 124, 146, 172, 173, 256, 312, 473, 477, 591, 592, 633, 642, 680, 681, 741, 853, 1059], "your": [29, 31, 67, 101, 102, 119, 120, 133, 170, 196, 197, 200, 215, 232, 236, 238, 256, 270, 520, 538, 539, 540, 571, 642, 660, 677, 684, 685, 700, 719, 723, 725, 741, 751, 996, 1014, 1015, 1016, 1059, 1067], "special": [29, 101, 102, 112, 256, 519, 751, 995, 1059], "uri": [29, 30, 103, 104, 113, 256], "postgresql": [29, 103, 256, 467, 642], "user": [29, 103, 133, 186, 238, 256, 270, 440, 469, 497, 571, 591, 642, 693, 725, 741, 751, 971, 1059], "pass": [29, 31, 35, 55, 67, 92, 103, 105, 112, 117, 122, 124, 126, 134, 138, 140, 157, 158, 159, 161, 175, 185, 186, 200, 208, 211, 222, 228, 232, 236, 256, 270, 327, 346, 368, 383, 467, 469, 485, 486, 487, 488, 489, 491, 492, 493, 508, 525, 531, 537, 567, 569, 576, 580, 588, 591, 600, 609, 613, 625, 626, 633, 642, 656, 663, 674, 675, 676, 678, 685, 693, 700, 706, 708, 713, 719, 723, 725, 741, 751, 809, 832, 854, 863, 890, 1001, 1007, 1013, 1029, 1059], "server": [29, 103, 256], "port": [29, 101, 103, 106, 110, 114, 116, 256], "sqlite": [29, 256], "db": [29, 103, 256], "replac": [29, 30, 101, 102, 112, 147, 148, 193, 223, 232, 233, 256, 320, 346, 442, 529, 573, 642, 669, 719, 720, 741, 802, 832, 928, 969, 970, 1005, 1059], "insert": [29, 101, 102, 106, 110, 112, 114, 115, 116, 164, 192, 223, 225, 256, 496, 511, 546, 642, 715, 741, 967, 987, 1022, 1059], "mode": [29, 30, 52, 256, 519, 616, 619, 634, 642, 741, 995, 1059, 1066], "new": [29, 30, 31, 112, 130, 133, 142, 163, 164, 183, 184, 191, 192, 212, 223, 225, 226, 232, 233, 256, 265, 320, 367, 384, 441, 528, 529, 534, 535, 547, 548, 554, 573, 642, 653, 664, 697, 712, 715, 719, 720, 725, 741, 747, 798, 802, 852, 939, 950, 1004, 1005, 1010, 1011, 1023, 1025, 1031, 1037, 1059, 1066], "alreadi": [29, 30, 256, 311, 411, 642, 792, 900, 1059], "adbc": [29, 103, 256], "deltalak": [30, 104, 113, 118, 256], "deltat": [30, 256], "ignor": [30, 123, 124, 126, 177, 210, 256, 314, 346, 362, 363, 364, 410, 461, 462, 642, 795, 832, 848, 849, 850, 899, 937, 938, 1059], "overwrite_schema": [30, 256], "storage_opt": [30, 101, 104, 106, 110, 113, 114, 116, 256], "delta_write_opt": [30, 256], "delta": [30, 40, 104, 113, 209, 229, 256, 491, 493, 510, 564, 583, 620, 621, 624, 632, 642, 653, 709, 717, 741, 962, 964, 985, 1048, 1059], "like": [30, 91, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 166, 168, 172, 218, 256, 318, 411, 454, 476, 518, 591, 592, 626, 630, 631, 642, 662, 668, 696, 741, 750, 800, 900, 947, 994, 1059], "categor": [30, 58, 75, 91, 119, 120, 132, 172, 216, 217, 256, 296, 297, 442, 557, 642, 744, 774, 775, 776, 777, 793, 945, 1042, 1059], "protocol": [30, 91, 103, 132, 256], "object": [30, 31, 32, 57, 74, 91, 92, 97, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 122, 124, 126, 132, 157, 158, 159, 174, 197, 218, 219, 256, 591, 592, 607, 630, 631, 653, 662, 675, 676, 696, 741, 744, 774, 799, 891, 986, 1035, 1059], "handl": [30, 74, 97, 101, 102, 112, 117, 256, 314, 410, 546, 642, 795, 899, 1022, 1059], "throw": [30, 256, 295, 521, 522, 642, 773, 997, 998, 1059], "add": [30, 31, 102, 133, 146, 158, 232, 233, 234, 256, 471, 550, 594, 598, 633, 642, 675, 680, 719, 720, 721, 722, 741, 750, 853, 1059], "anyth": [30, 195, 256, 519, 995], "updat": [30, 256, 741], "extra": [30, 35, 48, 101, 104, 105, 106, 110, 113, 114, 116, 146, 158, 256, 675, 741, 750, 853, 1059], "storag": [30, 101, 104, 106, 110, 113, 114, 116, 256], "backend": [30, 103, 104, 113, 256], "cloud": [30, 104, 113, 117, 256], "configur": [30, 104, 113, 256], "authent": [30, 104, 113, 256], "see": [30, 31, 38, 103, 104, 105, 113, 119, 120, 124, 126, 138, 172, 186, 256, 300, 301, 302, 370, 398, 440, 505, 512, 518, 519, 528, 591, 592, 618, 642, 744, 782, 783, 784, 888, 981, 988, 994, 995, 1004, 1059, 1067], "here": [30, 31, 35, 90, 92, 93, 94, 96, 103, 104, 108, 109, 113, 122, 124, 126, 256, 520, 522, 741, 998], "gc": [30, 104, 113, 256], "azur": [30, 104, 113, 256], "keyword": [30, 55, 104, 110, 113, 138, 186, 195, 200, 201, 232, 233, 236, 256, 469, 622, 625, 642, 693, 700, 701, 719, 720, 723, 741, 1059], "argument": [30, 35, 101, 104, 110, 113, 138, 140, 145, 157, 158, 159, 177, 185, 186, 187, 200, 201, 202, 208, 210, 219, 225, 228, 232, 233, 236, 256, 347, 354, 365, 385, 467, 469, 485, 486, 487, 488, 489, 491, 492, 493, 508, 525, 531, 537, 567, 569, 574, 575, 576, 579, 580, 581, 582, 588, 591, 596, 609, 613, 619, 622, 625, 626, 630, 642, 663, 667, 674, 675, 676, 693, 700, 701, 703, 708, 715, 719, 720, 723, 741, 750, 833, 840, 868, 1001, 1007, 1013, 1041, 1059], "while": [30, 102, 104, 105, 113, 124, 126, 170, 179, 223, 256, 689, 741], "lake": [30, 104, 113, 256, 653], "instanti": [30, 31, 200, 232, 256, 700, 719, 741], "basic": [30, 31, 256, 1067], "filesystem": [30, 104, 113, 256], "table_path": [30, 104, 113, 256], "doe": [30, 67, 74, 84, 90, 92, 93, 94, 96, 97, 101, 102, 104, 105, 108, 109, 112, 113, 117, 119, 120, 146, 171, 172, 195, 196, 197, 224, 232, 256, 294, 357, 433, 442, 561, 591, 597, 606, 642, 668, 680, 685, 714, 719, 741, 750, 843, 853, 861, 928, 976, 1049, 1059], "match": [30, 31, 38, 74, 84, 90, 92, 93, 94, 96, 108, 109, 119, 120, 148, 173, 195, 256, 448, 490, 512, 513, 516, 518, 519, 521, 522, 528, 529, 536, 538, 539, 540, 580, 642, 670, 681, 741, 744, 877, 884, 961, 988, 989, 992, 994, 995, 997, 998, 1004, 1005, 1012, 1014, 1015, 1016, 1059], "version": [30, 72, 104, 113, 118, 256, 294, 339, 340, 538, 540, 573, 578, 591, 618, 619, 630, 642, 673, 696, 741, 750, 825, 826, 1014, 1016, 1059], "old": [30, 191, 256, 697, 741], "existing_table_path": [30, 256], "store": [30, 101, 110, 146, 170, 196, 256, 296, 750, 775, 853, 1059], "bucket": [30, 104, 113, 256, 347, 354, 833, 840, 864, 1059], "prefix": [30, 130, 256, 265, 292, 441, 536, 546, 550, 642, 744, 771, 1012, 1022], "aws_region": [30, 113, 256], "the_aws_region": [30, 256], "aws_access_key_id": [30, 104, 113, 256], "the_aws_access_key_id": [30, 104, 113, 256], "aws_secret_access_kei": [30, 104, 113, 256], "the_aws_secret_access_kei": [30, 104, 113, 256], "workbook": [31, 256], "worksheet": [31, 256], "posit": [31, 140, 145, 157, 185, 200, 201, 202, 208, 225, 232, 233, 236, 256, 362, 363, 364, 365, 467, 473, 508, 520, 527, 567, 569, 574, 575, 576, 579, 580, 581, 582, 588, 596, 609, 613, 622, 625, 626, 642, 663, 667, 674, 700, 701, 703, 708, 715, 719, 720, 723, 741, 848, 849, 850, 945, 996, 1003, 1059], "tupl": [31, 103, 133, 170, 195, 196, 197, 203, 235, 256, 480, 642, 694, 706, 741, 744, 951, 1059], "a1": [31, 68, 70, 256], "table_styl": [31, 256], "column_format": [31, 256], "dtype_format": [31, 256], "oneormoredatatyp": [31, 122, 256, 884, 1059], "conditional_format": [31, 256], "conditionalformatdict": [31, 256], "column_tot": [31, 256], "columntotalsdefinit": [31, 256], "column_width": [31, 256], "row_tot": [31, 256], "rowtotalsdefinit": [31, 256], "row_height": [31, 256], "sparklin": [31, 256], "sequenc": [31, 59, 67, 73, 90, 92, 93, 94, 96, 101, 102, 108, 109, 112, 122, 123, 124, 134, 139, 145, 146, 172, 173, 179, 183, 185, 186, 187, 197, 208, 216, 222, 226, 227, 228, 256, 389, 433, 440, 469, 508, 548, 571, 576, 586, 587, 598, 600, 608, 618, 623, 642, 656, 667, 680, 681, 689, 693, 708, 713, 715, 716, 741, 750, 794, 796, 853, 922, 970, 1025, 1059], "formula": [31, 256, 359, 642, 846, 1059], "autofilt": [31, 256], "autofit": [31, 256], "hidden_column": [31, 256], "hide_gridlin": [31, 256], "sheet_zoom": [31, 256], "freeze_pan": [31, 256], "excel": [31, 105, 256, 653], "open": [31, 101, 102, 105, 106, 110, 114, 116, 256], "xlsxwriter": [31, 118, 256], "ha": [31, 67, 112, 132, 158, 159, 228, 256, 270, 293, 294, 311, 451, 485, 486, 487, 488, 489, 491, 492, 493, 558, 571, 573, 642, 675, 676, 696, 725, 741, 772, 781, 792, 794, 861, 874, 1043, 1059], "close": [31, 158, 159, 256, 385, 437, 485, 486, 487, 488, 489, 491, 492, 493, 505, 591, 592, 630, 631, 642, 675, 676, 741, 868, 981, 1059], "xlsx": [31, 105, 256], "work": [31, 39, 91, 102, 105, 132, 192, 201, 233, 256, 270, 286, 299, 300, 301, 302, 365, 374, 411, 434, 467, 483, 526, 560, 642, 701, 720, 741, 766, 779, 782, 783, 784, 859, 900, 923, 1002, 1044, 1059], "directori": [31, 35, 110, 116, 256], "sheet1": [31, 256], "valid": [31, 38, 52, 106, 110, 126, 130, 144, 172, 256, 311, 512, 513, 518, 519, 520, 522, 528, 529, 591, 592, 633, 642, 680, 741, 744, 792, 847, 861, 988, 989, 994, 995, 996, 998, 1004, 1005, 1059], "notat": [31, 256], "integ": [31, 43, 44, 45, 46, 61, 62, 63, 64, 122, 124, 125, 127, 142, 158, 159, 216, 256, 267, 299, 348, 374, 375, 466, 473, 478, 485, 486, 487, 488, 489, 490, 491, 492, 493, 527, 566, 573, 600, 604, 605, 619, 642, 664, 675, 676, 741, 744, 779, 834, 859, 877, 945, 949, 961, 970, 1003, 1059, 1066, 1067], "medium": [31, 256], "kei": [31, 67, 72, 74, 158, 170, 172, 173, 180, 185, 187, 191, 194, 196, 197, 256, 625, 675, 680, 681, 690, 697, 698, 741], "follow": [31, 35, 72, 101, 102, 104, 112, 113, 133, 158, 159, 173, 186, 228, 256, 270, 343, 347, 354, 469, 476, 485, 486, 487, 488, 489, 490, 491, 492, 493, 548, 559, 571, 591, 633, 635, 636, 638, 642, 643, 644, 648, 649, 650, 675, 676, 681, 693, 741, 829, 833, 840, 947, 969, 970, 1051, 1053, 1055, 1059, 1060, 1063, 1064, 1065, 1067], "first_column": [31, 256], "last_column": [31, 256], "banded_column": [31, 256], "banded_row": [31, 256], "sheet": [31, 105, 256], "chart": [31, 256, 694, 741], "subsequ": [31, 57, 190, 219, 256, 433, 633, 666, 741], "colnam": [31, 112, 124, 143, 256, 665, 741], "given": [31, 52, 53, 67, 90, 92, 93, 94, 96, 101, 102, 108, 109, 112, 121, 122, 124, 125, 126, 127, 133, 134, 144, 145, 147, 158, 159, 169, 185, 186, 195, 197, 204, 205, 208, 222, 227, 256, 270, 312, 318, 321, 350, 352, 353, 359, 385, 408, 427, 433, 435, 467, 469, 473, 476, 479, 480, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 498, 499, 519, 520, 538, 540, 548, 571, 596, 608, 619, 620, 621, 642, 656, 667, 675, 676, 685, 693, 704, 705, 708, 713, 716, 725, 741, 744, 751, 793, 800, 803, 836, 838, 839, 846, 847, 864, 868, 887, 897, 916, 922, 924, 927, 939, 945, 947, 951, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 973, 974, 995, 996, 1014, 1016, 1046, 1050, 1059, 1066, 1067], "dd": [31, 256], "mm": [31, 256], "yyyi": [31, 256], "00": [31, 124, 158, 173, 228, 256, 318, 319, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 485, 486, 488, 491, 492, 493, 538, 540, 543, 591, 594, 630, 631, 642, 675, 681, 741, 744, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 840, 841, 842, 843, 844, 1014, 1016, 1019], "overridden": [31, 90, 92, 94, 96, 108, 109, 128, 256, 741], "basi": [31, 124, 256], "param": [31, 90, 92, 93, 94, 96, 101, 102, 108, 109, 112, 123, 124, 126, 195, 256, 741], "It": [31, 180, 186, 238, 256, 270, 294, 450, 483, 591, 592, 642, 685, 690, 725, 741, 969, 970, 1059], "also": [31, 57, 93, 112, 122, 123, 124, 125, 126, 130, 143, 157, 158, 159, 180, 183, 196, 200, 208, 232, 256, 307, 310, 346, 385, 476, 485, 486, 487, 488, 489, 491, 492, 493, 508, 531, 537, 586, 587, 591, 598, 600, 618, 633, 641, 642, 647, 674, 675, 676, 690, 700, 708, 719, 721, 741, 744, 832, 868, 947, 1013, 1059], "group": [31, 35, 48, 52, 102, 157, 158, 159, 171, 183, 185, 187, 197, 226, 228, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256, 264, 270, 367, 373, 411, 467, 473, 476, 483, 507, 508, 512, 518, 519, 520, 528, 553, 571, 642, 674, 675, 676, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 744, 900, 954, 988, 994, 995, 996, 1004, 1059], "float_dtyp": [31, 256], "simplifi": [31, 47, 48, 73, 256, 660, 666, 668, 694, 706, 741], "uniform": [31, 256], "condit": [31, 142, 149, 195, 256, 516, 536, 577, 598, 633, 664, 671, 741], "suppli": [31, 90, 92, 93, 94, 96, 108, 109, 195, 256, 469, 642, 741], "typenam": [31, 256], "3_color_scal": [31, 256], "data_bar": [31, 256], "make": [31, 59, 74, 90, 95, 101, 102, 106, 110, 114, 116, 180, 183, 190, 228, 256, 363, 364, 442, 467, 479, 495, 501, 534, 546, 642, 690, 741, 849, 850, 864, 928, 1010, 1022, 1059, 1067], "icon": [31, 256], "multipl": [31, 55, 73, 74, 101, 102, 112, 114, 115, 116, 122, 126, 134, 140, 144, 146, 149, 157, 158, 163, 171, 185, 187, 197, 200, 202, 208, 222, 232, 236, 256, 432, 447, 451, 458, 459, 467, 480, 483, 485, 486, 487, 488, 489, 491, 492, 493, 508, 567, 569, 573, 576, 580, 586, 587, 588, 598, 608, 609, 613, 618, 623, 626, 633, 642, 656, 663, 671, 674, 675, 700, 703, 708, 713, 719, 723, 725, 741, 750, 847, 853, 921, 933, 951, 1059], "singl": [31, 53, 67, 74, 101, 102, 103, 110, 112, 122, 133, 140, 141, 142, 146, 154, 169, 172, 185, 195, 197, 208, 256, 270, 343, 371, 409, 432, 440, 477, 480, 508, 511, 565, 567, 569, 571, 573, 576, 580, 581, 582, 588, 605, 608, 609, 613, 623, 626, 631, 642, 663, 664, 680, 708, 741, 750, 829, 853, 898, 921, 948, 951, 987, 1035, 1059], "across": [31, 67, 256, 567, 568, 569, 570, 588, 589, 609, 610, 613, 614, 626, 627], "effect": [31, 132, 152, 158, 218, 256, 270, 326, 591, 592, 642, 675, 722, 741, 800, 808], "heatmap": [31, 256], "min": [31, 35, 48, 139, 148, 158, 159, 187, 256, 300, 302, 308, 370, 467, 476, 488, 614, 622, 642, 670, 675, 676, 741, 782, 784, 789, 794, 856, 947, 959, 1059, 1067], "entir": [31, 256], "final": [31, 67, 116, 256, 362, 363, 364, 642, 668, 741, 848, 849, 850, 1059], "made": [31, 256, 1040, 1059], "up": [31, 59, 103, 170, 173, 196, 197, 215, 256, 270, 299, 546, 642, 680, 681, 685, 741, 744, 779, 1022, 1059], "abov": [31, 256, 633], "order": [31, 47, 48, 52, 54, 67, 73, 93, 119, 133, 134, 157, 158, 159, 185, 186, 187, 198, 202, 208, 218, 222, 224, 228, 256, 270, 280, 286, 297, 429, 434, 476, 495, 496, 497, 501, 507, 508, 548, 560, 561, 576, 642, 652, 656, 674, 675, 676, 689, 703, 708, 713, 714, 741, 751, 760, 766, 776, 777, 793, 883, 918, 923, 945, 947, 952, 966, 967, 971, 983, 1025, 1044, 1045, 1059], "than": [31, 47, 48, 89, 94, 96, 101, 102, 112, 117, 124, 126, 133, 135, 156, 157, 170, 173, 185, 195, 196, 198, 226, 238, 256, 270, 378, 379, 400, 439, 453, 483, 495, 505, 524, 530, 535, 546, 571, 583, 591, 626, 642, 674, 681, 725, 741, 751, 954, 966, 981, 1000, 1006, 1011, 1022, 1059, 1067], "total": [31, 144, 256, 847, 1059], "export": [31, 170, 171, 196, 197, 215, 218, 256], "numer": [31, 140, 173, 187, 226, 256, 263, 300, 301, 302, 375, 385, 437, 457, 459, 470, 479, 500, 520, 549, 559, 642, 653, 663, 681, 689, 741, 744, 782, 783, 784, 794, 868, 882, 968, 975, 996, 1040, 1059, 1067], "associ": [31, 53, 55, 67, 103, 123, 197, 256], "sum": [31, 52, 144, 152, 157, 158, 159, 169, 187, 236, 256, 270, 309, 310, 359, 371, 433, 485, 488, 492, 565, 567, 586, 588, 589, 598, 618, 627, 642, 660, 662, 666, 668, 674, 675, 676, 692, 694, 702, 706, 723, 741, 744, 790, 791, 846, 847, 956, 957, 959, 962, 963, 964, 1059], "must": [31, 91, 92, 104, 113, 117, 139, 145, 158, 159, 173, 180, 195, 256, 312, 433, 440, 473, 485, 486, 487, 488, 489, 491, 492, 493, 633, 642, 667, 675, 676, 681, 685, 690, 741, 793, 794, 945, 1059], "funcnam": [31, 256], "averag": [31, 256, 362, 363, 364, 476, 642, 848, 849, 850, 947, 1059], "count_num": [31, 256], "count": [31, 52, 101, 102, 106, 110, 112, 114, 115, 116, 117, 139, 158, 159, 173, 183, 184, 187, 223, 227, 228, 234, 238, 247, 256, 271, 306, 343, 401, 409, 460, 465, 485, 486, 487, 488, 489, 491, 492, 493, 513, 561, 563, 572, 615, 642, 675, 676, 681, 692, 716, 722, 725, 734, 741, 794, 829, 864, 898, 935, 940, 989, 1045, 1047, 1059], "std_dev": [31, 256], "var": [31, 127, 256, 493, 642, 741, 1059], "pixel": [31, 256], "unit": [31, 38, 40, 124, 126, 144, 256, 319, 320, 327, 352, 357, 438, 451, 538, 540, 562, 591, 592, 593, 600, 642, 694, 741, 744, 801, 802, 809, 838, 843, 847, 927, 1014, 1016, 1046, 1059, 1067], "hand": [31, 101, 102, 112, 256, 423, 424, 425, 426, 912, 913, 914, 915], "side": [31, 158, 159, 256, 385, 423, 424, 425, 426, 485, 486, 487, 488, 489, 491, 492, 493, 496, 591, 592, 630, 631, 642, 675, 676, 741, 868, 912, 913, 914, 915, 967, 1059], "call": [31, 56, 102, 124, 126, 130, 133, 157, 158, 159, 174, 255, 256, 270, 307, 310, 397, 471, 550, 609, 613, 642, 654, 674, 675, 676, 740, 741, 744, 751, 1059], "ad": [31, 93, 132, 158, 223, 232, 233, 256, 269, 368, 586, 587, 642, 675, 719, 720, 741, 854, 1059], "end": [31, 101, 102, 110, 112, 158, 256, 288, 291, 292, 318, 343, 347, 348, 365, 385, 428, 512, 516, 519, 532, 536, 573, 580, 591, 592, 596, 604, 605, 630, 631, 633, 642, 675, 677, 684, 694, 741, 744, 770, 800, 829, 833, 868, 917, 992, 995, 1008, 1012, 1059], "wise": [31, 67, 152, 256, 272, 273, 274, 275, 276, 277, 303, 304, 366, 436, 502, 503, 504, 555, 556, 586, 587, 598, 609, 613, 618, 642, 752, 753, 754, 755, 756, 757, 786, 787, 851, 925, 926, 978, 979, 980, 1032, 1033, 1059], "particip": [31, 256], "distinct": [31, 126, 185, 256, 286, 434, 476, 594, 642, 766, 923, 947, 1059, 1067], "referenc": [31, 256, 548], "differ": [31, 101, 117, 119, 146, 158, 159, 170, 196, 197, 215, 223, 256, 314, 324, 343, 344, 346, 355, 361, 410, 423, 425, 442, 461, 462, 464, 495, 501, 538, 561, 591, 597, 600, 606, 642, 666, 675, 676, 741, 744, 750, 751, 795, 806, 829, 830, 832, 841, 853, 899, 912, 914, 937, 938, 968, 1014, 1059], "row_index": [31, 256], "height": [31, 142, 256], "provid": [31, 47, 48, 55, 101, 102, 103, 104, 112, 113, 124, 126, 169, 256, 270, 289, 290, 365, 433, 440, 514, 515, 518, 521, 522, 600, 625, 642, 653, 741, 751, 768, 769, 864, 887, 990, 991, 994, 997, 998, 1059, 1066, 1067], "intersect": [31, 256, 424, 744, 913], "bodi": [31, 256], "start": [31, 100, 101, 102, 103, 106, 110, 112, 114, 115, 116, 128, 157, 158, 174, 207, 228, 234, 256, 288, 291, 292, 324, 327, 328, 330, 331, 336, 338, 344, 345, 347, 348, 352, 354, 355, 356, 358, 365, 385, 428, 485, 486, 488, 491, 492, 493, 506, 512, 516, 519, 532, 536, 573, 580, 586, 591, 592, 596, 598, 604, 605, 630, 631, 633, 642, 674, 675, 694, 707, 722, 741, 744, 771, 801, 803, 806, 809, 810, 812, 817, 819, 822, 824, 827, 830, 831, 833, 834, 838, 840, 841, 842, 843, 844, 868, 917, 982, 992, 995, 1008, 1012, 1059, 1067], "zero": [31, 90, 91, 100, 101, 102, 106, 110, 123, 132, 148, 170, 195, 213, 218, 219, 256, 370, 433, 437, 496, 505, 546, 559, 642, 658, 670, 741, 781, 856, 922, 981, 1022, 1035, 1040, 1041, 1059], "unless": [31, 67, 92, 219, 256, 531, 537, 619, 741, 1013, 1041, 1049, 1059], "marker": [31, 256], "compliant": [31, 256], "case": [31, 67, 90, 92, 93, 94, 96, 108, 109, 116, 128, 133, 146, 158, 159, 170, 196, 197, 215, 256, 318, 440, 441, 450, 451, 512, 519, 528, 642, 675, 676, 741, 744, 750, 800, 853, 988, 995, 1004, 1059], "three": [31, 221, 256, 433, 496, 642, 922], "avail": [31, 99, 103, 104, 113, 122, 130, 255, 256, 476, 573, 635, 636, 638, 641, 642, 643, 644, 647, 648, 649, 650, 653, 654, 668, 740, 741, 744, 947, 1051, 1053, 1055, 1059, 1060, 1063, 1064, 1065], "insert_befor": [31, 256], "insert_aft": [31, 256], "respect": [31, 256], "direct": [31, 103, 110, 116, 226, 256], "far": [31, 256], "thei": [31, 93, 112, 119, 130, 174, 197, 256, 484, 642, 744, 955, 1059], "strongli": [31, 128, 133, 195, 238, 256, 270, 642, 751, 1059], "advis": [31, 174, 256], "structur": [31, 81, 85, 87, 146, 186, 197, 218, 256, 469, 642, 693, 741, 750, 853, 1059], "wherev": [31, 133, 238, 256, 270, 642, 751, 1059], "possibl": [31, 101, 133, 134, 157, 170, 196, 222, 224, 238, 256, 270, 438, 450, 535, 562, 642, 656, 674, 708, 713, 714, 741, 751, 1011, 1059], "simpl": [31, 126, 183, 256], "colx": [31, 57, 256, 744, 1067], "coli": [31, 256, 744, 1067], "after": [31, 57, 74, 93, 100, 101, 102, 106, 110, 112, 114, 115, 116, 146, 225, 255, 256, 365, 442, 467, 476, 546, 642, 715, 741, 750, 853, 928, 947, 1022, 1059], "befor": [31, 101, 112, 117, 119, 120, 128, 130, 146, 158, 173, 225, 256, 309, 310, 311, 442, 467, 468, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 546, 551, 620, 621, 642, 675, 678, 681, 715, 741, 750, 790, 791, 792, 853, 928, 941, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 1022, 1028, 1059], "most": [31, 54, 90, 101, 102, 103, 112, 256, 451, 458, 468, 535, 563, 642, 933, 941, 1011, 1047, 1059, 1066], "mandatori": [31, 256], "return_dtyp": [31, 133, 256, 270, 440, 442, 571, 608, 642, 751, 928, 1059], "latter": [31, 146, 256, 750, 853, 1059], "appropri": [31, 117, 218, 256, 476, 642, 947, 1059], "pure": [31, 256, 1040, 1059], "actual": [31, 93, 105, 124, 126, 197, 256, 976, 1059], "indic": [31, 100, 101, 102, 106, 110, 112, 121, 122, 126, 158, 159, 173, 197, 202, 216, 228, 256, 281, 343, 347, 354, 387, 390, 391, 393, 394, 395, 432, 446, 449, 485, 486, 487, 488, 489, 491, 492, 493, 496, 502, 553, 576, 577, 642, 675, 676, 681, 703, 741, 744, 829, 833, 840, 872, 876, 878, 879, 880, 881, 921, 967, 978, 1030, 1036, 1059, 1067], "calcul": [31, 67, 158, 209, 229, 256, 314, 362, 363, 364, 398, 410, 423, 438, 490, 505, 510, 562, 564, 571, 583, 620, 621, 624, 632, 642, 675, 709, 717, 741, 795, 848, 849, 850, 888, 899, 912, 961, 981, 985, 1048, 1059], "individu": [31, 48, 124, 159, 218, 256, 270, 519, 642, 676, 741, 780, 995, 1059], "gridlin": [31, 256], "zoom": [31, 256], "level": [31, 35, 48, 112, 114, 115, 116, 124, 133, 152, 183, 256, 371, 642, 677, 684, 741], "freez": [31, 256], "pane": [31, 256], "top": [31, 134, 222, 256, 656, 713, 741], "index": [31, 91, 95, 98, 118, 132, 150, 158, 159, 164, 169, 170, 173, 187, 193, 195, 196, 207, 218, 220, 228, 234, 256, 264, 278, 279, 280, 282, 343, 405, 406, 414, 428, 432, 433, 485, 486, 487, 488, 489, 491, 492, 493, 496, 506, 518, 532, 553, 642, 675, 676, 681, 707, 722, 741, 758, 759, 760, 761, 762, 829, 887, 894, 895, 903, 917, 921, 922, 939, 967, 970, 982, 994, 1008, 1030, 1059], "thu": [31, 146, 256, 583, 750, 853, 1059], "altern": [31, 256, 1040, 1059], "a2": [31, 68, 70, 256], "occur": [31, 73, 256, 409, 458, 476, 642, 660, 666, 668, 694, 706, 741, 898, 933, 947, 1059], "equival": [31, 90, 92, 93, 94, 96, 104, 108, 109, 158, 169, 183, 256, 263, 267, 360, 361, 375, 378, 379, 400, 439, 457, 459, 463, 464, 466, 470, 526, 549, 559, 566, 642, 675, 741, 887, 1002, 1018, 1020, 1021, 1059], "top_row": [31, 256], "top_col": [31, 256], "base": [31, 36, 142, 149, 158, 159, 256, 318, 326, 359, 362, 363, 364, 435, 436, 473, 527, 642, 664, 671, 675, 676, 741, 744, 800, 808, 846, 848, 849, 850, 864, 924, 925, 945, 1003, 1050, 1059, 1067], "scroll": [31, 256], "region": [31, 256], "initit": [31, 256], "5th": [31, 256], "definit": [31, 122, 256, 398, 642, 888, 1059], "take": [31, 124, 130, 152, 158, 180, 186, 187, 212, 218, 256, 343, 508, 554, 591, 592, 595, 597, 606, 642, 675, 690, 712, 741, 829, 1031, 1050, 1059], "care": [31, 256, 270, 497, 642, 971, 1059], "rel": [31, 103, 104, 113, 119, 120, 256, 343, 362, 363, 364, 487, 489, 491, 493, 642, 829, 848, 849, 850, 1059], "readthedoc": [31, 256], "io": [31, 256, 662, 702, 741], "working_with_conditional_format": [31, 256], "html": [31, 91, 132, 138, 256], "similarli": [31, 93, 158, 159, 173, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 829, 833, 840], "well": [31, 101, 102, 112, 187, 256, 385, 591, 642, 868, 1059], "adjac": [31, 256], "two": [31, 57, 92, 94, 96, 103, 152, 179, 180, 187, 221, 237, 238, 256, 264, 315, 320, 433, 507, 553, 573, 574, 575, 583, 585, 620, 621, 642, 689, 690, 724, 725, 741, 796, 802, 922, 1059], "help": [31, 119, 120, 256, 668, 741], "appear": [31, 93, 119, 256, 561, 642, 1045, 1059], "working_with_sparklin": [31, 256], "inject": [31, 67, 256], "locat": [31, 146, 193, 220, 225, 256, 496, 642, 715, 741, 750, 853, 967, 970, 1030, 1059], "syntax": [31, 133, 183, 256, 512, 518, 519, 528, 706, 741, 988, 994, 995, 1004, 1059], "ensur": [31, 75, 103, 123, 124, 126, 157, 185, 195, 256, 385, 563, 642, 674, 685, 741, 744, 1040, 1047, 1059], "correctli": [31, 256], "microsoft": [31, 118, 256], "com": [31, 103, 256, 362, 363, 364, 518, 519, 520, 642, 848, 849, 850, 994, 995, 996, 1059], "u": [31, 38, 40, 55, 97, 256, 319, 320, 327, 352, 357, 538, 540, 591, 592, 593, 600, 744, 801, 802, 809, 838, 843, 1014, 1016], "offic": [31, 256], "f5ed2452": [31, 256], "2337": [31, 256], "4f71": [31, 256], "bed3": [31, 256], "c8ae6d2b276": [31, 256], "random": [31, 122, 124, 126, 160, 198, 256, 380, 476, 495, 501, 642, 862, 947, 966, 977, 1059], "date": [31, 38, 67, 101, 102, 103, 112, 117, 124, 139, 156, 158, 159, 171, 173, 228, 256, 319, 320, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 408, 485, 486, 487, 488, 489, 491, 492, 493, 538, 539, 557, 591, 592, 600, 607, 629, 642, 675, 676, 681, 741, 744, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 884, 897, 898, 937, 938, 970, 1014, 1015, 1042, 1059], "dtm": [31, 256, 320, 802], "2023": [31, 97, 118, 171, 256, 320, 591, 607, 744, 802], "num": [31, 221, 256, 385, 388, 546, 642, 868, 1059], "500": [31, 170, 227, 256, 668, 716, 741, 817, 819, 827, 834, 956, 957, 959, 1059], "val": [31, 194, 256, 297, 469, 557, 633, 642, 698, 741, 776], "10_000": [31, 256], "20_000": [31, 256], "30_000": [31, 256], "increas": [31, 67, 101, 110, 256, 311, 642, 792, 1059], "b4": [31, 256], "light": [31, 256], "twice": [31, 105, 256], "each": [31, 67, 102, 115, 119, 120, 122, 133, 156, 157, 158, 159, 171, 173, 185, 219, 225, 228, 235, 236, 238, 239, 241, 250, 256, 270, 312, 343, 347, 354, 415, 431, 437, 473, 476, 483, 487, 489, 491, 493, 508, 519, 534, 535, 571, 573, 576, 582, 591, 604, 605, 625, 633, 642, 675, 676, 681, 694, 715, 723, 725, 726, 728, 737, 741, 780, 793, 829, 833, 840, 904, 920, 945, 947, 954, 995, 1010, 1011, 1027, 1059, 1067], "titl": [31, 52, 256], "explicit": [31, 112, 122, 256, 618], "integr": [31, 256, 1067], "multi_fram": [31, 256], "wb": [31, 256], "coordin": [31, 256], "advanc": [31, 256, 433, 922, 1067], "min_color": [31, 256], "76933c": [31, 256], "mid_color": [31, 256], "c4d79b": [31, 256], "max_color": [31, 256], "ebf1d": [31, 256], "data_bar_2010": [31, 256], "bar_color": [31, 256], "9bbb59": [31, 256], "bar_negative_color_sam": [31, 256], "bar_negative_border_color_sam": [31, 256], "000": [31, 256, 1067], "white": [31, 256], "w": [31, 54, 55, 158, 197, 256, 518, 520, 568, 570, 675, 741, 744, 994, 996, 1007], "get_worksheet_by_nam": [31, 256], "fmt_titl": [31, 256], "add_format": [31, 256], "font_color": [31, 256], "4f6228": [31, 256], "font_siz": [31, 256], "12": [31, 67, 97, 123, 124, 158, 159, 173, 228, 256, 265, 309, 318, 320, 324, 328, 331, 338, 339, 340, 344, 345, 347, 354, 356, 358, 468, 475, 492, 500, 541, 578, 587, 590, 591, 593, 608, 642, 673, 675, 676, 677, 681, 684, 696, 706, 711, 741, 744, 751, 793, 800, 802, 824, 833, 840, 965, 1017, 1059, 1067], "ital": [31, 256], "bold": [31, 256], "customis": [31, 256], "trend": [31, 256], "win_loss": [31, 256], "subtl": [31, 256], "tone": [31, 256], "hidden": [31, 256], "id": [31, 74, 223, 238, 256, 483, 528, 529, 561, 563, 642, 725, 954, 1045, 1059, 1067], "q1": [31, 256], "55": [31, 69, 256], "20": [31, 124, 146, 163, 164, 180, 186, 188, 192, 193, 256, 278, 279, 280, 314, 347, 354, 380, 384, 469, 485, 486, 488, 600, 607, 630, 642, 690, 693, 741, 744, 795, 840, 1059], "35": [31, 118, 256, 314, 642, 795, 1059], "q2": [31, 256], "30": [31, 146, 158, 163, 186, 192, 193, 214, 232, 256, 278, 279, 280, 314, 320, 325, 331, 339, 345, 346, 347, 354, 358, 380, 500, 591, 607, 630, 642, 675, 693, 719, 741, 744, 793, 795, 802, 807, 825, 832, 833, 840, 1059, 1067], "15": [31, 118, 123, 133, 158, 159, 164, 256, 311, 314, 340, 347, 354, 469, 492, 587, 619, 630, 642, 675, 676, 741, 744, 792, 795, 833, 840, 1059], "60": [31, 146, 256, 348, 349, 492, 538, 642, 830, 834, 835, 1014], "q3": [31, 256], "40": [31, 146, 186, 256, 347, 354, 380, 541, 642, 693, 741, 813, 840, 1017], "80": [31, 256], "q4": [31, 256], "75": [31, 139, 256, 267, 466, 485, 486, 487, 488, 491, 492, 493, 642, 794, 864, 945, 1059, 1067], "account": [31, 97, 103, 256, 343, 362, 363, 364, 642, 829, 848, 849, 850, 1059], "flavour": [31, 256], "integer_dtyp": [31, 200, 256, 700, 741, 744], "0_": [31, 256], "just": [31, 112, 179, 256, 689, 741], "unifi": [31, 256, 744], "multi": [31, 101, 102, 256, 365, 518, 609, 613, 642, 994], "2_color_scal": [31, 256], "95b3d7": [31, 256], "ffffff": [31, 256], "standardis": [31, 256], "z": [31, 54, 74, 97, 122, 124, 144, 166, 168, 172, 179, 196, 197, 226, 256, 263, 265, 267, 297, 380, 407, 441, 466, 471, 479, 519, 538, 540, 550, 568, 570, 589, 610, 614, 619, 627, 642, 680, 689, 707, 741, 744, 776, 856, 995, 1014, 1016, 1059, 1066], "score": [31, 256], "conjunct": [31, 105, 256], "a123": [31, 256], "b345": [31, 256], "c567": [31, 256], "d789": [31, 256], "e101": [31, 256], "45": [31, 159, 256, 320, 347, 354, 492, 513, 519, 574, 575, 607, 630, 642, 676, 741, 744, 802, 833, 840, 989, 995, 1067], "85": [31, 256, 1067], "font": [31, 256], "consola": [31, 256], "standard": [31, 118, 209, 218, 256, 331, 363, 491, 505, 510, 522, 624, 642, 709, 741, 813, 849, 981, 985, 998, 1059, 1067], "stdev": [31, 256], "ipccompress": [32, 256], "arrow": [32, 47, 76, 90, 91, 103, 106, 114, 132, 170, 196, 197, 213, 215, 256, 741, 1035, 1040, 1059], "ipc": [32, 106, 107, 114, 117, 256, 653], "binari": [32, 256, 288, 290, 291, 292, 767, 770, 771], "feather": [32, 106, 114, 256, 653], "lz4": [32, 35, 47, 48, 256, 741], "zstd": [32, 35, 47, 48, 256, 741], "pretti": [33, 256], "row_ori": [33, 256], "iobas": [33, 34, 108, 109, 256, 455, 662, 696, 702, 741], "serial": [33, 34, 256, 662, 741], "represent": [33, 34, 217, 256, 297, 324, 328, 331, 332, 334, 336, 338, 341, 344, 345, 348, 355, 356, 358, 557, 642, 666, 683, 741, 776, 806, 810, 812, 813, 817, 819, 822, 824, 827, 830, 831, 834, 841, 842, 844, 1038, 1042, 1059], "orient": [33, 68, 70, 94, 96, 256, 741], "slower": [33, 94, 96, 133, 157, 185, 228, 238, 256, 270, 571, 642, 674, 725, 741, 751, 1059], "common": [33, 67, 73, 74, 256, 441, 591, 592, 642, 647, 660, 666, 668, 694, 706, 741], "write_ndjson": [33, 256], "newlin": [34, 109, 115, 256], "delimit": [34, 101, 102, 109, 112, 115, 187, 216, 256, 511, 987, 1036, 1059], "parquetcompress": [35, 256], "compression_level": [35, 48, 256, 741], "statist": [35, 48, 101, 102, 110, 116, 139, 256, 363, 364, 398, 485, 486, 487, 488, 489, 490, 491, 492, 493, 505, 642, 741, 794, 849, 850, 888, 961, 981, 1059], "row_group_s": [35, 48, 256, 741], "use_pyarrow": [35, 48, 101, 106, 110, 256, 741, 1039, 1040, 1059], "pyarrow_opt": [35, 104, 110, 113, 256], "parquet": [35, 48, 110, 111, 116, 256, 653, 741], "gzip": [35, 48, 256, 741], "lzo": [35, 48, 256, 741], "brotli": [35, 48, 256, 741], "choos": [35, 47, 48, 187, 256, 741], "good": [35, 47, 48, 170, 256, 741], "perform": [35, 47, 48, 67, 81, 91, 101, 102, 106, 110, 112, 114, 115, 116, 132, 133, 134, 157, 158, 159, 173, 190, 197, 222, 238, 256, 270, 467, 538, 539, 540, 642, 656, 675, 676, 681, 708, 713, 722, 741, 751, 1014, 1015, 1016, 1059], "fast": [35, 47, 48, 125, 127, 256, 368, 497, 642, 741, 854, 971, 1059, 1067], "decompress": [35, 47, 48, 256, 741], "backward": [35, 48, 148, 173, 256, 287, 340, 370, 642, 670, 681, 741, 826, 856, 1059], "guarante": [35, 48, 91, 101, 102, 132, 224, 256, 668, 714, 741], "deal": [35, 48, 170, 256, 346, 354, 476, 538, 593, 642, 741, 832, 840, 947, 1014, 1059], "older": [35, 48, 256, 741], "reader": [35, 48, 99, 101, 102, 106, 110, 256, 654, 741], "higher": [35, 48, 189, 248, 256, 474, 489, 617, 642, 695, 735, 741, 946, 960, 1059], "mean": [35, 48, 101, 102, 106, 110, 112, 139, 148, 157, 158, 159, 173, 187, 228, 236, 256, 343, 347, 354, 367, 370, 485, 486, 487, 488, 489, 491, 492, 493, 505, 518, 573, 578, 591, 633, 642, 670, 674, 675, 676, 681, 685, 723, 741, 794, 829, 833, 840, 852, 856, 861, 957, 981, 994, 1059], "smaller": [35, 48, 144, 256, 668, 741, 847, 1059], "disk": [35, 47, 48, 106, 256, 706, 741], "11": [35, 48, 91, 118, 124, 132, 159, 256, 265, 316, 317, 331, 339, 340, 343, 347, 354, 384, 468, 476, 492, 506, 546, 566, 580, 626, 631, 642, 660, 676, 677, 684, 694, 711, 741, 744, 751, 829, 833, 840, 955, 1059], "22": [35, 48, 123, 256, 324, 344, 347, 354, 356, 357, 485, 486, 488, 491, 492, 493, 538, 580, 642, 741, 744, 833, 840, 843, 1014, 1067], "comput": [35, 48, 73, 74, 78, 144, 157, 173, 219, 224, 236, 248, 256, 262, 272, 273, 274, 275, 276, 277, 283, 284, 285, 298, 303, 304, 306, 307, 308, 309, 310, 315, 359, 366, 398, 419, 420, 421, 423, 424, 425, 426, 435, 436, 437, 458, 467, 468, 472, 473, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 502, 503, 504, 505, 509, 555, 556, 567, 568, 569, 570, 574, 575, 576, 583, 585, 588, 595, 609, 613, 620, 621, 626, 633, 642, 674, 678, 680, 681, 714, 721, 723, 735, 741, 746, 752, 753, 754, 755, 756, 757, 763, 764, 765, 778, 786, 787, 788, 789, 790, 791, 796, 846, 847, 851, 888, 908, 909, 910, 912, 913, 914, 915, 924, 925, 926, 933, 941, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 978, 979, 980, 981, 984, 1032, 1033, 1041, 1059], "512": [35, 256, 470, 642, 941, 1059], "implement": [35, 91, 132, 133, 238, 256, 270, 397, 471, 550, 571, 642, 725, 751, 969, 970, 1059], "v": [35, 54, 55, 144, 256, 496, 642, 793, 967, 1059], "At": [35, 256], "moment": [35, 138, 256, 398, 505, 642, 888, 981, 1059], "pyarrow": [35, 90, 91, 95, 101, 103, 104, 106, 110, 113, 117, 118, 132, 171, 213, 218, 219, 256, 654, 1035, 1039, 1040, 1041, 1059], "write_t": [35, 256], "partition_col": [35, 103, 256], "write_to_dataset": [35, 256], "similar": [35, 128, 152, 173, 256, 350, 353, 467, 483, 633, 642, 681, 741, 836, 839, 954, 1059], "spark": [35, 256], "partit": [35, 103, 104, 110, 113, 116, 117, 171, 185, 256], "we": [35, 101, 102, 105, 112, 158, 159, 173, 228, 256, 270, 343, 347, 354, 411, 440, 485, 486, 487, 488, 489, 491, 492, 493, 520, 527, 607, 633, 642, 675, 676, 681, 685, 741, 751, 829, 833, 840, 864, 900, 996, 1003, 1059], "use_pyarrow_write_to_dataset": [35, 256], "first": [35, 67, 101, 102, 105, 112, 115, 123, 133, 156, 158, 161, 173, 175, 182, 186, 187, 211, 216, 217, 223, 224, 228, 241, 256, 280, 282, 311, 340, 343, 347, 381, 388, 402, 411, 414, 415, 433, 442, 469, 496, 508, 518, 521, 522, 528, 529, 579, 586, 591, 598, 602, 633, 642, 660, 675, 677, 681, 684, 693, 714, 721, 728, 741, 744, 760, 792, 794, 826, 829, 833, 863, 873, 890, 900, 903, 904, 922, 928, 967, 994, 996, 997, 998, 1004, 1005, 1029, 1038, 1059, 1067], "watermark": [35, 256], "partitioned_object": [35, 256], "calendar": [37, 38, 158, 159, 173, 228, 256, 331, 343, 347, 354, 358, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 813, 829, 833, 840, 844], "time_unit": [38, 40, 97, 319, 320, 327, 352, 357, 538, 540, 591, 592, 593, 600, 744, 801, 802, 809, 838, 843, 1014, 1016], "time_zon": [38, 97, 321, 346, 354, 540, 591, 592, 593, 744, 800, 803, 808, 832, 840, 1016], "timezon": [38, 744], "m": [38, 40, 55, 172, 256, 318, 319, 320, 326, 327, 350, 352, 353, 357, 518, 538, 539, 540, 543, 591, 592, 593, 600, 680, 741, 744, 800, 801, 802, 808, 809, 836, 838, 839, 843, 994, 1014, 1015, 1016, 1019], "zone": [38, 318, 321, 346, 538, 540, 591, 592, 593, 744, 800, 803, 832, 1014, 1016], "zoneinfo": [38, 744], "run": [38, 47, 48, 73, 125, 127, 133, 157, 174, 187, 201, 224, 233, 238, 256, 270, 311, 411, 482, 483, 622, 642, 660, 666, 668, 674, 685, 689, 694, 701, 706, 714, 720, 741, 744, 751, 792, 900, 953, 954, 1059, 1066, 1067], "available_timezon": [38, 744], "check": [38, 101, 102, 112, 119, 120, 153, 158, 159, 167, 169, 172, 256, 266, 268, 288, 291, 292, 385, 389, 408, 512, 516, 536, 642, 675, 676, 680, 685, 741, 748, 749, 767, 770, 771, 869, 871, 874, 875, 877, 882, 883, 884, 886, 887, 897, 968, 988, 992, 1012, 1059], "128": [39, 69, 941, 1059], "bit": [39, 41, 42, 43, 44, 45, 46, 61, 62, 63, 64, 478, 512, 642, 949, 988, 1059], "neg": [39, 158, 159, 161, 175, 204, 205, 207, 211, 256, 427, 428, 469, 498, 499, 506, 532, 642, 675, 676, 704, 705, 707, 722, 741, 863, 890, 916, 917, 973, 974, 982, 1008, 1029, 1059], "scale": [39, 144, 256, 469, 541, 642, 847, 1017, 1059], "experiment": [39, 117, 200, 226, 227, 232, 256, 311, 347, 485, 486, 487, 488, 489, 491, 492, 493, 642, 700, 716, 719, 741, 777, 792, 833, 864, 945, 1059], "progress": 39, "expect": [39, 82, 84, 89, 270, 571, 607, 642, 683, 685, 741], "32": [41, 44, 62, 69, 159, 169, 256, 459, 500, 642, 676, 741, 796, 830, 941, 960, 1059], "sign": [43, 44, 45, 46, 343, 478, 546, 642, 829, 877, 949, 1022, 1059], "maintain_ord": [47, 48, 134, 157, 185, 187, 222, 224, 228, 237, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 264, 270, 286, 434, 553, 560, 584, 642, 656, 660, 666, 668, 674, 694, 706, 708, 713, 714, 724, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 741, 766, 923, 1044, 1059], "type_coercion": [47, 48, 73, 660, 666, 668, 694, 706, 741], "predicate_pushdown": [47, 48, 73, 660, 666, 668, 685, 694, 706, 741], "projection_pushdown": [47, 48, 73, 660, 666, 668, 685, 694, 706, 741], "simplify_express": [47, 48, 73, 660, 666, 668, 694, 706, 741], "no_optim": [47, 48, 73, 660, 668, 685, 694, 741], "slice_pushdown": [47, 48, 73, 660, 666, 668, 685, 694, 706, 741], "persist": [47, 48, 57, 741], "larger": [47, 48, 583, 741], "ram": [47, 48, 741], "maintain": [47, 48, 134, 222, 256, 286, 434, 496, 560, 642, 656, 708, 713, 741, 766, 923, 967, 1044, 1059], "slightli": [47, 48, 741], "faster": [47, 48, 146, 218, 226, 256, 270, 484, 526, 561, 642, 741, 750, 751, 853, 955, 1002, 1059], "coercion": [47, 48, 73, 479, 642, 660, 666, 668, 694, 706, 741], "optim": [47, 48, 73, 110, 112, 114, 115, 116, 170, 174, 186, 190, 196, 224, 256, 660, 666, 668, 685, 694, 706, 714, 722, 725, 741, 778, 1059], "predic": [47, 48, 73, 112, 114, 115, 116, 117, 149, 169, 195, 256, 371, 565, 598, 642, 660, 666, 668, 671, 685, 694, 697, 706, 722, 741, 857, 969, 970, 1059], "pushdown": [47, 48, 73, 660, 666, 668, 685, 694, 697, 706, 722, 741, 969, 970, 1059], "project": [47, 48, 73, 112, 114, 115, 116, 270, 507, 508, 642, 660, 666, 668, 685, 694, 697, 702, 706, 741], "turn": [47, 48, 73, 101, 102, 112, 544, 563, 642, 660, 666, 668, 685, 694, 741, 1020], "off": [47, 48, 73, 101, 102, 112, 563, 642, 660, 666, 668, 685, 694, 741], "certain": [47, 48, 80, 104, 113, 164, 228, 256, 580, 660, 694, 741, 1059], "slice": [47, 48, 68, 73, 144, 161, 171, 211, 256, 415, 431, 484, 485, 486, 487, 488, 489, 491, 492, 493, 642, 660, 666, 668, 685, 694, 706, 741, 847, 863, 904, 920, 955, 956, 957, 958, 959, 960, 962, 963, 964, 1029, 1059], "lf": [47, 48, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 697, 698, 699, 700, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 718, 719, 721, 722, 741, 1066, 1067], "scan_csv": [47, 48, 101, 102, 741], "my_larger_than_ram_fil": [47, 48, 741], "data_pagesize_limit": [48, 741], "reduc": [48, 101, 102, 110, 112, 114, 115, 116, 243, 244, 246, 249, 500, 598, 642, 730, 731, 733, 736, 741, 930, 944, 975, 1028, 1059], "pressur": [48, 110, 115, 116, 500, 642, 741, 975, 1059], "improv": [48, 106, 114, 741], "speed": [48, 270, 642, 741], "minimum": [48, 122, 123, 124, 126, 152, 181, 256, 362, 363, 364, 456, 462, 476, 613, 614, 642, 691, 741, 782, 821, 848, 849, 850, 938, 943, 947, 1059, 1067], "limit": [48, 103, 112, 148, 256, 287, 300, 301, 302, 370, 376, 642, 670, 677, 741, 782, 783, 784, 856, 1059], "page": [48, 106, 110, 114, 116, 256, 642, 653, 741, 1059], "arrai": [49, 90, 94, 101, 102, 110, 144, 213, 218, 219, 256, 283, 284, 285, 286, 300, 301, 302, 306, 307, 308, 309, 310, 407, 418, 419, 420, 421, 422, 429, 430, 436, 485, 486, 488, 492, 497, 595, 642, 741, 763, 764, 765, 766, 782, 783, 784, 788, 789, 790, 791, 796, 847, 896, 907, 908, 909, 910, 911, 918, 919, 925, 926, 956, 957, 959, 962, 963, 964, 971, 976, 1035, 1040, 1041, 1049, 1059], "integer_list": 49, "float_list": 49, "wrap": [51, 97, 385, 642], "arbitrari": [51, 124, 744], "python": [51, 101, 102, 118, 133, 170, 196, 197, 215, 238, 256, 270, 320, 440, 520, 571, 591, 592, 630, 631, 633, 642, 647, 725, 751, 802, 814, 815, 816, 821, 996, 1039, 1059], "queri": [52, 54, 73, 103, 106, 112, 114, 115, 116, 146, 174, 186, 256, 270, 440, 442, 522, 642, 660, 666, 668, 677, 684, 694, 706, 722, 725, 741, 750, 751, 853, 998, 1059, 1066], "eager": [52, 53, 54, 55, 56, 57, 158, 226, 256, 312, 319, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 352, 354, 355, 356, 357, 358, 473, 485, 486, 488, 491, 492, 493, 573, 577, 591, 592, 600, 604, 605, 616, 619, 625, 630, 631, 634, 641, 642, 675, 741, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 840, 841, 842, 843, 844, 1066], "pars": [52, 101, 102, 105, 109, 112, 114, 115, 134, 157, 200, 201, 208, 222, 232, 233, 236, 256, 385, 442, 467, 508, 521, 527, 538, 540, 541, 567, 568, 569, 570, 576, 579, 581, 582, 588, 589, 600, 609, 610, 613, 614, 622, 623, 625, 626, 627, 633, 642, 656, 674, 700, 701, 708, 713, 719, 720, 723, 741, 868, 997, 1003, 1014, 1016, 1017, 1059], "against": [52, 411, 741, 900, 1066, 1067], "eagerli": [52, 433], "unset": [52, 123, 346, 433, 832], "init": [52, 130], "eager_execut": [52, 1066], "itself": [52, 122, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 620, 621, 642, 683, 741, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 1059, 1066], "alwai": [52, 101, 123, 133, 157, 238, 256, 450, 538, 591, 633, 685, 741, 750, 751, 1014, 1059, 1066, 1067], "impact": [52, 158, 256, 675, 741, 1066], "declar": [52, 90, 92, 93, 94, 96, 108, 109, 256, 741], "godfath": 52, "1972": 52, "6_000_000": 52, "134_821_952": 52, "dark": 52, "knight": 52, "2008": 52, "185_000_000": 52, "533_316_061": 52, "schindler": 52, "1993": 52, "22_000_000": 52, "96_067_179": 52, "pulp": 52, "fiction": 52, "1994": 52, "8_000_000": 52, "107_930_000": 52, "shawshank": 52, "redempt": 52, "25_000_000": 52, "28_341_469": 52, "release_year": 52, "budget": 52, "gross": 52, "imdb_scor": 52, "ctx": [52, 53, 54, 55, 56, 57], "film": 52, "1990": 52, "BY": [52, 54], "desc": [52, 54], "AS": [52, 623, 1066], "decad": 52, "total_gross": 52, "n_film": 52, "2000": [52, 330, 332, 339, 340, 343, 744, 812, 825, 826, 829], "533316061": 52, "232338648": 52, "1970": [52, 117], "134821952": 52, "register_glob": [53, 55, 57, 1066], "register_mani": [53, 54, 57], "unregist": [53, 54, 55, 1066], "frame_data": [53, 56], "execut": [53, 54, 56, 74, 174, 256, 294, 411, 642, 657, 685, 694, 741, 900, 1066], "collect": [53, 54, 57, 70, 73, 112, 113, 117, 124, 126, 140, 142, 174, 213, 224, 225, 256, 270, 294, 365, 389, 581, 596, 600, 625, 642, 656, 662, 663, 664, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 700, 702, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 719, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 741, 744, 875, 1059, 1066, 1067], "global": [54, 58, 75, 124, 129, 218, 256, 442, 642, 1066], "scope": [54, 57, 130, 652, 744, 1066], "automat": [54, 57, 90, 92, 93, 94, 96, 97, 101, 102, 103, 108, 109, 112, 124, 126, 128, 200, 232, 256, 294, 442, 525, 531, 537, 642, 700, 719, 741, 928, 1001, 1007, 1013, 1059, 1066], "map": [54, 55, 92, 93, 101, 102, 106, 107, 110, 111, 112, 114, 133, 143, 151, 170, 191, 195, 196, 197, 214, 256, 347, 354, 441, 442, 467, 483, 563, 571, 642, 665, 697, 741, 794, 833, 840, 928, 954, 1059, 1066], "recent": [54, 468, 642, 941, 1059, 1066], "df1": [54, 56, 57, 58, 67, 74, 75, 119, 146, 153, 180, 219, 230, 256, 690, 741], "x": [54, 55, 67, 74, 97, 101, 102, 103, 112, 122, 124, 144, 163, 166, 168, 172, 179, 187, 196, 197, 226, 256, 263, 265, 266, 267, 268, 270, 312, 313, 360, 361, 375, 378, 379, 380, 400, 407, 416, 437, 439, 440, 441, 457, 459, 463, 464, 466, 470, 471, 473, 479, 483, 502, 505, 534, 549, 550, 557, 559, 566, 568, 570, 571, 574, 575, 586, 587, 589, 598, 607, 608, 610, 614, 618, 627, 642, 680, 685, 689, 707, 741, 744, 751, 856, 886, 978, 981, 1010, 1042, 1059, 1066], "df2": [54, 56, 57, 58, 67, 74, 75, 119, 146, 153, 219, 230, 256], "t": [54, 55, 74, 105, 112, 133, 158, 186, 224, 226, 256, 270, 311, 318, 326, 346, 359, 362, 363, 364, 411, 467, 469, 473, 518, 525, 538, 540, 571, 633, 642, 675, 693, 714, 741, 744, 751, 792, 832, 846, 848, 849, 850, 900, 945, 968, 994, 1001, 1007, 1014, 1016, 1040, 1049, 1059], "join": [54, 58, 67, 73, 74, 75, 173, 227, 256, 384, 467, 642, 660, 666, 668, 681, 694, 706, 716, 721, 741], "named_fram": [55, 1066], "lf1": [55, 57], "o": [55, 106, 114, 293, 311, 517, 558, 642, 772, 792, 993, 1013, 1043, 1059], "lf2": [55, 57, 741], "p": [55, 69, 186, 256, 469, 625, 642, 693, 741], "q": [55, 197, 256, 312, 473, 625, 642], "r": [55, 469, 513, 517, 518, 519, 520, 528, 642, 744, 989, 993, 994, 995, 996, 1004], "lf3": [55, 741], "lf4": [55, 741], "either": [55, 124, 159, 169, 174, 177, 185, 195, 210, 218, 256, 473, 538, 567, 576, 625, 642, 676, 683, 741, 744, 945, 1014, 1059], "tbl1": [55, 57], "tbl2": [55, 57], "tbl3": 55, "tbl4": 55, "statement": [56, 633], "hello_world": 56, "baz": [56, 164, 165, 187, 225, 256, 520, 533, 535, 679, 715, 741, 744, 996, 1011], "hello_data": 56, "foo_bar": [56, 607], "registr": [57, 653], "lifetim": [57, 130, 652], "context": [57, 58, 128, 183, 239, 256, 264, 270, 294, 305, 371, 411, 450, 507, 508, 563, 571, 584, 597, 600, 606, 619, 622, 641, 642, 652, 653, 721, 726, 741, 900, 1066], "manag": [57, 58, 652, 653, 1066], "often": [57, 130, 158, 159, 256, 409, 479, 642, 675, 676, 741, 898], "want": [57, 93, 133, 146, 183, 256, 270, 300, 301, 302, 354, 371, 440, 442, 483, 485, 486, 487, 488, 489, 491, 492, 493, 586, 598, 616, 619, 634, 642, 660, 677, 684, 741, 744, 750, 751, 782, 783, 784, 840, 853, 954, 1040, 1059], "df0": [57, 180, 256, 690, 741], "exit": [57, 58, 130, 1066], "construct": [57, 90, 92, 93, 94, 95, 96, 256, 377, 442, 616, 619, 634, 642, 662, 673, 696, 741, 1059], "through": [57, 744, 1059], "tbl0": 57, "remain": [57, 101, 102, 112, 144, 256, 534, 535, 573, 685, 741, 847, 1010, 1011, 1059], "text": [57, 526, 528, 529, 623, 1002, 1067], "misc": 57, "testing1234": 57, "test1": 57, "test2": 57, "test3": 57, "temporarili": [58, 128, 130, 158, 159, 256, 675, 676, 741], "cach": [58, 73, 75, 106, 112, 114, 116, 119, 120, 129, 442, 485, 486, 487, 488, 489, 491, 492, 493, 538, 539, 540, 543, 642, 652, 660, 666, 668, 694, 706, 741, 1014, 1015, 1016, 1019], "categori": [58, 75, 216, 256, 296, 297, 312, 473, 642, 775, 776, 793, 864, 945, 1059], "until": [58, 174, 256, 591], "finish": [58, 78, 146, 256, 750, 853, 1059], "invalid": [58, 101, 102, 112, 521, 522, 527, 559, 591, 592, 642, 997, 998, 1003], "outermost": 58, "color": [58, 75, 238, 288, 290, 291, 292, 725], "red": [58, 75, 238, 725], "green": [58, 75, 238, 725], "blue": [58, 75, 288, 290, 291, 292], "orang": [58, 75, 137, 239, 240, 242, 243, 244, 246, 248, 249, 256, 726, 727, 729, 730, 731, 733, 735, 736], "uint8": [58, 75, 121, 123, 217, 218, 226, 256, 309, 310, 442, 551, 566, 642, 744, 790, 791, 1028, 1059, 1067], "yellow": [58, 75, 288, 290, 291, 292], "black": [58, 75, 133, 256, 288, 290, 291, 292], "succe": [58, 101, 102, 112], "df_join": [58, 75], "cat": [58, 75, 217, 256, 312, 473, 512, 542, 545, 557, 582, 638, 642, 744, 793, 864, 945, 988, 1018, 1021, 1055, 1059], "u8": [58, 75, 216, 217, 226, 256, 442, 566, 642, 744, 1036, 1059, 1067], "composit": [59, 123, 1067], "schemadict": [59, 90, 92, 93, 94, 95, 96, 112, 199, 256, 625, 685, 699, 725, 741], "struct_seri": [59, 725], "dai": [60, 158, 159, 171, 173, 228, 256, 327, 331, 338, 339, 340, 343, 344, 345, 347, 352, 354, 355, 356, 358, 485, 486, 487, 488, 489, 491, 492, 493, 590, 591, 593, 594, 642, 675, 676, 681, 741, 744, 825, 826, 829, 830, 833, 840, 842], "unsign": [61, 62, 63, 64, 478, 642, 877, 949, 1059], "could": [65, 78, 158, 256, 295, 586, 598, 642, 664, 675, 741, 773, 1059], "static": [65, 725], "utf": 66, "frametyp": [67, 1066], "joinstrategi": [67, 172, 256, 680, 741], "outer": [67, 74, 172, 256, 680, 741], "descend": [67, 134, 202, 208, 222, 256, 280, 429, 476, 497, 507, 508, 576, 642, 656, 703, 708, 713, 741, 760, 883, 918, 947, 971, 983, 1059], "fill": [67, 74, 135, 147, 148, 205, 226, 256, 287, 307, 310, 369, 370, 376, 384, 485, 486, 488, 492, 499, 524, 530, 546, 599, 616, 619, 634, 642, 669, 670, 705, 721, 741, 855, 856, 867, 939, 956, 957, 959, 962, 963, 964, 974, 1000, 1006, 1022, 1059], "sort": [67, 68, 119, 123, 134, 158, 159, 173, 180, 186, 187, 202, 222, 228, 241, 250, 256, 280, 297, 371, 467, 497, 508, 563, 565, 576, 642, 656, 666, 675, 676, 681, 690, 693, 694, 703, 706, 713, 728, 737, 741, 744, 760, 776, 883, 971, 1044, 1047, 1059, 1067], "origin": [67, 101, 102, 224, 256, 346, 397, 442, 467, 478, 479, 480, 513, 518, 519, 522, 524, 530, 546, 574, 575, 642, 714, 741, 793, 832, 928, 945, 951, 989, 994, 995, 998, 1000, 1006, 1022, 1059], "In": [67, 104, 113, 116, 124, 126, 130, 133, 144, 146, 158, 159, 183, 218, 256, 270, 591, 642, 675, 676, 741, 750, 847, 853, 948, 1059], "duplic": [67, 79, 166, 172, 173, 224, 256, 265, 386, 397, 473, 642, 680, 681, 714, 741, 870, 945, 1059], "behaviour": [67, 74, 142, 256, 512, 518, 519, 528, 559, 642, 664, 741, 988, 994, 995, 1004], "strategi": [67, 74, 101, 121, 122, 123, 124, 126, 148, 158, 172, 173, 182, 256, 270, 370, 433, 642, 670, 675, 680, 681, 741, 856, 922, 1059], "suitabl": [67, 74, 122, 133, 256, 270, 496, 642, 751, 967, 1059, 1067], "get": [67, 98, 107, 111, 117, 128, 134, 137, 143, 151, 154, 155, 158, 159, 161, 162, 166, 168, 169, 175, 182, 195, 199, 203, 207, 211, 222, 231, 241, 250, 256, 264, 278, 279, 280, 282, 286, 296, 306, 307, 308, 309, 310, 327, 343, 372, 381, 386, 388, 396, 399, 402, 413, 417, 418, 434, 443, 444, 445, 450, 452, 456, 461, 462, 474, 482, 506, 510, 523, 526, 551, 552, 560, 564, 591, 597, 602, 606, 609, 610, 611, 612, 613, 614, 624, 628, 632, 642, 656, 661, 665, 672, 675, 676, 677, 682, 684, 699, 707, 711, 713, 718, 728, 737, 741, 758, 759, 760, 761, 762, 766, 775, 780, 788, 789, 790, 791, 809, 829, 860, 863, 868, 870, 873, 885, 890, 902, 906, 907, 923, 929, 931, 932, 934, 937, 938, 942, 943, 946, 953, 982, 985, 999, 1002, 1029, 1035, 1036, 1044, 1048, 1049, 1059], "speedup": [67, 133, 170, 256, 270, 642, 751, 1059], "receiv": [67, 112, 133, 186, 256, 469, 642, 693, 741, 1067], "now": [67, 159, 256, 294, 473, 538, 540, 642, 676, 741, 1014, 1016], "One": [67, 139, 183, 187, 256, 267, 466, 623, 642, 744, 794, 1059], "whose": [67, 173, 187, 256, 365, 596, 642, 681, 741], "uniqu": [67, 121, 122, 123, 126, 168, 172, 183, 197, 247, 256, 271, 282, 312, 388, 396, 460, 473, 538, 539, 540, 543, 561, 563, 572, 615, 642, 680, 734, 741, 762, 793, 794, 873, 885, 935, 945, 1014, 1015, 1016, 1019, 1045, 1047, 1059], "post": 67, "constrain": [67, 142, 256, 664, 741], "newli": 67, "boolean": [67, 134, 149, 152, 174, 208, 222, 256, 266, 267, 268, 288, 291, 292, 330, 371, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 403, 404, 408, 466, 508, 521, 565, 566, 576, 577, 625, 633, 642, 656, 659, 671, 683, 708, 713, 741, 744, 748, 749, 761, 767, 769, 812, 857, 868, 869, 870, 872, 873, 875, 876, 878, 879, 880, 881, 885, 892, 893, 897, 942, 943, 969, 988, 1040, 1050, 1059], "know": [67, 433, 526, 1002, 1040, 1049, 1059], "2022": [67, 139, 156, 158, 159, 173, 228, 256, 320, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 538, 591, 592, 594, 600, 642, 675, 676, 681, 741, 744, 802, 813, 829, 833, 840, 1014], "y": [67, 74, 97, 122, 124, 144, 166, 168, 172, 179, 187, 196, 197, 226, 256, 263, 265, 266, 267, 268, 350, 353, 360, 361, 378, 379, 400, 407, 416, 439, 441, 463, 464, 466, 471, 479, 483, 538, 539, 540, 550, 559, 566, 568, 570, 574, 575, 589, 607, 610, 614, 627, 642, 680, 689, 707, 741, 744, 836, 839, 1014, 1015, 1016], "df3": [67, 256], "set_tbl_format": 67, "09": [67, 124, 159, 256, 320, 331, 339, 340, 541, 631, 676, 741, 806, 1017], "01": [67, 124, 139, 156, 158, 159, 228, 256, 318, 319, 320, 321, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 357, 358, 485, 486, 488, 491, 492, 493, 538, 539, 540, 543, 591, 592, 594, 642, 675, 676, 741, 744, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 1014, 1015, 1016, 1019], "02": [67, 156, 158, 159, 173, 228, 256, 319, 320, 327, 328, 329, 336, 337, 338, 339, 340, 343, 346, 347, 348, 349, 352, 354, 355, 357, 485, 486, 487, 488, 489, 491, 492, 493, 494, 538, 539, 540, 543, 591, 592, 594, 642, 675, 676, 681, 741, 744, 801, 802, 804, 805, 809, 810, 811, 814, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 838, 840, 841, 842, 843, 922, 1014, 1015, 1016, 1019], "03": [67, 97, 158, 159, 228, 256, 319, 320, 321, 325, 327, 329, 337, 338, 339, 340, 346, 347, 348, 349, 350, 352, 353, 354, 355, 357, 485, 486, 488, 491, 492, 493, 539, 543, 591, 592, 642, 675, 676, 741, 801, 802, 803, 806, 807, 809, 810, 811, 814, 815, 816, 817, 819, 821, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 836, 838, 839, 841, 842, 843, 1015, 1019], "af1": 67, "af2": 67, "af3": 67, "keep": [67, 101, 102, 112, 224, 227, 228, 256, 397, 442, 579, 642, 714, 716, 741, 928, 1059], "easili": [67, 200, 232, 236, 256, 580, 625, 700, 719, 723, 741], "dot": [67, 642, 706, 741, 1059], "product": [67, 138, 256, 309, 315, 571, 642, 790, 796, 1059], "fill_nul": [67, 147, 256, 642, 669, 721, 741, 1059], "sum_horizont": [67, 626], "167": 67, "47": 67, "callabl": [68, 69, 70, 71, 112, 133, 152, 186, 238, 256, 270, 433, 440, 441, 469, 484, 571, 586, 587, 598, 608, 618, 642, 685, 693, 725, 741, 751, 922, 955, 1059], "decor": [68, 69, 70, 71, 124, 126, 133, 256, 270, 642, 652, 653, 751, 1059], "under": [68, 69, 70, 71, 635, 636, 638, 643, 644, 648, 649, 650, 1051, 1053, 1055, 1060, 1063, 1064, 1065], "access": [68, 69, 70, 71, 170, 195, 196, 256, 442, 520, 642, 721, 741, 996, 1067], "by_first_letter_of_column_nam": 68, "f": [68, 102, 139, 156, 171, 213, 223, 226, 256, 263, 270, 433, 500, 517, 538, 540, 571, 581, 608, 642, 922, 993, 1014, 1016], "fromkei": [68, 70], "by_first_letter_of_column_valu": 68, "starts_with": [68, 288, 291, 512, 516, 744, 992], "to_seri": [68, 154, 256, 538, 577, 619, 1014], "xx": [68, 70, 123, 126, 744], "xy": [68, 70], "yy": [68, 70, 123, 126, 744], "yz": [68, 70], "b1": [68, 70], "b2": [68, 70], "pow_n": 69, "powersofn": 69, "next": [69, 158, 159, 173, 228, 256, 287, 343, 347, 354, 476, 485, 486, 487, 488, 489, 491, 492, 493, 591, 642, 675, 676, 681, 741, 829, 833, 840, 947, 1059], "ceil": [69, 642, 1059], "previou": [69, 130, 468, 471, 548, 550, 642, 750, 941, 1059], "floor": [69, 642, 1059], "nearest": [69, 173, 189, 248, 256, 299, 374, 384, 474, 489, 617, 642, 681, 695, 735, 741, 779, 859, 867, 946, 960, 1059], "24": [69, 118, 133, 144, 158, 159, 173, 228, 256, 309, 311, 324, 329, 343, 344, 347, 354, 356, 459, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 792, 811, 829, 833, 840, 887, 1059], "001": [69, 332, 333, 335, 342, 594, 818, 820, 828], "next_pow2": 69, "prev_pow2": 69, "nearest_pow2": 69, "split_by_column_dtyp": 70, "collect_al": 70, "31": [71, 124, 320, 324, 325, 338, 339, 343, 355, 538, 590, 591, 593, 600, 607, 744, 800, 802, 806, 807, 825, 829, 1014, 1067], "42": [71, 159, 160, 180, 256, 676, 690, 741, 862, 1059], "961": 71, "1764": 71, "4160": 71, "build": [72, 91, 744, 1067], "wa": 72, "compil": [72, 405, 406, 894, 895], "gate": 72, "info": [72, 104, 113, 118], "otherwis": [72, 123, 128, 133, 180, 197, 200, 238, 256, 270, 289, 300, 301, 302, 346, 354, 362, 363, 364, 433, 469, 478, 512, 514, 567, 569, 571, 588, 609, 613, 626, 633, 642, 690, 700, 725, 741, 751, 768, 782, 783, 784, 832, 840, 848, 849, 850, 922, 949, 969, 970, 988, 990, 1059], "depend": [72, 118, 270, 405, 406, 450, 473, 476, 571, 597, 600, 606, 642, 894, 895, 945, 947, 1059, 1067], "host": [72, 101, 106, 110, 114, 116], "git": 72, "lazy_fram": 73, "comm_subplan_elim": [73, 660, 666, 668, 694, 706, 741], "comm_subexpr_elim": [73, 294, 642, 660, 666, 668, 694, 706, 741], "graph": [73, 174, 256, 678, 721, 741], "parallel": [73, 74, 99, 103, 110, 116, 158, 173, 174, 186, 201, 233, 256, 311, 411, 633, 642, 653, 675, 680, 681, 701, 720, 725, 741, 792, 900, 1059], "threadpool": [73, 128], "Will": [73, 660, 666, 668, 694, 706, 741, 1059], "try": [73, 85, 87, 101, 102, 105, 106, 110, 112, 114, 116, 660, 666, 668, 694, 706, 741], "branch": [73, 660, 666, 668, 694, 706, 741], "subplan": [73, 660, 666, 668, 694, 706, 741], "union": [73, 74, 426, 660, 666, 668, 694, 706, 741, 744, 915], "subexpress": [73, 660, 666, 668, 694, 706, 741], "reus": [73, 660, 666, 668, 694, 706, 741], "part": [73, 90, 124, 519, 534, 535, 660, 666, 668, 694, 706, 721, 741, 995, 1010, 1011], "fashion": [73, 172, 256, 660, 666, 668, 694, 706, 741], "item": [74, 102, 195, 198, 256, 367, 408, 414, 416, 495, 535, 642, 852, 897, 903, 905, 966, 1011, 1059], "iter": [74, 125, 127, 134, 157, 158, 159, 170, 171, 195, 196, 197, 200, 201, 202, 208, 222, 223, 232, 233, 235, 236, 256, 311, 467, 508, 567, 568, 569, 570, 576, 579, 580, 581, 582, 588, 589, 609, 610, 613, 614, 622, 625, 626, 627, 642, 656, 674, 675, 676, 700, 701, 703, 708, 713, 719, 720, 723, 741, 792, 1059, 1067], "polarstyp": 74, "concatmethod": 74, "vertic": [74, 146, 226, 230, 256, 511, 987], "rechunk": [74, 90, 95, 101, 102, 106, 110, 112, 114, 115, 116, 146, 256, 642, 750, 780, 853, 934, 1059], "combin": [74, 85, 87, 158, 159, 160, 173, 228, 256, 267, 281, 343, 354, 466, 525, 531, 537, 591, 642, 675, 676, 681, 706, 741, 829, 833, 840, 1001, 1007, 1013], "concaten": [74, 152, 186, 256, 469, 581, 582, 642, 693, 741, 780, 934, 1059], "diagon": [74, 223, 256], "vstack": [74, 146, 256], "vertical_relax": 74, "coerc": [74, 479, 642], "equal": [74, 75, 101, 102, 112, 119, 120, 134, 153, 158, 173, 180, 222, 256, 294, 360, 361, 378, 400, 433, 464, 479, 484, 485, 486, 487, 488, 489, 491, 492, 493, 523, 524, 530, 546, 620, 621, 642, 656, 675, 681, 690, 708, 713, 741, 922, 955, 956, 957, 958, 959, 960, 962, 963, 964, 968, 999, 1000, 1006, 1022, 1059, 1067], "supertyp": [74, 148, 256, 269, 642, 670, 741], "find": [74, 150, 256, 496, 642, 967, 1059], "miss": [74, 101, 102, 112, 147, 256, 287, 362, 363, 364, 376, 391, 393, 642, 669, 741, 848, 849, 850, 1049, 1059], "stack": [74, 163, 230, 256], "don": [74, 133, 224, 226, 256, 270, 311, 411, 467, 473, 571, 642, 714, 741, 744, 751, 792, 900, 945, 968, 1049, 1059], "auto": [74, 90, 92, 93, 94, 96, 108, 109, 110, 116, 223, 256, 741, 1067], "logic": [74, 133, 238, 256, 270, 557, 571, 642, 662, 673, 680, 696, 702, 725, 741, 751, 1042, 1059], "align_fram": 74, "pattern": [74, 101, 102, 112, 114, 115, 116, 170, 256, 448, 512, 513, 518, 519, 520, 528, 529, 725, 744, 969, 970, 988, 989, 994, 995, 996, 1004, 1005, 1059], "collis": 74, "need": [74, 97, 101, 102, 103, 105, 119, 120, 158, 159, 197, 206, 218, 256, 433, 442, 500, 523, 541, 616, 619, 634, 642, 675, 676, 741, 975, 999, 1017, 1059], "sure": [74, 90, 95, 101, 102, 106, 110, 158, 159, 190, 256, 675, 676, 741], "contigu": [74, 90, 95, 101, 102, 106, 110, 112, 114, 115, 116, 190, 256], "relev": 74, "df_h1": 74, "l1": 74, "l2": 74, "df_h2": 74, "r1": 74, "r2": 74, "r3": 74, "df_d1": 74, "df_d2": 74, "df_a1": 74, "df_a2": 74, "df_a3": 74, "disabl": [75, 129, 170, 256], "encount": [76, 158, 256, 461, 462, 521, 522, 583, 586, 598, 642, 675, 741, 937, 938, 997, 998, 1059], "least": [82, 124, 468, 563, 642, 941, 1047, 1059], "unexpect": [83, 256, 270, 440, 642, 751, 1059], "caus": [83, 91, 101, 102, 112, 132, 146, 256, 750, 853, 1059], "panic": 83, "mismatch": [85, 109], "incompat": 87, "pa": [90, 117], "chunkedarrai": [90, 182, 256, 796, 1059], "recordbatch": [90, 171, 256], "schemadefinit": [90, 92, 93, 94, 96, 108, 109, 256, 741], "schema_overrid": [90, 92, 93, 94, 95, 96, 108, 109, 171, 218, 256, 286, 741, 744, 766], "copi": [90, 91, 132, 135, 136, 171, 213, 218, 219, 232, 256, 368, 546, 642, 658, 659, 719, 741, 781, 785, 798, 854, 1022, 1035, 1040, 1041, 1059], "closest": 90, "pair": [90, 92, 93, 94, 96, 108, 109, 123, 191, 256, 697, 741, 1067], "sever": [90, 92, 93, 94, 96, 108, 109, 256, 741, 1067], "wai": [90, 92, 93, 94, 96, 108, 109, 157, 171, 186, 208, 236, 256, 467, 469, 508, 518, 580, 642, 674, 693, 708, 723, 725, 741, 994], "form": [90, 92, 93, 94, 96, 108, 109, 170, 196, 226, 256, 468, 642, 741, 941, 1059], "them": [90, 92, 93, 94, 96, 108, 109, 112, 145, 146, 158, 159, 173, 180, 228, 256, 385, 416, 461, 462, 467, 581, 642, 667, 675, 676, 681, 690, 741, 744, 750, 853, 905, 937, 938, 1059], "dimens": [90, 92, 94, 96, 108, 109, 256, 480, 642, 741, 951, 1059], "allow_copi": [91, 132], "interchang": [91, 132], "__dataframe__": 91, "convers": [91, 132, 170, 171, 196, 197, 215, 219, 256, 538, 539, 540, 543, 591, 653, 1014, 1015, 1016, 1019, 1039, 1040, 1041, 1059], "detail": [91, 103, 119, 120, 132, 256, 741, 1067], "latest": [91, 104, 113, 132, 346, 354, 376, 451, 593, 642, 832, 840], "from_panda": [91, 105], "from_arrow": 91, "effici": [91, 171, 256], "reli": [91, 132], "therefor": [91, 132, 144, 256, 633, 847, 1059], "becaus": [91, 109, 132, 133, 144, 158, 174, 226, 238, 256, 411, 495, 501, 591, 642, 675, 725, 741, 751, 847, 900, 1059], "clone": [92, 93, 94, 95, 96, 135, 218, 219, 256, 658, 741, 781, 1039, 1040, 1041, 1049, 1059], "dimension": [92, 94, 96, 218, 256, 741, 1059], "infer_schema_length": [93, 96, 101, 102, 105, 112, 115, 256, 521, 741, 997], "NOT": [93, 119, 120, 449, 1066], "typic": [93, 133, 256, 326, 744, 751, 808, 1059], "clearer": 93, "load": [93, 95, 104, 113, 125, 127, 256, 653, 677, 684, 741, 1067], "_partial_": [93, 256, 741], "omit": [93, 97, 122, 124, 126, 130, 183, 197, 256, 630, 631, 744], "mani": [93, 96, 103, 146, 256, 521, 750, 853, 997, 1059], "scan": [93, 96, 101, 102, 112, 113, 114, 115, 116, 117, 158, 159, 256, 668, 675, 676, 677, 684, 741], "slow": [93, 96, 101, 102, 112, 270, 311, 642, 725, 792, 1059], "partial": 93, "present": [93, 119, 124, 389, 642, 1049, 1059], "np": [94, 149, 218, 256, 553, 642, 741, 872, 876, 878, 879, 955, 1030, 1059], "ndarrai": [94, 149, 218, 256, 553, 642, 741, 796, 967, 970, 1030, 1040, 1059], "numpi": [94, 118, 138, 170, 196, 197, 215, 218, 219, 256, 461, 462, 642, 741, 872, 876, 878, 879, 937, 938, 955, 1040, 1041, 1049, 1059], "columnar": [94, 96, 170, 196, 256], "interpret": [94, 96, 101, 102, 112, 256, 741], "yield": [94, 96, 101, 102, 112, 144, 146, 223, 256, 467, 642, 741, 750, 847, 853, 1059], "conclus": [94, 96, 256, 741], "nan_to_nul": [95, 256, 741, 1059], "include_index": 95, "pd": [95, 105, 557, 642, 1041, 1042, 1059], "panda": [95, 105, 118, 158, 219, 256, 339, 340, 557, 642, 675, 741, 825, 826, 1041, 1042, 1059], "instal": [95, 101, 102, 103, 106, 110, 118, 138, 218, 219, 256, 706, 741, 1041, 1059], "nan": [95, 119, 120, 124, 132, 147, 219, 256, 316, 317, 360, 361, 369, 378, 379, 384, 391, 393, 394, 395, 400, 439, 443, 456, 461, 462, 463, 464, 559, 583, 642, 669, 741, 753, 757, 797, 855, 878, 879, 937, 938, 955, 1040, 1041, 1059, 1067], "convert": [95, 104, 105, 113, 132, 214, 215, 216, 217, 218, 221, 256, 313, 321, 350, 353, 433, 441, 475, 520, 527, 538, 539, 540, 541, 543, 642, 673, 741, 803, 836, 839, 922, 996, 1003, 1014, 1015, 1016, 1017, 1019, 1027, 1038, 1039, 1040, 1041, 1049, 1059], "pd_df": 95, "pd_seri": 95, "tbl": [97, 99, 102], "reconstruct": 97, "repr": [97, 124, 126], "trim": 97, "whitespac": [97, 525, 531, 537, 1001, 1007, 1013], "prompt": 97, "extract": [97, 322, 324, 325, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 344, 345, 348, 349, 351, 355, 356, 358, 469, 519, 520, 521, 522, 642, 804, 805, 806, 807, 810, 811, 813, 817, 818, 819, 820, 822, 823, 824, 827, 828, 830, 831, 834, 835, 837, 841, 842, 844, 995, 996, 997, 998], "to_init_repr": [97, 256, 1059], "truncat": [97, 158, 170, 196, 197, 215, 256, 343, 675, 694, 741, 829], "identifi": [97, 179, 185, 224, 256, 689, 714, 741], "compound": [97, 197, 256, 744], "struct": [97, 183, 200, 221, 225, 232, 256, 312, 433, 442, 473, 482, 483, 520, 521, 534, 535, 563, 586, 587, 589, 608, 642, 700, 715, 719, 725, 741, 793, 922, 945, 953, 996, 997, 1008, 1010, 1011, 1059], "neither": [97, 105, 198, 256, 433, 922], "source_ac": 97, "source_cha": 97, "ident": [97, 135, 136, 256, 350, 482, 483, 642, 658, 659, 741, 781, 785, 836, 953, 954, 1059], "timestamp": [97, 346, 600, 832], "tor_id": 97, "nnel_id": 97, "\u03bc": [97, 124, 158, 159, 170, 173, 196, 197, 215, 228, 256, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 485, 486, 488, 491, 492, 493, 538, 540, 591, 594, 600, 642, 675, 676, 681, 741, 744, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 840, 841, 842, 843, 844, 1014, 1016], "asia": [97, 744, 804, 805, 837], "tokyo": [97, 744], "123456780": 97, "9876543210": 97, "56": [97, 555, 642], "59": [97, 123, 320, 336, 348, 593, 629, 630, 631, 744, 802, 822, 834], "663053": 97, "jst": [97, 744], "803065983": 97, "2055938745": 97, "38": [97, 124], "18": [97, 159, 180, 256, 294, 310, 347, 354, 357, 384, 397, 538, 540, 573, 578, 591, 630, 642, 673, 676, 690, 694, 696, 741, 744, 750, 843, 1014, 1016, 1059], "050545": 97, "source_actor_id": 97, "source_channel_id": 97, "sr": 97, "to_list": [97, 159, 256, 676, 741, 988, 1059], "datatypeclass": 98, "uint32": [98, 118, 144, 256, 280, 324, 328, 332, 334, 336, 338, 341, 344, 345, 348, 355, 356, 405, 406, 418, 479, 513, 523, 526, 553, 557, 642, 744, 761, 773, 806, 810, 817, 819, 822, 824, 827, 830, 831, 834, 841, 842, 847, 877, 894, 895, 907, 968, 989, 999, 1002, 1042, 1059], "regular": [98, 170, 195, 196, 228, 256, 365, 512, 513, 518, 519, 520, 528, 529, 580, 596, 609, 613, 626, 642, 744, 988, 989, 994, 995, 996, 1004, 1005], "uint64": [98, 160, 256, 380, 405, 406, 478, 642, 862, 894, 895, 949, 1059], "bigidx": 98, "read": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 146, 256, 377, 440, 633, 642, 662, 668, 673, 696, 741, 750, 853, 1059], "batch": [99, 102, 115, 117, 685, 741], "over": [99, 101, 102, 104, 112, 124, 133, 146, 170, 171, 195, 196, 197, 223, 235, 238, 256, 270, 311, 370, 440, 441, 473, 476, 484, 485, 486, 487, 488, 489, 491, 492, 493, 571, 586, 587, 598, 608, 618, 642, 725, 744, 750, 751, 792, 853, 955, 956, 957, 959, 963, 1059], "fetch": [99, 112, 174, 256, 658, 660, 677, 684, 741], "ideal": 99, "read_csv_batch": [99, 654], "tpch": [99, 102], "tables_scale_100": [99, 102], "lineitem": [99, 102, 103], "try_parse_d": [99, 101, 102, 112], "n_row": [100, 101, 102, 106, 110, 112, 114, 115, 116, 171, 256, 668, 741], "accept": [100, 101, 102, 104, 106, 110, 134, 157, 200, 201, 208, 222, 232, 233, 236, 256, 263, 365, 385, 442, 467, 508, 566, 567, 568, 569, 570, 576, 579, 580, 581, 582, 588, 589, 596, 609, 610, 613, 614, 622, 625, 626, 627, 633, 642, 656, 674, 700, 701, 708, 713, 719, 720, 723, 741, 868, 1059], "stop": [100, 101, 102, 106, 110, 112, 114, 115, 116, 324, 327, 328, 330, 331, 336, 338, 344, 345, 347, 348, 352, 354, 355, 356, 358, 485, 486, 488, 491, 492, 493, 642, 801, 803, 806, 809, 810, 812, 817, 819, 822, 824, 827, 830, 831, 833, 834, 838, 840, 841, 842, 843, 844], "textio": 101, "new_column": [101, 102, 105, 112, 192, 256], "comment_char": [101, 102, 112], "quote_char": [101, 102, 112], "skip_row": [101, 102, 112], "missing_utf8_is_empty_str": [101, 102, 112], "ignore_error": [101, 102, 109, 112], "n_thread": [101, 102], "8192": 101, "csvencod": [101, 102, 112], "low_memori": [101, 102, 110, 112, 115, 116], "skip_rows_after_head": [101, 102, 112], "row_count_nam": [101, 102, 106, 110, 112, 114, 115, 116], "row_count_offset": [101, 102, 106, 110, 112, 114, 115, 116], "sample_s": [101, 102], "eol_char": [101, 102, 112], "handler": [101, 102, 105], "g": [101, 102, 104, 105, 106, 110, 113, 114, 116, 158, 159, 173, 218, 226, 228, 256, 263, 270, 312, 343, 347, 354, 365, 473, 485, 486, 487, 488, 489, 491, 492, 493, 500, 596, 642, 675, 676, 681, 697, 741, 829, 833, 840, 968, 1040, 1059], "builtin": [101, 102, 105], "stringio": [101, 102, 662, 673, 702, 741], "fsspec": [101, 102, 106, 110, 113, 114, 116, 118], "remot": [101, 102, 106, 110], "autogener": [101, 102, 112], "column_x": [101, 102, 112], "enumer": [101, 102, 112, 171, 256], "shorter": [101, 102], "comment": [101, 102, 112], "instanc": [101, 102, 112, 124, 126, 130, 146, 152, 256, 295, 451, 485, 486, 487, 488, 489, 491, 492, 493, 586, 598, 642, 685, 722, 741, 750, 773, 853, 1059], "escap": [101, 102, 112], "dure": [101, 102, 112, 130, 146, 256, 750, 853, 1059], "would": [101, 102, 112, 280, 414, 450, 476, 576, 591, 642, 744, 760, 903, 947, 1040, 1059], "prefer": [101, 102, 104, 112, 127, 133, 146, 170, 195, 196, 238, 256, 270, 365, 484, 642, 741, 750, 751, 853, 955, 1059, 1067], "treat": [101, 102, 112, 512, 528, 529, 988, 1004, 1005], "10000": [101, 171, 256, 546], "might": [101, 102, 112, 128, 134, 218, 222, 256, 270, 561, 642, 656, 708, 713, 741, 1041, 1059], "issu": [101, 102, 105, 112, 309, 310, 551, 642, 790, 791, 1028, 1059], "iso8601": [101, 102, 112], "physic": [101, 102, 173, 256, 297, 557, 642, 657, 680, 681, 741, 776, 1042, 1059], "cpu": [101, 102], "system": [101, 102], "wrongli": 101, "done": [101, 102, 112, 117, 156, 173, 256, 269, 271, 295, 467, 524, 530, 572, 642, 681, 741, 773, 1000, 1006, 1059], "buffer": [101, 102, 144, 170, 256, 847, 1059], "modifi": [101, 102, 112, 128, 130, 146, 163, 170, 230, 256, 281, 346, 357, 512, 518, 519, 528, 642, 750, 832, 843, 853, 950, 988, 994, 995, 1004, 1018, 1020, 1021, 1059], "upper": [101, 102, 144, 158, 256, 300, 301, 385, 433, 562, 573, 591, 592, 604, 605, 630, 631, 642, 675, 741, 783, 847, 868, 927, 1046, 1059], "bound": [101, 102, 144, 158, 256, 300, 301, 302, 385, 414, 432, 433, 438, 562, 573, 591, 592, 604, 605, 630, 631, 642, 675, 741, 783, 784, 847, 868, 903, 921, 927, 1046, 1059], "lossi": [101, 102, 112], "decod": [101, 102], "usag": [101, 102, 112, 124, 126, 206, 256, 744, 976, 1059], "expens": [101, 102, 110, 112, 115, 116, 125, 127, 133, 158, 159, 170, 195, 196, 197, 223, 224, 256, 270, 642, 675, 676, 714, 741, 750, 751, 853, 1059, 1067], "aggreg": [101, 102, 110, 152, 157, 158, 159, 176, 177, 178, 181, 183, 187, 188, 189, 209, 210, 226, 229, 236, 237, 240, 242, 256, 264, 371, 382, 440, 467, 484, 485, 486, 487, 488, 489, 491, 492, 493, 563, 567, 568, 569, 570, 586, 587, 588, 589, 598, 603, 609, 610, 613, 614, 618, 626, 627, 642, 675, 676, 685, 686, 687, 688, 691, 692, 695, 709, 710, 717, 723, 724, 727, 729, 741, 865, 955, 956, 957, 959, 962, 963, 964, 1059], "nativ": [101, 106, 110, 122, 133, 170, 196, 197, 215, 238, 256, 270, 571, 642, 647, 725, 751, 1059, 1067], "parser": 101, "even": [101, 469, 473, 642, 945, 1059], "regard": [101, 583], "sens": [101, 106, 110, 114, 116, 180, 228, 256, 467, 642, 690, 741], "particular": [101, 106, 110, 114, 116, 144, 256, 847, 1059], "usernam": [101, 103, 106, 110, 114, 116], "password": [101, 103, 106, 110, 114, 116], "skip": [101, 102, 105, 110, 112, 116, 226, 256, 751, 1059], "offset": [101, 102, 106, 110, 112, 114, 115, 116, 158, 159, 207, 228, 234, 256, 318, 326, 339, 340, 343, 347, 354, 428, 506, 532, 538, 540, 591, 592, 642, 675, 676, 707, 722, 741, 800, 808, 825, 826, 829, 833, 840, 917, 982, 1008, 1014, 1016, 1059], "row_count": [101, 102, 106, 110, 112, 114, 115, 116], "sampl": [101, 102, 238, 256, 505, 642, 725, 981, 1059], "estim": [101, 102, 144, 256, 271, 363, 364, 398, 572, 642, 741, 847, 849, 850, 888, 1059], "alloc": [101, 102, 144, 190, 256, 847, 1059], "lazili": [101, 102, 112, 113, 114, 115, 116, 442, 642], "glob": [101, 102, 112, 114, 115, 116], "continu": [101, 110, 312, 473, 505, 642, 793, 945, 981, 1059], "benchmark": [101, 110], "50000": 102, "batchedcsvread": [102, 653], "upon": 102, "creation": 102, "gather": 102, "next_batch": 102, "big": 102, "interest": 102, "seen_group": 102, "big_fil": 102, "df_current_batch": 102, "concat": [102, 780, 934, 1059], "partition_df": 102, "partition_bi": [102, 171, 256], "as_dict": [102, 185, 256], "fh": 102, "write_csv": [102, 112, 256], "els": [102, 633], "partition_on": 103, "partition_rang": 103, "partition_num": 103, "dbreadengin": 103, "raw": 103, "connectorx": [103, 118], "driver": 103, "snowflak": 103, "warehous": 103, "role": 103, "transfer": 103, "document": [103, 105, 350, 353, 522, 538, 539, 540, 543, 836, 839, 998, 1014, 1015, 1016, 1019], "redshift": 103, "mysql": 103, "mariadb": 103, "clickhous": 103, "oracl": 103, "bigqueri": 103, "pleas": [103, 158, 256, 675, 741], "doc": [103, 138, 256], "github": 103, "sfu": 103, "connector": 103, "destin": 103, "small": [103, 123, 174, 256, 347, 668, 741, 1067], "still": 103, "develop": [103, 124, 126], "explicitli": [103, 122, 124, 130, 442, 625, 642, 652], "test_tabl": 103, "compani": 103, "testdb": 103, "public": [103, 256, 642, 653, 741, 1059], "myrol": 103, "delta_table_opt": [104, 113], "root": [104, 113, 298, 397, 441, 452, 471, 509, 550, 641, 642, 778, 984, 1059], "absolut": [104, 113, 119, 120, 262, 362, 363, 364, 642, 746, 848, 849, 850, 1059], "sinc": [104, 113, 134, 222, 256, 294, 327, 538, 540, 573, 578, 591, 600, 619, 630, 642, 656, 673, 696, 708, 713, 741, 750, 809, 1014, 1016, 1059], "avoid": [104, 196, 256, 265, 642], "year": [104, 113, 158, 159, 173, 228, 256, 330, 331, 343, 344, 347, 354, 355, 485, 486, 487, 488, 489, 491, 492, 493, 590, 591, 593, 642, 675, 676, 681, 741, 812, 813, 829, 830, 833, 840, 841], "2021": [104, 113, 139, 156, 158, 228, 256, 538, 607, 675, 741, 744, 804, 805, 813, 837, 884, 1014, 1059], "aw": [104, 113], "googl": [104, 113], "service_account": [104, 113], "service_account_json_absolute_path": [104, 113], "az": [104, 113], "adl": [104, 113], "abf": [104, 113], "azure_storage_account_nam": [104, 113], "azure_storage_account_kei": [104, 113], "without_fil": [104, 113], "track": [104, 113, 133, 256, 433, 1066], "sheet_id": 105, "sheet_nam": 105, "xlsx2csv_option": 105, "read_csv_opt": 105, "noreturn": 105, "xlsx2csv": [105, 118], "read_csv": [105, 112], "nor": [105, 198, 256], "skip_empty_lin": 105, "my": [105, 117, 544, 1020], "datasheet": 105, "correct": [105, 363, 364, 398, 490, 505, 642, 685, 741, 849, 850, 888, 961, 981, 1059], "look": [105, 288, 433, 767], "whole": [105, 507, 508, 518, 642, 725, 741, 994], "With": [105, 133, 169, 256, 270, 485, 486, 487, 488, 489, 491, 492, 493, 642, 751, 887, 1059], "1000": [105, 144, 217, 256, 332, 333, 546, 818, 1038, 1059, 1067], "spreadsheet": [105, 187, 256], "xl": 105, "xlsm": 105, "xlsb": 105, "odf": 105, "od": 105, "odt": 105, "memory_map": [106, 110, 114], "v2": [106, 114], "greatli": [106, 114], "repeat": [106, 114, 312, 473, 477, 479, 616, 634, 642], "give": [106, 110, 114, 115, 116, 179, 224, 256, 327, 398, 479, 559, 642, 653, 689, 714, 741, 809, 888, 1059], "That": [106, 685, 741], "filenam": 106, "my_fil": 106, "write_ipc": [106, 256], "read_ndjson": 108, "parallelstrategi": [110, 116], "use_statist": [110, 116], "stabl": [110, 134, 138, 198, 222, 256, 437, 642, 656, 689, 708, 713, 741], "row_group": [110, 116], "read_tabl": 110, "scan_parquet": 110, "scan_pyarrow_dataset": [110, 116], "hive": [110, 116], "contribut": [110, 487, 489, 491, 493, 642], "with_column_nam": 112, "push": [112, 114, 115, 116, 117], "down": [112, 114, 115, 116, 117, 374, 642, 859, 1059], "therebi": [112, 114, 115, 116], "potenti": [112, 114, 115, 116, 170, 195, 197, 256], "overhead": [112, 114, 115, 116], "realloc": [112, 114, 115, 146, 256, 750, 853, 1059], "headerless": 112, "unlik": [112, 158, 256, 675, 741], "fewer": [112, 473, 642, 945, 1059], "my_long_fil": 112, "doesn": [112, 158, 256, 359, 642, 675, 741, 846, 1049, 1059], "thing": [112, 597, 606], "less": [112, 173, 256, 400, 439, 524, 530, 535, 546, 642, 681, 741, 1000, 1006, 1011, 1022, 1067], "breezah": 112, "languag": [112, 158, 159, 173, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 829, 833, 840], "hard": [112, 685, 741], "mydf": 112, "lambda": [112, 133, 152, 186, 238, 256, 270, 362, 363, 364, 433, 440, 441, 484, 571, 586, 587, 598, 608, 618, 642, 685, 693, 725, 741, 751, 848, 849, 850, 922, 1059], "lower": [112, 158, 189, 248, 256, 300, 302, 385, 438, 441, 474, 478, 489, 573, 591, 592, 604, 605, 617, 630, 631, 642, 668, 675, 695, 735, 741, 784, 868, 927, 946, 949, 960, 1046, 1059], "simpli": [112, 467, 586, 598, 642], "idx": [112, 158, 171, 256, 433, 675, 741, 922, 970, 1059], "uint16": [112, 309, 310, 551, 642, 744, 790, 791, 1028, 1059], "u16": [112, 124, 1067], "eu": 113, "central": [113, 398, 505, 642, 888, 981, 1059], "read_parquet": 116, "allow_pyarrow_filt": 117, "comparison": 117, "record": [117, 173, 218, 256, 681, 741], "dset": 117, "folder": 117, "05": [117, 119, 120, 124, 173, 228, 256, 320, 321, 325, 346, 348, 350, 353, 591, 681, 741, 744, 802, 803, 804, 805, 806, 807, 832, 833, 836, 837, 839, 840, 842], "04": [117, 158, 228, 256, 320, 321, 325, 329, 336, 337, 338, 339, 340, 346, 347, 348, 349, 350, 353, 355, 357, 538, 591, 594, 675, 741, 744, 803, 807, 811, 817, 819, 822, 823, 824, 825, 826, 827, 831, 832, 834, 835, 836, 839, 841, 842, 843, 1014], "stdout": [118, 130, 156, 256, 453], "17": [118, 124, 236, 494, 600, 619, 630, 642, 723, 786, 833, 1059, 1067], "platform": 118, "linux": 118, "90": [118, 541, 1017], "wsl2": 118, "x86_64": 118, "glibc2": 118, "main": 118, "apr": 118, "14": [118, 124, 133, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 318, 331, 384, 476, 630, 642, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 744, 800, 833], "44": [118, 180, 256, 315, 642, 690, 741], "51": 118, "gcc": 118, "matplotlib": [118, 694, 706, 741], "check_row_ord": 119, "check_column_ord": 119, "check_dtyp": [119, 120], "check_exact": [119, 120], "rtol": [119, 120], "1e": [119, 120], "atol": [119, 120], "08": [119, 120, 124, 159, 256, 320, 347, 538, 591, 594, 676, 741, 744, 833, 840, 1014], "nans_compare_equ": [119, 120], "categorical_as_str": [119, 120], "assertionerror": [119, 120], "compar": [119, 120, 153, 256, 360, 361, 378, 379, 400, 439, 463, 464, 642, 968, 1059], "irrespect": 119, "unsort": 119, "exactli": [119, 120, 123, 124, 126, 534, 535, 976, 1010, 1011, 1059], "toler": [119, 120, 173, 256, 681, 741], "inexact": [119, 120], "assert": [119, 120, 122, 124, 126, 159, 256, 653, 676, 741, 744, 861, 1059], "check_nam": 120, "s1": [120, 152, 256, 887, 922, 1041, 1050, 1059], "searchstrategi": [121, 123, 124, 126], "null_prob": [121, 124, 126], "percentag": [121, 124, 126, 468, 642, 941, 1059], "chanc": [121, 124, 126, 1067], "independ": [121, 122, 124, 126], "flag": [121, 256, 497, 512, 518, 519, 528, 642, 666, 685, 741, 971, 988, 994, 995, 1004, 1059], "hypothesi": [121, 122, 123, 124, 125, 126, 1067], "sampled_from": [121, 1067], "unique_small_int": 121, "ccy": [121, 1067], "gbp": [121, 1067], "eur": [121, 139, 156, 256, 1067], "jpy": [121, 1067], "min_col": [122, 124], "max_col": [122, 124], "standalon": [122, 124], "mincol": 122, "assign": [122, 158, 256, 312, 433, 467, 473, 476, 534, 535, 642, 675, 741, 793, 922, 928, 945, 947, 1010, 1011, 1059], "exact": [122, 124, 126, 206, 256, 538, 539, 540, 559, 642, 1014, 1015, 1016], "especi": [122, 483, 642, 954, 1059], "test_unique_xyz": 122, "assert_someth": 122, "punctuat": 122, "test_special_char_colname_init": 122, "inner_dtyp": [123, 126], "select_from": [123, 126], "min_siz": [123, 124, 126, 1067], "max_siz": [123, 124, 126, 1067], "anoth": [123, 157, 256, 311, 319, 432, 446, 449, 642, 674, 721, 741, 792, 801, 853, 921, 968, 1059], "randomli": 123, "innermost": 123, "2x": 123, "lst": 123, "11330": 123, "24030": 123, "116": 123, "zz": [123, 126], "uint8_pair": [123, 1067], "uint": [123, 1067], "zip": [123, 1067], "131": 123, "176": 123, "149": [123, 1067], "max_data_s": [124, 126], "include_col": 124, "allow_infin": [124, 126], "allowed_dtyp": [124, 126, 1067], "excluded_dtyp": [124, 126], "describ": [124, 156, 256, 1059], "desir": [124, 433, 591, 592, 922], "n_chunk": [124, 126, 256, 750, 853, 1059], "randomis": 124, "onto": 124, "pct": 124, "preced": [124, 744], "disallow": [124, 126], "inf": [124, 126, 277, 312, 387, 390, 473, 559, 642, 757, 793, 864, 872, 876, 927, 941, 945, 1046, 1059], "exclud": [124, 126, 307, 310, 385, 580, 642, 868, 884, 1059], "deploi": [124, 126], "characterist": [124, 126], "concret": [124, 126], "test_repr": 124, "isinst": [124, 126, 256], "0x11f561580": 124, "known": [124, 433, 725, 922], "0565": 124, "34715": 124, "5844": 124, "33": [124, 180, 256, 494, 580, 642, 690, 741, 960, 1059], "076854": 124, "3382": 124, "48662": 124, "7540": 124, "29": [124, 158, 159, 173, 228, 256, 318, 339, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 800, 825, 829, 833, 840], "836271": 124, "4063": 124, "06": [124, 228, 256, 320, 331, 345, 346, 358, 744, 832, 833, 842], "39092": 124, "1889": 124, "13": [124, 135, 136, 147, 148, 155, 159, 164, 174, 182, 232, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 265, 484, 541, 581, 586, 589, 598, 627, 632, 642, 658, 659, 669, 670, 676, 683, 719, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 741, 751, 833, 840, 841, 1017, 1059], "41": [124, 492, 642, 1067], "874455": 124, "15836": 124, "1755e": 124, "575050513": 124, "profil": [125, 127, 741], "balanc": [125, 127, 1067], "set_environ": 125, "polars_hypothesis_profil": [125, 127], "1500": 125, "constructor": 126, "normal": [126, 158, 256, 359, 398, 505, 642, 675, 741, 846, 888, 981, 1059], "test_repr_is_valid_str": 126, "experi": 126, "create_list_strategi": [126, 1067], "polars_max_thread": 128, "behind": 128, "lock": 128, "reason": 128, "pyspark": 128, "udf": [128, 133, 186, 238, 256, 270, 469, 571, 642, 693, 725, 741, 751, 1059], "recommend": [128, 170, 186, 256, 591, 744], "initi": [130, 586, 598, 633], "whatev": 130, "were": 130, "enter": 130, "advantag": [130, 186, 256], "initialis": [130, 741, 1066], "set_": 130, "set_verbos": 130, "do_various_th": 130, "restor": 130, "cleaner": 130, "breviti": 130, "vein": 130, "durat": [130, 173, 228, 256, 318, 325, 326, 329, 333, 335, 337, 342, 349, 354, 357, 557, 591, 592, 630, 631, 642, 681, 741, 744, 800, 807, 808, 811, 818, 820, 823, 828, 835, 840, 843, 1042, 1059], "set_ascii_t": 130, "write_ascii_frame_to_stdout": 130, "sy": 130, "nan_as_nul": 132, "_pyarrowdatafram": 132, "nullabl": 132, "extens": [132, 219, 256, 1041, 1059], "propag": [132, 177, 210, 256, 361, 461, 462, 464, 642, 937, 938, 1059], "inference_s": [133, 256], "256": [133, 256, 941, 1059], "much": [133, 226, 238, 256, 270, 311, 432, 571, 642, 725, 751, 792, 921, 1059], "almost": [133, 238, 256, 538, 539, 540, 591, 751, 1014, 1015, 1016, 1059], "_significantly_": [133, 238, 256, 751, 1059], "intens": [133, 238, 256, 467, 642, 751, 1059], "forc": [133, 173, 238, 256, 680, 681, 725, 741, 751, 1059], "materi": [133, 238, 256, 694, 725, 741, 744, 751, 1059], "parallelis": [133, 238, 256, 751, 1059], "optimis": [133, 197, 238, 256, 741, 751, 969, 970, 1059], "achiev": [133, 238, 256, 270, 642, 751, 1059], "best": [133, 238, 256, 270, 642, 751, 1059], "tri": [133, 256], "arbitrarili": [133, 256], "rearrang": [133, 256], "transform": [133, 256, 440, 542, 544, 545, 642], "preserv": [133, 157, 218, 219, 256, 502, 642, 978, 1041, 1059], "lru_cach": [133, 256, 270, 642, 751, 1059], "magnitud": [133, 256, 270, 642, 751, 1059], "column_1": [133, 223, 256], "better": [133, 218, 238, 256, 270, 563, 642, 725, 969, 970, 1059], "scalar": [133, 169, 195, 256, 496, 571, 607, 642, 887, 967, 1059], "k": [134, 197, 222, 256, 293, 297, 398, 558, 642, 656, 713, 741, 772, 776, 888, 1043, 1059], "intoexpr": [134, 157, 158, 159, 200, 201, 208, 222, 232, 233, 236, 256, 269, 385, 409, 423, 424, 425, 426, 467, 499, 508, 567, 568, 569, 570, 573, 576, 579, 581, 582, 586, 588, 589, 591, 592, 593, 598, 604, 605, 609, 610, 613, 614, 619, 622, 625, 626, 627, 630, 631, 633, 642, 656, 671, 674, 675, 676, 700, 701, 708, 713, 719, 720, 723, 741, 868, 1059], "nulls_last": [134, 208, 222, 256, 280, 507, 642, 656, 708, 713, 741, 760, 1059], "smallest": [134, 222, 256, 293, 642, 656, 713, 741, 772, 1059], "largest": [134, 158, 159, 173, 222, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 558, 642, 656, 675, 676, 681, 713, 741, 829, 833, 840, 1043, 1059], "last": [134, 161, 173, 175, 187, 197, 208, 211, 222, 224, 250, 256, 280, 311, 324, 339, 344, 355, 397, 414, 431, 471, 507, 535, 550, 552, 591, 628, 642, 656, 681, 708, 711, 713, 714, 737, 741, 744, 760, 792, 806, 825, 830, 841, 863, 890, 903, 920, 1011, 1029, 1059], "wors": [134, 222, 256, 656, 708, 713, 741], "search": [134, 173, 222, 256, 656, 681, 708, 713, 741], "top_k": [134, 256, 293, 642, 656, 741, 772, 1059], "greater": [135, 173, 256, 378, 379, 505, 535, 642, 681, 741, 981, 1011, 1059], "cheap": [135, 136, 201, 233, 256, 658, 659, 701, 720, 741, 750, 781, 785, 1059], "deepcopi": [135, 136, 256, 658, 659, 741, 781, 785, 1059], "clear": [136, 256, 659, 741, 785, 1059], "properti": [137, 143, 151, 162, 199, 203, 231, 256, 661, 665, 699, 718, 741, 744, 1067], "appl": [137, 163, 172, 191, 193, 214, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 481, 516, 536, 642, 680, 697, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 741, 992, 1012], "banana": [137, 214, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 256, 481, 642, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736], "pairwis": [138, 256], "pearson": [138, 256, 398, 505, 583, 642, 888, 981, 1059], "correl": [138, 256, 583, 620], "coeffici": [138, 256, 505, 642, 981, 1059], "corrcoef": [138, 256], "percentil": [139, 256, 794, 1059], "summari": [139, 256, 794, 1059], "glimps": [139, 161, 256], "usd": [139, 156, 256, 1067], "2020": [139, 156, 159, 256, 321, 325, 326, 329, 332, 333, 335, 337, 342, 346, 349, 350, 353, 354, 538, 539, 540, 676, 741, 744, 803, 807, 808, 811, 818, 820, 823, 828, 832, 835, 836, 839, 840, 1014, 1015, 1016], "null_count": [139, 142, 256, 311, 642, 741, 792, 794, 1059], "266667": [139, 256], "666667": [139, 177, 229, 244, 256, 362, 642, 717, 731, 741], "std": [139, 256, 484, 491, 642, 741, 794, 962, 1059], "101514": [139, 256], "707107": [139, 256, 363, 491, 642, 849, 1059], "57735": [139, 256], "median": [139, 187, 256, 370, 487, 642, 721, 741, 794, 958, 1059], "columnnameorselector": [140, 142, 185, 187, 197, 216, 224, 225, 226, 256, 663, 664, 689, 714, 741], "more_column": [140, 145, 202, 225, 256, 365, 596, 642, 663, 667, 703, 715, 741], "subset": [142, 183, 224, 256, 664, 714, 741], "behavior": [142, 256, 270, 432, 571, 642, 664, 741, 750, 921, 1059], "all_horizont": [142, 256, 567, 664, 741], "is_nul": [142, 256, 642, 664, 741, 1059], "sizeunit": [144, 256, 847, 1059], "heap": [144, 256, 847, 1059], "its": [144, 256, 320, 347, 354, 508, 633, 642, 802, 833, 840, 847, 1059], "bitmap": [144, 256, 847, 1059], "structarrai": [144, 256, 847, 1059], "constant": [144, 159, 256, 318, 368, 642, 676, 741, 800, 847, 854, 1059], "unchang": [144, 256, 557, 642, 685, 725, 741, 847, 1042, 1059], "capac": [144, 206, 256, 847, 976, 1059], "ffi": [144, 256, 847, 1059], "kb": [144, 256, 847, 1059], "mb": [144, 256, 847, 1059], "gb": [144, 256, 847, 1059], "tb": [144, 256, 847, 1059], "revers": [144, 256, 306, 307, 308, 309, 310, 441, 471, 550, 642, 741, 788, 789, 790, 791, 1059], "1_000_000": [144, 256, 847, 1059], "25888898": [144, 256], "689577102661133": [144, 256], "long": [145, 179, 226, 256, 667, 689, 741], "letter": [145, 241, 250, 256, 365, 519, 596, 642, 667, 728, 737, 741, 744, 995], "onlin": [146, 256, 750, 853, 1059], "rerun": [146, 256, 750, 853, 1059], "conveni": [146, 256, 750, 853, 1059], "evalu": [147, 149, 173, 256, 267, 281, 311, 383, 403, 404, 433, 442, 466, 567, 569, 573, 577, 591, 592, 595, 604, 605, 616, 619, 625, 630, 631, 633, 634, 642, 671, 678, 680, 681, 741, 761, 792, 892, 893, 1050, 1059], "Not": [147, 256, 391, 393, 442, 642, 669, 741], "To": [147, 256, 316, 317, 343, 370, 512, 518, 519, 528, 544, 626, 642, 669, 741, 829, 988, 994, 995, 1004, 1020, 1040, 1059], "fillnullstrategi": [148, 256, 370, 642, 670, 741, 856, 1059], "matches_supertyp": [148, 256, 670, 741], "forward": [148, 173, 256, 339, 370, 376, 642, 670, 681, 741, 825, 856, 1059], "consecut": [148, 256, 287, 370, 376, 511, 642, 670, 741, 856, 987, 1059], "fill_nan": [148, 256, 642, 741, 1059], "OR": [149, 256, 569, 570, 671, 741, 744], "reduct": [152, 256], "supercast": [152, 256], "parent": [152, 256], "rule": [152, 256], "arithmet": [152, 256], "zip_with": [152, 256, 1059], "foo11": [152, 256], "bar22": [152, 256], "null_equ": [153, 256, 968, 1059], "retriev": [154, 256, 405, 406, 547, 894, 895, 1023], "return_as_str": [156, 256, 453], "preview": [156, 256], "wide": [156, 179, 226, 256, 689, 741], "nice": [156, 256], "few": [156, 256], "rather": [156, 173, 256, 453, 483, 546, 642, 681, 741, 954, 1022, 1059], "head": [156, 175, 211, 256, 269, 402, 642, 684, 741, 890, 1029, 1059], "tail": [156, 161, 256, 269, 505, 642, 741, 863, 981, 1059], "more_bi": [157, 185, 208, 256, 508, 642, 674, 708, 741], "consist": [157, 185, 256, 538, 674, 741, 750, 853, 1014, 1059], "regardless": [157, 256, 522, 633, 998], "agg": [157, 158, 159, 256, 264, 270, 371, 373, 507, 508, 553, 565, 584, 642, 660, 666, 668, 674, 675, 676, 694, 702, 706, 741, 744], "Or": [157, 158, 159, 173, 208, 228, 236, 256, 467, 508, 580, 633, 642, 674, 675, 676, 681, 708, 723, 741], "index_column": [158, 159, 256, 675, 676, 741], "timedelta": [158, 159, 228, 256, 324, 327, 328, 331, 336, 338, 343, 344, 345, 347, 348, 352, 354, 355, 356, 358, 485, 486, 487, 488, 489, 491, 492, 493, 591, 592, 630, 631, 642, 675, 676, 741, 744, 814, 816, 821, 829, 833, 840, 937, 938, 1059], "period": [158, 159, 204, 205, 256, 347, 354, 362, 363, 364, 427, 468, 498, 499, 591, 592, 630, 631, 642, 675, 676, 704, 705, 741, 833, 840, 848, 849, 850, 916, 941, 973, 974, 1059], "include_boundari": [158, 256, 675, 741], "closedinterv": [158, 159, 256, 385, 485, 486, 487, 488, 489, 491, 492, 493, 591, 592, 630, 631, 642, 675, 676, 741, 868, 1059], "start_bi": [158, 256, 675, 741], "startbi": [158, 256, 675, 741], "window": [158, 159, 256, 311, 347, 354, 362, 363, 364, 467, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 581, 620, 621, 642, 675, 676, 741, 792, 833, 840, 848, 849, 850, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 1059], "check_sort": [158, 159, 256, 675, 676, 741], "dynamicgroupbi": [158, 256], "groupbi": [158, 159, 183, 256, 264, 270, 311, 371, 373, 411, 467, 507, 508, 553, 565, 571, 584, 642, 660, 666, 668, 675, 676, 694, 706, 741, 744, 792, 900, 1059], "member": [158, 256, 675, 741, 875, 1059], "seen": [158, 256, 287, 376, 642, 675, 741], "roll": [158, 159, 256, 339, 340, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 581, 620, 621, 642, 675, 676, 741, 825, 826, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 1059], "slot": [158, 256, 311, 314, 410, 642, 675, 741, 792, 795, 899, 1059], "interv": [158, 159, 228, 256, 312, 330, 347, 348, 354, 385, 473, 485, 486, 487, 488, 489, 491, 492, 493, 591, 592, 630, 631, 642, 675, 676, 741, 793, 806, 809, 810, 812, 817, 819, 822, 824, 827, 830, 831, 833, 834, 838, 840, 841, 842, 844, 868, 945, 1059], "1n": [158, 159, 173, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 829, 833, 840], "nanosecond": [158, 159, 173, 228, 256, 343, 347, 348, 354, 485, 486, 487, 488, 489, 491, 492, 493, 594, 642, 675, 676, 681, 741, 829, 833, 834, 840], "1u": [158, 159, 173, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 829, 833, 840], "microsecond": [158, 159, 170, 173, 196, 197, 215, 228, 256, 343, 347, 348, 354, 485, 486, 487, 488, 489, 491, 492, 493, 593, 594, 629, 642, 675, 676, 681, 694, 741, 744, 829, 833, 840], "1m": [158, 159, 173, 228, 256, 332, 333, 335, 342, 343, 347, 349, 354, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 818, 820, 828, 829, 833, 835, 840], "millisecond": [158, 159, 173, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 594, 642, 675, 676, 681, 741, 744, 829, 833, 840], "minut": [158, 159, 173, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 593, 594, 629, 630, 642, 675, 676, 681, 741, 744, 829, 833, 840], "1h": [158, 159, 173, 228, 256, 326, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 630, 631, 642, 675, 676, 681, 741, 808, 810, 829, 833, 840], "hour": [158, 159, 173, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 591, 593, 594, 629, 630, 642, 675, 676, 681, 741, 744, 829, 833, 840], "1d": [158, 159, 173, 228, 256, 319, 329, 337, 343, 347, 354, 357, 485, 486, 487, 488, 489, 491, 492, 493, 591, 592, 607, 642, 675, 676, 681, 741, 744, 801, 809, 811, 814, 815, 816, 821, 823, 829, 833, 838, 840, 842, 843], "1w": [158, 159, 173, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 829, 833, 840], "week": [158, 159, 173, 228, 256, 343, 347, 354, 356, 485, 486, 487, 488, 489, 491, 492, 493, 594, 642, 675, 676, 681, 741, 744, 829, 833, 840, 842], "1mo": [158, 159, 173, 228, 256, 321, 325, 339, 340, 343, 346, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 591, 592, 642, 675, 676, 681, 741, 803, 807, 824, 825, 826, 829, 830, 831, 832, 833, 840, 841], "month": [158, 159, 173, 228, 256, 324, 339, 340, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 590, 591, 592, 593, 642, 675, 676, 681, 741, 806, 825, 826, 829, 833, 840], "1q": [158, 159, 173, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 829, 833, 840], "quarter": [158, 159, 173, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 829, 833, 840], "1y": [158, 159, 173, 228, 256, 330, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 591, 642, 675, 676, 681, 741, 812, 829, 833, 840, 844], "1i": [158, 159, 173, 228, 256, 343, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 829], "3d12h4m25": [158, 159, 173, 228, 256, 347, 354, 675, 676, 681, 741, 833, 840], "suffix": [158, 159, 172, 173, 200, 228, 232, 236, 256, 265, 291, 343, 347, 354, 391, 393, 394, 395, 441, 467, 471, 481, 485, 486, 487, 488, 489, 491, 492, 493, 516, 642, 675, 676, 680, 681, 700, 719, 721, 723, 741, 744, 770, 829, 833, 840, 992], "_satur": [158, 159, 173, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 591, 592, 642, 675, 676, 681, 741, 829, 833, 840], "satur": [158, 159, 173, 228, 256, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 829, 833, 840], "28": [158, 159, 173, 214, 228, 256, 263, 343, 346, 347, 354, 357, 485, 486, 487, 488, 489, 491, 492, 493, 591, 642, 675, 676, 681, 741, 829, 832, 833, 840, 843, 1067], "correspond": [158, 159, 173, 218, 228, 256, 331, 343, 347, 354, 476, 483, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 813, 829, 833, 840, 947, 954, 1059], "due": [158, 159, 173, 197, 228, 256, 265, 295, 326, 343, 347, 354, 397, 471, 485, 486, 487, 488, 489, 491, 492, 493, 495, 501, 550, 642, 675, 676, 681, 741, 773, 808, 829, 833, 840, 1059], "daylight": [158, 159, 173, 228, 256, 318, 326, 343, 347, 354, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 676, 681, 741, 808, 829, 833, 840], "10i": [158, 159, 256, 675, 676, 741], "ascend": [158, 159, 256, 675, 676, 741], "dynam": [158, 256, 433, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 741, 922], "matter": [158, 159, 170, 196, 197, 215, 256, 675, 676, 741], "_lower_bound": [158, 256, 675, 741], "_upper_bound": [158, 256, 675, 741], "harder": [158, 256, 675, 741], "tempor": [158, 159, 170, 196, 197, 215, 256, 385, 485, 486, 487, 488, 489, 491, 492, 493, 642, 653, 675, 676, 741, 744, 868, 884, 1059], "inclus": [158, 159, 256, 385, 485, 486, 487, 488, 489, 491, 492, 493, 533, 534, 573, 591, 592, 604, 605, 630, 631, 642, 675, 676, 741, 868, 1009, 1010, 1059], "datapoint": [158, 256, 675, 741], "mondai": [158, 256, 354, 356, 675, 741, 840, 842], "tuesdai": [158, 256, 675, 741], "wednesdai": [158, 256, 675, 741], "thursdai": [158, 256, 675, 741], "fridai": [158, 256, 675, 741], "saturdai": [158, 256, 675, 741], "sundai": [158, 256, 356, 675, 741, 842], "weekli": [158, 256, 354, 675, 741, 840], "sorted": [158, 159, 256, 675, 676, 741], "metadata": [158, 159, 256, 675, 676, 741], "verifi": [158, 159, 256, 675, 676, 741], "incorrectli": [158, 159, 256, 433, 675, 676, 741], "incorrect": [158, 159, 256, 357, 497, 642, 675, 676, 725, 741, 843, 971, 1059], "re": [158, 218, 256, 339, 340, 675, 741, 825, 826, 1066], "come": [158, 256, 339, 340, 398, 642, 654, 675, 740, 741, 825, 826, 888, 1059], "set_index": [158, 256, 675, 741], "resampl": [158, 256, 675, 741], "reset_index": [158, 256, 675, 741], "though": [158, 256, 675, 741], "evenli": [158, 256, 473, 642, 675, 741, 945, 1059], "upsampl": [158, 256, 675, 741], "date_rang": [158, 228, 256, 319, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 352, 354, 355, 356, 357, 358, 485, 486, 488, 491, 492, 493, 642, 675, 741, 800, 801, 803, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 840, 841, 842, 843, 844], "30m": [158, 256, 347, 354, 675, 741, 833, 840], "time_min": [158, 256, 675, 741], "time_max": [158, 256, 675, 741], "23": [158, 159, 256, 320, 324, 328, 344, 347, 356, 485, 486, 488, 491, 492, 493, 593, 629, 630, 631, 642, 675, 676, 741, 744, 802, 810, 1067], "boundari": [158, 256, 300, 301, 302, 354, 642, 675, 741, 782, 783, 784, 840, 864, 1059], "time_count": [158, 256, 675, 741], "_lower_boundari": [158, 256, 675, 741], "_upper_boundari": [158, 256, 675, 741], "lower_bound": [158, 256, 300, 302, 385, 642, 675, 741, 782, 784, 868, 1046, 1059], "upper_bound": [158, 256, 300, 301, 385, 433, 642, 675, 741, 782, 783, 868, 927, 1059], "time_agg_list": [158, 256, 675, 741], "int_rang": [158, 226, 238, 256, 573, 675, 725, 741], "2i": [158, 256, 675, 741], "3i": [158, 256, 675, 741], "a_agg_list": [158, 256, 675, 741], "rollinggroupbi": [159, 256], "dynamic_groupbi": [159, 256, 676, 741], "groupby_dynam": [159, 256, 676, 741], "t_0": [159, 256, 485, 486, 487, 488, 489, 491, 492, 493, 642, 676, 741], "t_1": [159, 256, 485, 486, 487, 488, 489, 491, 492, 493, 642, 676, 741], "t_n": [159, 256, 485, 486, 487, 488, 489, 491, 492, 493, 642, 676, 741], "19": [159, 173, 256, 347, 486, 488, 541, 642, 676, 681, 741, 833, 840, 1017], "43": [159, 256, 310, 492, 642, 676, 741], "strptime": [159, 256, 346, 676, 741, 832], "set_sort": [159, 173, 228, 256, 642, 676, 681, 741, 1059], "2d": [159, 218, 256, 607, 676, 741, 800, 806], "sum_a": [159, 256, 676, 741], "min_a": [159, 256, 676, 741], "max_a": [159, 256, 676, 741], "seed": [160, 198, 256, 380, 476, 495, 501, 642, 862, 947, 966, 977, 1059], "seed_1": [160, 256, 380, 642, 862, 1059], "seed_2": [160, 256, 380, 642, 862, 1059], "seed_3": [160, 256, 380, 642, 862, 1059], "hash": [160, 256, 642, 1059], "u64": [160, 256, 380, 478, 642, 694, 741, 862, 1059], "10783150408545073287": [160, 256], "1438741209321515184": [160, 256], "10047419486152048166": [160, 256], "2047317070637311557": [160, 256], "ab": [161, 175, 211, 232, 256, 547, 548, 642, 719, 741, 863, 890, 1029, 1059], "grown": [163, 256], "intermedi": [165, 256, 679, 741, 1067], "linear": [165, 189, 248, 256, 384, 407, 445, 474, 489, 581, 582, 617, 642, 679, 695, 735, 741, 867, 896, 946, 960, 1059], "mask": [166, 168, 256, 289, 386, 388, 396, 512, 514, 642, 768, 857, 868, 870, 873, 885, 942, 943, 969, 988, 990, 1050, 1059], "visual": [166, 168, 256], "buffer_s": [170, 256], "intern": [170, 256], "veri": [170, 223, 256, 270, 642, 659, 725, 741, 785, 1059], "fit": [170, 206, 226, 256, 500, 619, 642, 975, 976, 1059], "signific": [170, 256, 270, 642], "4x": [170, 256], "materialis": [170, 171, 195, 196, 197, 256], "rows_by_kei": [170, 196, 256], "awar": [170, 196, 197, 215, 256, 538, 540, 1014, 1016], "iter_row": [171, 195, 196, 197, 256], "17_500": [171, 256], "klmnoopqrstuvwxyz": [171, 256], "__name__": [171, 256], "7500": [171, 256], "15_000": [171, 256], "record_batch": [171, 256], "to_arrow": [171, 256, 1059], "to_batch": [171, 256], "date32": [171, 256], "large_str": [171, 213, 219, 256], "15000": [171, 256], "2500": [171, 256], "left_on": [172, 173, 256, 680, 681, 741], "right_on": [172, 173, 256, 680, 681, 741], "_right": [172, 173, 256, 680, 681, 741], "joinvalid": [172, 256, 680, 741], "semi": [172, 256, 680, 741], "anti": [172, 256, 680, 725, 741, 969, 970, 1059], "cross": [172, 256, 354, 680, 741, 840], "many_to_mani": [172, 256, 680, 741], "one_to_on": [172, 256, 680, 741], "one_to_mani": [172, 256, 680, 741], "many_to_on": [172, 256, 680, 741], "join_asof": [172, 256, 680, 741], "stringcach": [172, 256, 653], "other_df": [172, 256], "by_left": [173, 256, 681, 741], "by_right": [173, 256, 681, 741], "asofjoinstrategi": [173, 256, 681, 741], "allow_parallel": [173, 256, 680, 681, 741], "force_parallel": [173, 256, 680, 681, 741], "asof": [173, 256, 681, 741], "asof_join": [173, 256], "distanc": [173, 256, 681, 741, 864, 1059], "plan": [173, 174, 256, 657, 662, 666, 673, 680, 681, 696, 702, 706, 741], "gdp": [173, 256, 681, 741], "2016": [173, 256, 681, 741], "2017": [173, 256, 681, 741], "2018": [173, 256, 346, 681, 741, 832], "2019": [173, 256, 681, 741], "jan": [173, 256, 681, 741], "1st": [173, 256, 591, 681, 741], "4164": [173, 256, 681, 741], "4411": [173, 256, 681, 741], "4566": [173, 256, 681, 741], "4696": [173, 256, 681, 741], "popul": [173, 256, 681, 741], "12th": [173, 256, 681, 741], "82": [173, 256, 681, 741], "66": [173, 256, 492, 566, 642, 681, 741, 960, 1059], "83": [173, 256, 681, 741], "52": [173, 232, 256, 494, 642, 681, 719, 741], "request": [174, 256], "describe_plan": [174, 256], "unoptim": [174, 256], "describe_optimized_plan": [174, 256], "show_graph": [174, 256, 741], "un": [174, 256], "graphviz": [174, 256, 706, 741], "axi": [176, 177, 179, 181, 210, 256, 574, 575, 689, 741], "null_strategi": [177, 210, 256], "nullstrategi": [177, 210, 256], "spam": [177, 256, 519, 995], "id_var": [179, 256, 689, 741], "value_var": [179, 256, 689, 741], "variable_nam": [179, 256, 689, 741], "value_nam": [179, 256, 689, 741], "unpivot": [179, 256, 689, 741], "leav": [179, 256, 433, 689, 741], "massag": [179, 256, 689, 741], "measur": [179, 256, 689, 741], "merg": [180, 256, 690, 741], "caller": [180, 256, 433, 685, 690, 725, 741], "respons": [180, 256, 690, 741], "steve": [180, 256, 690, 741], "elis": [180, 256, 690, 741], "bob": [180, 256, 690, 741], "ag": [180, 256, 690, 741], "anna": [180, 256, 690, 741], "megan": [180, 256, 690, 741], "thoma": [180, 256, 690, 741], "21": [180, 210, 256, 485, 486, 488, 491, 492, 493, 600, 642, 690, 741, 744], "what": [183, 256, 1040, 1049, 1059], "pack": [183, 256], "expr_unique_subset": [183, 256], "df_nuniqu": [183, 256], "df_agg_nuniqu": [183, 256], "include_kei": [185, 197, 256], "offer": [186, 256, 469, 642, 693, 741], "fulli": [186, 198, 256], "cast_str_to_int": [186, 256, 693, 741], "col_nam": [186, 256, 693, 741], "tdf": [186, 256, 693, 741], "aggregate_funct": [187, 256], "pivotagg": [187, 256], "nodefault": [187, 256], "_nodefault": [187, 256], "no_default": [187, 256], "sort_column": [187, 256], "predefin": [187, 256], "predict": [187, 190, 228, 256, 495, 501, 642], "transpos": [187, 256], "discoveri": [187, 256], "col1": [187, 223, 256, 741, 1067], "col2": [187, 223, 256, 741, 1067], "col3": [187, 256, 1067], "tanh": [187, 256, 642, 1059], "998347": [187, 256], "964028": [187, 256], "999954": [187, 256], "interpol": [189, 248, 256, 370, 445, 474, 489, 617, 642, 695, 735, 741, 946, 960, 1059], "rollinginterpolationmethod": [189, 248, 256, 474, 489, 617, 642, 695, 735, 741, 946, 960, 1059], "midpoint": [189, 248, 256, 474, 489, 617, 642, 695, 735, 741, 946, 960, 1059], "by_pred": [195, 256], "accord": [195, 256, 442, 591, 642, 813], "never": [195, 256, 591], "mutual": [195, 256], "exclus": [195, 256, 566, 573, 604, 605, 642], "addition": [195, 256], "clariti": [195, 256], "toomanyrowsreturnederror": [195, 256, 653], "norowsreturnederror": [195, 256, 653], "inherit": [195, 256], "rowserror": [195, 256, 653], "high": [197, 256], "cost": [197, 256], "reoconstruct": [197, 256], "defaultdict": [197, 256], "assum": [197, 256, 685, 725, 741], "with_replac": [198, 256, 495, 642, 966, 1059], "shuffl": [198, 238, 256, 495, 642, 725, 966, 1059], "modul": [198, 256, 495, 501, 641, 642, 744, 966, 977, 1059], "named_expr": [200, 201, 232, 233, 256, 622, 625, 700, 701, 719, 720, 741], "threshold": [200, 256, 700, 741], "set_auto_structifi": [200, 232, 256, 700, 719, 741], "auto_structifi": [200, 232, 256, 700, 719, 741], "is_odd": [200, 256, 700, 741], "_is_odd": [200, 256, 700, 741], "sequenti": [201, 233, 256, 701, 720, 741], "shift_and_fil": [204, 256, 642, 741, 1059], "fill_valu": [205, 226, 256, 499, 642, 705, 741, 974, 1059], "shift": [205, 256, 314, 410, 468, 499, 581, 642, 705, 741, 795, 899, 941, 974, 1059], "shrink": [206, 256, 500, 642, 975, 976, 1059], "hold": [206, 256], "ddof": [209, 229, 256, 491, 493, 510, 564, 583, 620, 621, 624, 632, 642, 709, 717, 741, 962, 964, 985, 1048, 1059], "deviat": [209, 256, 363, 491, 510, 624, 642, 709, 741, 849, 985, 1059], "degre": [209, 229, 256, 475, 491, 493, 510, 564, 575, 583, 620, 621, 624, 632, 642, 709, 717, 741, 962, 964, 985, 1048, 1059], "freedom": [209, 229, 256, 491, 493, 510, 564, 583, 620, 621, 624, 632, 642, 709, 717, 741, 962, 964, 985, 1048, 1059], "divisor": [209, 229, 256, 491, 493, 510, 564, 583, 620, 621, 624, 632, 642, 709, 717, 741, 962, 964, 985, 1048, 1059], "816497": [209, 256], "16a": [210, 256], "27b": [210, 256], "38c": [210, 256], "nth": [212, 256, 535, 554, 642, 712, 741, 1011, 1031, 1059], "mostli": [213, 256, 371, 642], "categoricaltyp": [213, 256], "as_seri": [214, 256], "fruit": [214, 256, 481, 516, 536, 642, 992, 1012], "car": [214, 256, 481, 642], "beetl": [214, 256, 481, 642], "audi": [214, 256, 481, 642], "300": [214, 256, 956, 957, 959, 1059], "drop_first": [216, 256], "dummi": [216, 256, 1036, 1059], "foo_1": [216, 256], "foo_2": [216, 256], "bar_3": [216, 256], "bar_4": [216, 256], "ham_a": [216, 256], "ham_b": [216, 256], "instantiat": [217, 256, 1038, 1059], "from_repr": [217, 256, 1038, 1059], "df_from_str_repr": [217, 256], "eval": [217, 256, 595, 1038, 1059], "indexord": [218, 256], "fortran": [218, 256], "downstream": [218, 256, 497, 642, 971, 1059], "applic": [218, 256, 485, 486, 487, 488, 489, 491, 492, 493, 642], "prevent": [218, 256, 265, 309, 310, 397, 551, 642, 741, 790, 791, 1028, 1059], "reshap": [218, 256, 412, 642, 901, 1059], "ll": [218, 256], "u1": [218, 256], "f4": [218, 256], "view": [218, 256, 1040, 1059], "recarrai": [218, 256], "rec": [218, 256], "use_pyarrow_extension_arrai": [219, 256, 1041, 1059], "trigger": [219, 256, 1041, 1059], "sent": [219, 256, 1040, 1041, 1059], "pandas_df1": [219, 256], "pandas_df2": [219, 256], "pandas_df2_pa": [219, 256], "na": [219, 256, 1041, 1059], "get_column": [220, 256], "four": [221, 256], "five": [221, 256, 1067], "bottom_k": [222, 256, 558, 642, 713, 741, 1043, 1059], "include_head": [223, 256], "header_nam": [223, 256], "column_nam": [223, 256], "perhap": [223, 256], "column_2": [223, 256], "name_gener": [223, 256], "base_nam": [223, 256], "my_column_": [223, 256], "my_column_0": [223, 256], "my_column_1": [223, 256], "my_column_2": [223, 256], "new_id": [223, 256], "uniquekeepstrategi": [224, 256, 714, 741], "kept": [224, 256, 714, 741], "decompos": [225, 256, 715, 741], "t_a": [225, 256, 715, 741], "t_b": [225, 256, 715, 741], "t_c": [225, 256, 715, 741], "t_d": [225, 256, 715, 741], "womp": [225, 256, 715, 741], "t_": [225, 256, 715, 741], "t_struct": [225, 256, 715, 741], "step": [226, 256, 573, 604, 605], "unstackdirect": [226, 256], "pivot": [226, 256], "phase": [226, 256], "subject": [226, 256], "ascii_uppercas": [226, 256], "h": [226, 256, 263, 350, 353, 500, 538, 540, 543, 642, 1014, 1016, 1019], "x_0": [226, 256, 362, 363, 364, 642, 848, 849, 850, 1059], "x_1": [226, 256], "y_0": [226, 256, 362, 363, 364, 642, 848, 849, 850, 1059], "y_1": [226, 256], "z_0": [226, 256], "z_1": [226, 256], "syntact": [227, 256, 596, 597, 601, 606, 616, 617, 622, 634, 716, 741, 984, 1059], "sugar": [227, 256, 596, 597, 601, 606, 616, 617, 622, 634, 716, 741, 984, 1059], "coalesc": [227, 256, 538, 716, 741, 1014], "400": [227, 256, 716, 741, 956, 957, 959, 1059], "600": [227, 256, 716, 741, 744], "700": [227, 256, 716, 741], "new_df": [227, 256, 716, 741], "time_column": [228, 256], "frequenc": [228, 256], "forward_fil": [228, 256, 307, 310, 642], "varianc": [229, 256, 364, 398, 493, 564, 632, 642, 717, 741, 850, 888, 964, 1048, 1059], "grow": [230, 256], "is_not": [232, 256, 642, 719, 741], "not_c": [232, 256, 719, 741], "diff": [232, 256, 325, 329, 333, 335, 337, 342, 349, 423, 642, 719, 741, 807, 811, 818, 820, 823, 828, 835, 912, 1059], "_diff": [232, 256, 719, 741], "row_nr": [234, 256, 442, 485, 486, 488, 491, 492, 493, 642, 722, 741, 970, 1059], "named_agg": [236, 723], "_sum": [236, 723], "_mean_squar": [236, 723], "b_sum": [236, 723], "c_mean_squar": [236, 723], "sub": [238, 283, 284, 285, 642, 763, 764, 765], "triangl": [238, 725], "group_df": [238, 725], "deem": [239, 305, 584, 642, 726], "nr": [241, 250, 728, 737], "maxim": [243, 278, 642, 730, 758, 1059], "833333": [244, 731], "minim": [246, 279, 406, 500, 508, 642, 733, 759, 895, 932, 975, 1059], "overview": [256, 642, 653, 741, 1059, 1067], "frameinittyp": [256, 741], "variou": [256, 642, 741, 744, 1059], "entri": [256, 741, 1066], "mydatafram": 256, "notic": [256, 741, 1059], "df4": 256, "df5": 256, "df6": 256, "corr": 256, "drop_in_plac": 256, "drop_nul": [256, 266, 268, 316, 642, 741, 748, 749, 1059], "estimated_s": [256, 1059], "explod": [256, 373, 467, 480, 642, 741, 951, 1059], "find_idx_by_nam": 256, "fold": [256, 451, 579, 586, 587, 618], "frame_equ": [256, 347, 354], "groupby_rol": [256, 485, 486, 487, 488, 489, 491, 492, 493, 642, 675, 741], "hash_row": 256, "hstack": 256, "insert_at_idx": 256, "is_dupl": [256, 642, 1059], "is_empti": [256, 1059], "is_uniqu": [256, 642, 1059], "iter_slic": 256, "melt": [256, 741], "merge_sort": [256, 741], "n_uniqu": [256, 642, 1059], "pipe": [256, 642, 741], "quantil": [256, 473, 489, 642, 741, 945, 960, 1059], "replace_at_idx": 256, "select_seq": [256, 741], "shrink_to_fit": [256, 1059], "take_everi": [256, 642, 741, 1059], "to_dict": 256, "to_dummi": [256, 1059], "to_numpi": [256, 440, 642, 1059], "to_panda": [256, 1059], "to_struct": [256, 519], "unnest": [256, 482, 519, 520, 534, 535, 548, 642, 741, 922, 953, 1010, 1011, 1059], "unstack": 256, "with_columns_seq": [256, 741], "write_avro": 256, "write_databas": 256, "write_delta": 256, "write_excel": 256, "write_json": 256, "write_parquet": 256, "cumprod": [263, 642, 1059], "ghi": [263, 519, 642, 744, 995], "94": [264, 642], "map_alia": [265, 642], "to_uppercas": [265, 520, 642], "confus": [266, 391, 393, 642], "tt": [266, 642], "tf": [266, 268, 642], "ff": [266, 268, 642], "bitwis": [267, 466, 566, 567, 568, 569, 570, 642], "upcast": [269, 642], "skip_nul": [270, 642, 751, 1059], "pass_nam": [270, 642], "applystrategi": [270, 642], "thread_loc": [270, 642], "unknown": [270, 442, 518, 607, 642, 994], "stage": [270, 642], "code": [270, 288, 290, 291, 292, 497, 642, 683, 741, 971, 1059], "amount": [270, 642], "releas": [270, 642, 1067], "gil": [270, 642], "bug": [270, 440, 642, 685, 725, 741, 751, 1059], "discourag": [270, 642], "loop": [270, 642], "a_times_2": [270, 642], "approxim": [271, 572, 642, 741, 1067], "hyperloglog": [271, 572, 642, 741], "algorithm": [271, 572, 642, 741], "cardin": [271, 572, 642, 741], "invers": [272, 273, 274, 275, 276, 277, 642, 752, 753, 754, 755, 756, 757, 1059], "cosin": [272, 273, 303, 304, 440, 642, 752, 753, 786, 787, 1059], "570796": [272, 274, 642, 752, 754, 1059], "hyperbol": [273, 275, 277, 304, 504, 556, 642, 753, 755, 757, 787, 980, 1033, 1059], "sine": [274, 275, 440, 503, 504, 642, 754, 755, 979, 980, 1059], "881374": [275, 642, 755, 1059], "tangent": [276, 277, 555, 556, 642, 756, 757, 1032, 1033, 1059], "785398": [276, 574, 575, 642, 756, 1059], "arg_wher": [281, 642], "substr": [288, 291, 292, 512, 516, 528, 529, 533, 534, 535, 536, 744, 767, 770, 771, 988, 992, 1004, 1005, 1009, 1010, 1011, 1012], "ends_with": [288, 292, 512, 536, 744, 1012], "x00": [288, 290, 291, 292], "xff": [288, 290, 291, 292], "hex": [288, 289, 290, 291, 292, 514, 515, 527, 768, 769, 990, 991, 1003], "code_encoded_hex": [288, 290, 291, 292], "contains_ff": [288, 291, 292], "starts_with_ff": [288, 291, 292], "ends_with_ff": [288, 291, 292], "000000": [288, 290, 291, 292], "ffff00": [288, 290, 291, 292], "0000ff": [288, 290, 291, 292], "transferencod": [289, 290, 514, 515, 768, 769, 990, 991], "strict": [289, 295, 512, 514, 527, 538, 539, 540, 543, 642, 768, 773, 968, 988, 990, 1003, 1014, 1015, 1016, 1019, 1059], "base64": [289, 290, 514, 515, 768, 769, 990, 991], "anywher": [291, 292, 538, 539, 540, 1014, 1015, 1016], "complex": [293, 311, 558, 642, 772, 792, 1043, 1059], "frac": [293, 362, 363, 364, 505, 558, 642, 772, 848, 849, 850, 981, 1043, 1059], "deprec": [294, 538, 540, 567, 569, 573, 578, 588, 591, 609, 613, 619, 626, 630, 642, 673, 696, 741, 750, 1014, 1016, 1059], "supersed": [294, 642], "overflow": [295, 309, 310, 527, 551, 642, 773, 790, 791, 1003, 1028, 1059], "to_fram": [296, 347, 354, 538, 969, 970, 1010, 1011, 1014, 1059], "categoricalord": [297, 776], "lexic": [297, 744, 776, 777], "259921": [298, 642, 778, 1059], "587401": [298, 642], "foo_clip": [300, 301, 302, 642], "clip": [301, 302, 642, 783, 784, 1059], "543081": [304, 642, 787, 1059], "cumul": [306, 307, 308, 309, 310, 586, 587, 588, 589, 642, 788, 789, 790, 791, 1059], "a_revers": [306, 307, 308, 309, 310, 441, 481, 550, 642], "value_cummax": [307, 642], "value_cummax_all_fil": [307, 642], "value_cumsum": [310, 642], "value_cumsum_all_fil": [310, 642], "min_period": [311, 362, 363, 364, 484, 485, 486, 487, 488, 489, 491, 492, 493, 620, 621, 642, 792, 848, 849, 850, 955, 956, 957, 958, 959, 960, 962, 963, 964, 1059], "slide": [311, 642, 792, 1059], "realli": [311, 642, 792, 1059], "visit": [311, 642, 792, 1059], "label": [312, 473, 484, 485, 486, 487, 488, 489, 491, 492, 493, 642, 694, 741, 793, 945, 955, 956, 957, 958, 959, 960, 962, 963, 964, 1059], "left_clos": [312, 473, 642, 793, 945, 1059], "include_break": [312, 473, 642, 793, 945, 1059], "bin": [312, 473, 527, 566, 636, 642, 793, 864, 945, 1003, 1053, 1059], "discret": [312, 314, 359, 410, 423, 473, 642, 793, 795, 846, 864, 899, 912, 945, 1059], "endpoint": [312, 473, 485, 486, 487, 488, 489, 491, 492, 493, 642, 793, 945, 1059], "observ": [312, 362, 363, 364, 473, 642, 793, 848, 849, 850, 945, 1059], "fall": [312, 473, 483, 642, 793, 868, 945, 954, 1059], "radian": [313, 574, 642], "pi": [313, 642, 786, 979, 1032, 1059], "720": [313, 475, 642], "540": [313, 475, 642], "360": [313, 475, 642], "180": [313, 331, 345, 358, 475, 642], "null_behavior": [314, 410, 642, 795, 899, 1059], "nullbehavior": [314, 410, 642, 795, 899, 1059], "th": [314, 410, 423, 505, 642, 795, 899, 912, 981, 1059], "drop_nan": [317, 642, 1059], "utc": [318, 321, 326, 346, 538, 540, 744, 800, 803, 808, 832, 1014, 1016], "usual": [318, 800], "vari": [318, 591, 800, 1067], "rare": [318, 800], "countri": [318, 800], "switch": [318, 800], "samoa": [318, 800], "apia": [318, 800], "did": [318, 519, 800, 995], "2011": [318, 800], "dst_offset": [318, 354, 800, 840], "2012": [318, 800], "replace_time_zon": [318, 326, 804, 805, 837], "pacif": [318, 800], "11h": [318, 800], "13h": [318, 800], "lose": [319, 573, 801], "2001": [319, 324, 327, 328, 330, 331, 336, 338, 343, 344, 345, 347, 348, 352, 354, 355, 356, 357, 358, 485, 486, 488, 491, 492, 493, 538, 642, 801, 806, 809, 810, 812, 814, 815, 816, 817, 819, 821, 822, 824, 827, 829, 830, 831, 833, 834, 838, 840, 841, 842, 843, 844, 1014], "time_unit_m": [319, 801], "time_unit_n": [319, 801], "naiv": [320, 538, 540, 802, 1014, 1016], "compon": [320, 348, 538, 540, 594, 802, 834, 1014, 1016], "resolv": 320, "tm": [320, 744], "456000": [320, 802], "101000": 320, "456": [320, 744, 802, 1037, 1059], "07": [320, 346, 347, 354, 538, 591, 600, 744, 802, 806, 832, 842, 1014], "101": [320, 527, 1003, 1067], "d1": 320, "d2": 320, "d3": 320, "europ": [321, 326, 346, 354, 803, 808, 832, 840], "london": [321, 326, 346, 354, 803, 808, 832, 840], "gmt": [321, 326, 346, 354, 803, 808, 832, 840], "bst": [321, 326, 346, 354, 803, 808, 832, 840], "weekdai": [324, 344], "ordinal_dai": [324, 356], "day_of_month": [324, 344, 356], "day_of_year": [324, 344, 356], "356": [324, 344, 356], "357": [324, 344, 356], "358": [324, 344, 356], "359": [324, 344, 356], "days_diff": 325, "base_utc_offset": [326, 808], "26": [326, 808], "0m": [326, 808], "epochtimeunit": [327, 600, 809], "unix": [327, 600, 809], "epoch_n": [327, 809], "epoch_": [327, 809], "978307200000000": [327, 352, 809, 838], "978307200": [327, 809], "978393600000000": [327, 352, 809, 838], "978393600": [327, 809], "978480000000000": [327, 352, 809, 838], "978480000": [327, 809], "hours_diff": 329, "leap": [330, 343, 591, 812, 829], "2002": [330, 331, 343, 345, 358, 812, 829, 844], "iso": [331, 355, 356, 813, 841, 842], "2006": [331, 343, 829], "2004": [331, 343, 829], "2005": [331, 343, 829], "1_001": [332, 333, 335, 342], "002": [332, 333, 335, 342, 594, 818, 820, 828], "003": [332, 333, 335, 342], "3000": 332, "997": [332, 333, 335, 342], "997000": 332, "998": [332, 333, 335, 342], "998000": 332, "999": [332, 333, 335, 342, 744, 1067], "999000": [332, 744], "microseconds_diff": 333, "milliseconds_diff": 335, "minutes_diff": 337, "1440": [337, 823], "think": [339, 340, 825, 826], "vectoris": [339, 340, 825, 826], "tseri": [339, 340, 825, 826], "monthend": [339, 825], "rollforward": [339, 825], "monthbegin": [340, 826], "rollback": [340, 826], "nanoseconds_diff": 342, "1000000": [342, 546, 828], "minu": [343, 829], "dictat": [343, 829], "date_plus_1i": [343, 829], "1y2mo": [343, 829], "date_min": 343, "1998": [343, 829], "1999": [343, 744, 829], "2003": [343, 600, 829], "ordin": [344, 476, 642, 830, 947, 1059], "366": [344, 830], "use_earliest": [346, 354, 593, 832, 840], "convert_time_zon": [346, 832], "ambigu": [346, 354, 593, 832, 840], "earliest": [346, 354, 593, 832, 840], "london_timezon": [346, 832], "amsterdam": [346, 832], "london_to_amsterdam": [346, 832], "cet": [346, 832], "cest": [346, 832], "dst": [346, 832], "ts_local": [346, 832], "brussel": [346, 832], "half": [347, 362, 363, 364, 642, 833, 848, 849, 850, 1059], "225": [347, 354], "10m": [347, 354, 833, 840], "milli": [348, 834], "micro": [348, 834], "456789": [348, 744], "654321": 348, "111110": 348, "765431": 348, "sec": [348, 1067], "11111": 348, "seconds_diff": 349, "to_str": [350, 836], "datetime_str": [350, 353], "timestamp_n": [352, 838], "timestamp_m": 352, "978307200000": 352, "978393600000": 352, "978480000000": 352, "strftime": [353, 839], "offset_bi": [354, 840], "15m": [354, 840], "53": [355, 841], "time_unit_u": [357, 843], "32971": [357, 843], "32974": [357, 843], "32976": [357, 843], "718281828459045": [359, 435, 642, 846, 924, 1059], "pk": [359, 642, 846, 1059], "probabl": [359, 473, 642, 846, 945, 1059], "459148": [359, 642], "754888": [359, 642], "eq": [361, 642, 1059], "span": [362, 363, 364, 642, 848, 849, 850, 1059], "half_lif": [362, 363, 364, 642, 848, 849, 850, 1059], "adjust": [362, 363, 364, 505, 642, 848, 849, 850, 981, 1059], "ignore_nul": [362, 363, 364, 642, 848, 849, 850, 1049, 1059], "exponenti": [362, 363, 364, 366, 470, 642, 848, 849, 850, 851, 1059], "weight": [362, 363, 364, 484, 485, 486, 487, 488, 489, 491, 492, 493, 505, 642, 848, 849, 850, 955, 956, 957, 958, 959, 960, 962, 963, 964, 981, 1059], "decai": [362, 363, 364, 642, 848, 849, 850, 1059], "term": [362, 363, 364, 523, 526, 642, 848, 849, 850, 999, 1002, 1059], "mass": [362, 363, 364, 642, 848, 849, 850, 1059], "gamma": [362, 363, 364, 642, 848, 849, 850, 1059], "foral": [362, 363, 364, 642, 848, 849, 850, 1059], "geq": [362, 363, 364, 642, 848, 849, 850, 1059], "theta": [362, 363, 364, 642, 848, 849, 850, 1059], "life": [362, 363, 364, 642, 848, 849, 850, 1059], "exp": [362, 363, 364, 642, 848, 849, 850, 1059], "ln": [362, 363, 364, 642, 848, 849, 850, 1059], "smooth": [362, 363, 364, 642, 848, 849, 850, 1059], "factor": [362, 363, 364, 557, 642, 848, 849, 850, 1042, 1059], "leq": [362, 363, 364, 642, 848, 849, 850, 1059], "imbal": [362, 363, 364, 642, 848, 849, 850, 1059], "ew": [362, 363, 364, 642, 848, 849, 850, 1059], "w_i": [362, 363, 364, 642, 848, 849, 850, 1059], "recurs": [362, 363, 364, 642, 848, 849, 850, 1059], "y_t": [362, 363, 364, 642, 848, 849, 850, 1059], "y_": [362, 363, 364, 642, 848, 849, 850, 1059], "x_t": [362, 363, 364, 642, 848, 849, 850, 1059], "x_2": [362, 363, 364, 642, 848, 849, 850, 1059], "428571": [362, 642], "bia": [363, 364, 398, 490, 505, 642, 849, 850, 888, 961, 981, 1059], "unbias": [363, 364, 642, 849, 850, 1059], "963624": [363, 642, 849, 1059], "928571": [364, 642, 850, 1059], "wildcard": [365, 580, 586, 587, 598, 618, 642], "regex": [365, 448, 512, 513, 516, 518, 519, 520, 528, 529, 536, 596, 626, 642, 744, 988, 989, 992, 994, 995, 996, 1004, 1005, 1012], "aa": [365, 512, 596, 642, 988], "ba": [365, 596, 642, 744], "cc": [365, 596, 642], "718282": [366, 642], "389056": [366, 642], "54": [366, 642, 1067], "59815": [366, 642], "expand": [367, 447, 448, 479, 642, 852, 1059], "pythonliter": [368, 609, 613, 642, 854, 929, 932, 1059], "extrem": [368, 642, 854, 1059], "group_col": [371, 565, 642], "g1": [371, 565, 642], "g2": [371, 565, 642], "lt": [371, 565, 642, 1059], "gte": [371, 565, 642], "exprlistnamespac": [373, 642], "divis": [375, 559, 642], "truediv": [375, 642], "9774092659964970114": [380, 642], "13614470193936745724": [380, 642], "1101441246220388612": [380, 642], "11638928888656214026": [380, 642], "13382926553367784577": [380, 642], "cumsum": [383, 549, 589, 642, 678, 741, 887, 1059], "interpolationmethod": [384, 642, 867, 1059], "regrid": [384, 642], "grid": [384, 642], "df_original_grid": [384, 642], "grid_point": [384, 642], "df_new_grid": [384, 642], "conflat": [385, 642], "finit": [387, 559, 583, 642, 872, 1059], "primit": [389, 642, 1040, 1059], "optional_memb": [389, 642, 875, 1059], "infinit": [390, 559, 642, 876, 1059], "_isnan": [391, 642], "b_isnan": [391, 642], "negat": [392, 642], "_is_not_nan": [393, 642], "b_is_not_nan": [393, 642], "_not_nul": [394, 642], "a_not_nul": [394, 642], "b_not_nul": [394, 642], "_isnul": [395, 642], "a_isnul": [395, 642], "b_isnul": [395, 642], "constraint": [397, 471, 550, 642], "chain": [397, 471, 550, 633, 642], "undo": [397, 454, 471, 550, 642], "333333": [397, 642, 941, 964, 1059], "fisher": [398, 505, 642, 888, 981, 1059], "fourth": [398, 642, 888, 1059], "subtract": [398, 549, 642, 888, 1059], "distribut": [398, 505, 642, 888, 981, 1059], "elimin": [398, 642, 888, 1059], "bias": [398, 505, 642, 888, 981, 1059], "scipi": [398, 505, 642, 888, 981, 1059], "stat": [398, 505, 642, 888, 981, 1059], "153061": [398, 642], "sublist": [405, 406, 408, 410, 413, 414, 415, 416, 417, 423, 428, 431, 432, 433, 875, 894, 895, 897, 899, 902, 903, 904, 905, 906, 912, 917, 920, 921, 922, 1059], "membership": [408, 897], "listcol": 409, "number_of_two": 409, "blindli": [411, 900], "worth": [411, 900], "enough": [411, 505, 642, 900, 981, 1059], "concat_list": [411, 595, 900], "rank": [411, 583, 595, 642, 900, 1059], "exprnamespac": 412, "flat": [412, 480, 642, 901, 951, 1059], "symmetr": [425, 914], "sdiff": 425, "taken": [428, 532, 917, 1008], "null_on_oob": [432, 921], "cheaper": [432, 921], "n_field_strategi": [433, 922], "tostructstrategi": [433, 922], "first_non_nul": [433, 922], "max_width": [433, 922], "field_0": [433, 922], "field_1": [433, 922], "field_n": [433, 922], "pre": [433, 616, 619, 634], "n0": 433, "n1": 433, "logarithm": [435, 436, 437, 642, 924, 925, 926, 1059], "584963": [435, 642], "30103": [436, 642], "60206": [436, 642], "natur": [437, 642, 926, 1059], "plu": [437, 642, 926, 1059], "693147": [437, 642], "098612": [437, 642], "386294": [437, 642], "lowest": [438, 642], "9223372036854775808": [438, 642], "agg_list": [440, 642], "elementwis": [440, 484, 485, 486, 488, 492, 642, 955, 956, 957, 958, 959, 960, 962, 963, 964, 1059], "third": [440, 642], "parti": [440, 642], "book": [440, 642], "map_dict": [440, 642, 1059], "argmax": [440, 642], "b_revers": [441, 481, 550, 642], "rstrip": [441, 642], "_revers": [441, 481, 550, 642], "remap": [442, 642, 928, 1059], "lookup": [442, 642, 928, 1059], "country_code_dict": [442, 642], "ca": [442, 642], "canada": [442, 642], "de": [442, 642], "germani": [442, 642], "fr": [442, 642], "franc": [442, 642], "country_cod": [442, 642], "rest": [442, 642], "exprmetanamespac": [446, 449], "computeerror": [450, 527, 653, 1003], "tree": 453, "keep_nam": [454, 642], "modulu": [457, 642], "xlog2": [459, 470, 642], "poison": [461, 462, 642, 937, 938, 1059], "nanmax": [461, 462, 642, 937, 938, 1059], "wherea": [461, 462, 591, 642, 677, 684, 741, 937, 938, 1059], "inequ": [463, 642], "ne": [464, 642, 1059], "more_expr": [467, 567, 569, 576, 579, 581, 582, 588, 609, 613, 626, 642], "mapping_strategi": [467, 642], "windowmappingstrategi": [467, 642], "group_to_row": [467, 642], "outcom": [467, 642], "group_dtyp": [467, 642], "warn": [467, 642], "flatten": [467, 642], "_max": [467, 642], "c_max": [467, 642], "_min": [467, 642], "c_min": [467, 642], "percent": [468, 642, 941, 1059], "090909": [468, 642], "extract_numb": [469, 642], "digit": [469, 494, 519, 546, 642, 965, 989, 995, 1022, 1059, 1067], "scale_negative_even": [469, 642], "expon": [470, 642, 1059], "reverse_": [471, 642], "reverse_a": [471, 642], "reverse_b": [471, 642], "allow_dupl": [473, 642, 945, 1059], "prob": [473, 642, 945, 1059], "lo": [473, 642], "566371": [475, 642], "424778": [475, 642], "283185": [475, 642], "141593": [475, 642, 752, 1059], "rankmethod": [476, 642, 947, 1059], "ti": [476, 642, 947, 1059], "competit": [476, 642, 947, 1059], "highest": [476, 562, 583, 642, 741, 947, 1059], "immedi": [476, 573, 577, 591, 592, 604, 605, 616, 619, 625, 630, 631, 634, 642, 947, 1059], "64bit": [478, 642, 949, 1059], "safe": [478, 538, 540, 642, 949, 1014, 1016, 1040, 1059], "fruits_revers": [481, 642], "cars_revers": [481, 642], "rle": [483, 642, 954, 1059], "themselv": [483, 642, 954, 1059], "a_r": [483, 642], "ab_r": [483, 642], "window_s": [484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 620, 621, 642, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 1059], "rolling_min": [484, 642, 955, 1059], "rolling_max": [484, 642, 955, 1059], "rolling_mean": [484, 642, 955, 1059], "rolling_sum": [484, 642, 955, 1059], "multipli": [484, 485, 486, 488, 491, 492, 493, 642, 955, 956, 957, 958, 959, 960, 962, 963, 964, 1059], "358899": [484, 642], "041452": [484, 642], "567764": [484, 642], "travers": [485, 486, 488, 492, 642, 956, 957, 959, 962, 963, 964, 1059], "vector": [485, 486, 488, 492, 642, 956, 957, 959, 962, 963, 964, 1059], "5h": [485, 486, 487, 488, 489, 491, 492, 493, 642], "df_tempor": [485, 486, 488, 491, 492, 493, 642], "closur": [485, 486, 491, 492, 493, 642], "rolling_row_max": [485, 642], "2h": [485, 486, 488, 491, 492, 493, 642], "rolling_row_mean": [486, 642], "rolling_row_min": [488, 642], "625": [489, 642], "skew": [490, 642, 961, 1059], "381802": [490, 642, 961, 1059], "47033": [490, 642, 961, 1059], "38180177416060584": [490, 642, 961, 1059], "47033046033698594": [490, 642, 961, 1059], "433013": [491, 642, 709, 741], "rolling_row_std": [491, 642], "rolling_row_sum": [492, 642], "39": [492, 600, 642], "63": [492, 642], "69": [492, 642], "1875": [493, 642, 717, 741], "rolling_row_var": [493, 642], "fixed_se": [495, 501, 642], "increment": [495, 501, 642], "schedul": [495, 501, 642], "searchsortedsid": [496, 642, 967, 1059], "leftmost": [496, 642, 967, 1059], "rightmost": [496, 642, 967, 1059], "six": [496, 642], "extrema": [500, 642, 975, 1059], "112": [500, 642, 1067], "129": [500, 642], "i8": [500, 616, 619, 634, 642, 795, 952, 1046, 1059], "8589934592": [500, 642], "1073741824": [500, 642], "content": [501, 563, 642, 977, 1059], "175201": [504, 642, 980, 1059], "about": [505, 512, 518, 519, 528, 642, 981, 988, 994, 995, 1004, 1059, 1067], "unimod": [505, 642, 981, 1059], "skewtest": [505, 642, 981, 1059], "speak": [505, 642, 981, 1059], "g_1": [505, 642, 981, 1059], "m_3": [505, 642, 981, 1059], "m_2": [505, 642, 981, 1059], "m_i": [505, 642, 981, 1059], "sum_": [505, 642, 981, 1059], "texttt": [505, 642, 981, 1059], "k_3": [505, 642, 981, 1059], "k_2": [505, 642, 981, 1059], "sqrt": [505, 574, 575, 642, 981, 1059], "343622": [505, 642], "value1": [508, 642], "value2": [508, 642], "attain": [508, 642], "414214": [509, 642, 984, 1059], "sensit": [512, 519, 528, 988, 995, 1004], "ilmsuxu": [512, 518, 519, 528, 988, 994, 995, 1004], "default_match": 512, "insensitive_match": 512, "section": [512, 518, 519, 528, 988, 994, 995, 1004], "crab": [512, 988], "dog": [512, 542, 545, 582, 988, 1018, 1021], "rab": [512, 988], "success": [513, 519, 989, 995], "overlap": [513, 519, 989, 995], "captur": [513, 518, 519, 520, 989, 994, 995, 996], "123": [513, 519, 529, 744, 989, 995, 1005, 1037, 1059], "bla": [513, 519, 989, 995], "asd": [513, 519, 989, 995], "678": [513, 519, 989, 995], "910t": [513, 519, 989, 995], "count_digit": 513, "666f6f": [515, 991], "626172": [515, 991], "mango": [516, 536, 992, 1012], "go": [516, 992], "has_suffix": 516, "group_index": [518, 994], "nthose": [518, 994], "nodd": [518, 994], "nthe": [518, 994], "url": [518, 520, 994, 996], "vote": [518, 520, 994, 996], "ballon_dor": [518, 520, 994, 996], "404": [518, 520, 994, 996], "ref": [518, 520, 994, 996], "candid": [518, 520, 994, 996], "messi": [518, 520, 994, 996], "ronaldo": [518, 994], "email": [519, 995], "real": [519, 995], "some_account": [519, 995], "somewher": [519, 995], "net": [519, 995], "jkl": [519, 995], "uvw": [519, 995], "co": [519, 642, 995, 1059], "uk": [519, 995], "address": 519, "xi": [519, 995], "insensit": [519, 528, 744, 988, 995, 1004], "quantifi": [519, 995], "email_part": [519, 995], "extracted_nr": 519, "910": [519, 995], "unnam": [520, 996], "weghorst": [520, 996], "candi": 520, "json_path_match": [521, 997], "jsonpath": [521, 522, 997, 998], "json_path": [522, 998], "json_val": [522, 998], "n_char": [523, 999], "caf\u00e9": [523, 526, 999, 1002], "345": [523, 526, 999, 1002], "\u6771\u4eac": [523, 526, 999, 1002], "nchar": [523, 526], "fill_char": [524, 530, 1000, 1006], "justifi": [524, 530, 1000, 1006], "pad": [524, 530, 546, 1000, 1006, 1022], "cow": [524, 530, 1000, 1006], "monkei": [524, 530, 1000, 1006], "hippopotamu": [524, 530, 1000, 1006], "strip": [525, 531, 1001, 1007], "tworld": [525, 1001, 1013], "wod": [525, 1001], "rld": [525, 537, 1001], "radix": [527, 1003], "parseerror": [527, 1003], "becom": [527, 1003], "silent": [527, 1003], "110": [527, 1003], "010": [527, 1003], "fa1e": [527, 1003], "ff00": [527, 1003], "cafe": [527, 1003], "64030": [527, 1003], "65280": [527, 1003], "51966": [527, 1003], "replace_al": [528, 1004], "citi": 528, "philadelphia": 528, "season": 528, "spring": 528, "summer": 528, "autumn": 528, "winter": 528, "weather": [528, 1004], "raini": [528, 1004], "sunni": [528, 1004], "cloudi": 528, "snowi": 528, "foggi": [528, 1004], "123abc": [528, 1004], "abc456": [528, 1004], "abcabc": [529, 1005], "123a123": [529, 1005], "bc": [529, 626, 1005], "trail": [531, 537, 1007, 1013], "oldw": 531, "he": 531, "subslic": [532, 1008], "pear": [532, 1008], "papaya": [532, 1008], "dragonfruit": [532, 1008], "s_slice": 532, "ear": [532, 1008], "aya": [532, 1008], "uit": [532, 1008], "ya": [532, 1008], "onf": [532, 1008], "a_1": [534, 1010, 1036, 1059], "d_4": [534, 1010], "rename_field": [534, 535, 1010, 1011], "first_part": [534, 535, 1010, 1011], "second_part": [534, 535, 1010, 1011], "remaind": [535, 1011], "app": [536, 1012], "has_prefix": 536, "nworld": 537, "ow": 537, "hell": [537, 1013], "polarstemporaltyp": [538, 1014], "introduc": [538, 539, 540, 1014, 1015, 1016], "penalti": [538, 539, 540, 1014, 1015, 1016], "clean": [538, 539, 540, 1014, 1015, 1016], "beforehand": [538, 539, 540, 1014, 1015, 1016], "certainli": [538, 539, 540, 1014, 1015, 1016], "3f": [538, 540, 1014, 1016], "00z": [538, 540, 1014, 1016], "sun": [538, 1014], "jul": [538, 1014], "34": [538, 1014], "inference_length": [541, 1017], "3420": [541, 1017], "120134": [541, 1017], "3212": [541, 1017], "143": [541, 1017, 1067], "lowercas": [542, 1018], "variant": [542, 544, 545], "titlecas": [544, 1020], "sing": [544, 1020], "welcom": [544, 1020], "THERE": [544, 1020], "NO": [544, 744, 1020], "There": [544, 1020], "uppercas": [545, 1021], "100000": 546, "0010": 546, "0001": 546, "00000": 546, "00001": 546, "cd": [547, 548], "struct_col": [547, 548], "www": 548, "xxx": 548, "yyi": 548, "zzz": 548, "obvious": 548, "structfieldnotfounderror": [548, 653], "761594": [556, 642, 1033, 1059], "replic": [557, 642, 1042, 1059], "vals_phys": [557, 642], "floordiv": [559, 642], "ieee": [559, 642], "754": [559, 642], "mathemat": [559, 595, 642], "undefin": [559, 642], "On": [559, 642], "operand": [559, 642], "infin": [559, 642], "value_count": [561, 642, 1059], "9223372036854775807": [562, 642], "multithread": [563, 642], "binary_str": [566, 642], "zfill": [566, 642], "250": [566, 642, 957, 1059, 1067], "bin_x": [566, 642], "bin_i": [566, 642], "xor_xi": [566, 642], "bin_xor_xi": [566, 642], "00001010": [566, 642], "00000001": [566, 642], "00001011": [566, 642], "00001000": [566, 642], "00000010": [566, 642], "11111010": [566, 642], "00000011": [566, 642], "249": [566, 642], "11111001": [566, 642], "01000010": [566, 642], "00000100": [566, 642], "70": [566, 642], "01000110": [566, 642], "AND": [567, 568, 744, 1040, 1059], "any_horizont": 569, "returns_scalar": 571, "product_a": 571, "49": 571, "arctan": [574, 575, 642, 1059], "angl": [574, 575], "plane": [574, 575], "rai": [574, 575], "tworoottwo": [574, 575], "arctan2d": 574, "atan2d": [574, 575], "atan2": [574, 575], "135": [574, 575], "356194": [574, 575], "arctan2": 575, "arg_tru": [577, 642, 1059], "more_nam": 580, "hamburg": 580, "lag": 581, "mimic": 581, "a_lag_": 581, "a_rol": 581, "swim": 582, "walk": 582, "full_sent": 582, "correlationmethod": 583, "propagate_nan": 583, "spearman": 583, "544705": 583, "covari": [585, 621], "acc": [586, 587, 598, 618], "include_init": 586, "accumul": [586, 587, 598, 618], "fn": [586, 587, 598, 618], "new_valu": [586, 587, 598, 618], "cumreduc": 586, "cumsum_horizont": 588, "1h30m25": [591, 592, 630, 631], "further": [591, 592, 1041, 1059], "granular": 591, "finer": 591, "permut": 591, "februari": 591, "febrari": 591, "28th": 591, "march": 591, "31st": 591, "approach": 591, "prior": 591, "began": 591, "januari": 591, "1mo_satur": 591, "month_end": 591, "routin": 591, "1985": 591, "america": 591, "new_york": 591, "est": 591, "999999": [593, 629, 630, 631, 744], "tbl_width_char": 594, "120": 594, "add_week": 594, "add_dai": 594, "add_second": 594, "add_milli": 594, "add_hour": 594, "a_b_doubl": 595, "f_string": 599, "placehold": 599, "hello_": 599, "_world": 599, "foo_": 599, "_bar_": 599, "foo_a_bar_1": 599, "foo_b_bar_2": 599, "foo_c_bar_3": 599, "epoch": 600, "timestep": 600, "1666683077": 600, "1666683099": 600, "12345": [600, 779, 859, 965, 1059], "12346": 600, "agg_group": [601, 642], "polarsintegertyp": [604, 605], "allow_object": 607, "valueexcept": 607, "test_func": 608, "max_horizont": 609, "min_horizont": [613, 622], "power": [623, 1059], "a_a": 623, "a_txt": 623, "605551": 624, "605551275463989": 624, "my_struct": 625, "afterward": 633, "own": [633, 1067], "isn": 633, "thens": 633, "elif": 633, "pick": 633, "arr": [635, 1040, 1051, 1059], "sometim": 641, "and_": 642, "approx_n_uniqu": [642, 741], "arcco": [642, 1059], "arccosh": [642, 1059], "arcsin": [642, 1059], "arcsinh": [642, 1059], "arctanh": [642, 1059], "arg_max": [642, 1059], "arg_min": [642, 1059], "arg_sort": [642, 1059], "arg_uniqu": [642, 1059], "backward_fil": 642, "cbrt": [642, 1059], "clip_max": [642, 1059], "clip_min": [642, 1059], "cosh": [642, 1059], "cumcount": 642, "cummax": [642, 1059], "cummin": [642, 1059], "cumulative_ev": [642, 1059], "cut": [642, 1059], "entropi": [642, 1059], "eq_miss": [642, 1059], "ewm_mean": [642, 1059], "ewm_std": [642, 1059], "ewm_var": [642, 1059], "extend_const": [642, 1059], "from_json": [642, 741], "ge": [642, 1059], "gt": [642, 1059], "implod": [642, 1059], "inspect": [642, 741], "is_between": [642, 1059], "is_finit": [642, 1059], "is_first": [642, 1059], "is_in": [642, 1059], "is_infinit": [642, 1059], "is_nan": [642, 1059], "is_not_nan": [642, 1059], "is_not_nul": [642, 1059], "kurtosi": [642, 1059], "le": [642, 1059], "log10": [642, 1059], "log1p": [642, 1059], "mod": 642, "mul": 642, "nan_max": [642, 1059], "nan_min": [642, 1059], "ne_miss": [642, 1059], "or_": 642, "pct_chang": [642, 1059], "pow": [642, 1059], "qcut": [642, 1059], "reinterpret": [642, 1059], "repeat_bi": 642, "rle_id": [642, 1059], "rolling_appli": [642, 1059], "rolling_median": [642, 1059], "rolling_quantil": [642, 1059], "rolling_skew": [642, 1059], "rolling_std": [642, 1059], "rolling_var": [642, 1059], "search_sort": [642, 1059], "shrink_dtyp": [642, 1059], "sin": [642, 1059], "sinh": [642, 1059], "sort_bi": 642, "tan": [642, 1059], "to_phys": [642, 1059], "unique_count": [642, 1059], "xor": 642, "expos": 653, "miscellan": 653, "arrowerror": 653, "columnnotfounderror": 653, "duplicateerror": 653, "invalidoperationerror": 653, "nodataerror": 653, "polarspanicerror": 653, "schemaerror": 653, "schemafieldnotfounderror": 653, "shapeerror": 653, "parametr": 653, "build_info": 653, "get_index_typ": 653, "show_vers": 653, "threadpool_s": 653, "sqlcontext": [653, 1066], "hit": [657, 741], "node": [657, 678, 685, 689, 694, 697, 741], "huge": [660, 741], "saver": [660, 741], "snippet": [664, 741], "purpos": [668, 741], "influenc": [668, 685, 741], "deseri": [673, 696, 702, 741], "lazygroupbi": [674, 675, 676, 741], "other_lf": [680, 741], "validate_output_schema": [685, 741], "streamabl": [685, 689, 741], "past": [685, 741], "paramount": [685, 741], "elig": [685, 741], "invari": [685, 741], "upheld": [685, 741], "prune": [685, 741], "show_plot": [694, 741], "truncate_nod": [694, 741], "figsiz": [694, 706, 741], "gantt": [694, 741], "plot": [694, 706, 741], "groupby_partit": [694, 741], "470": [694, 741], "475": [694, 741], "1964": [694, 741], "swap": [697, 741], "localproject": [702, 741], "dataframescan": [702, 741], "output_schema": [702, 741], "output_path": [706, 741], "raw_output": [706, 741], "figur": [706, 741], "290994": [709, 741], "118034": [709, 741], "extern": [721, 741], "lf_other": [721, 741], "afoo": [721, 741], "cfoo": [721, 741], "train_lf": [721, 741], "feature_0": [721, 741], "feature_1": [721, 741], "test_lf": [721, 741], "_train": [721, 741], "feature_0_train": [721, 741], "opaqu": 725, "idiomat": 725, "my_column": 725, "lf5": 741, "lf6": 741, "explain": 741, "read_json": 741, "sink_ipc": 741, "sink_parquet": 741, "with_context": 741, "intuit": 744, "relat": 744, "broadcast": 744, "emploi": 744, "complement": 744, "plenti": 744, "cde": 744, "fgg": 744, "jjk": 744, "lmn": 744, "opp": 744, "qqr": 744, "by_dtyp": 744, "as_expr": 744, "dispatch": 744, "selectortyp": 744, "2024": 744, "1_234_500": 744, "5_000_555": 744, "1234500": 744, "5000555": 744, "2010": 744, "4_500_000": 744, "4500000": 744, "3265500": 744, "by_nam": 744, "zap": 744, "tstamp_tokyo": 744, "987654": 744, "123465": 744, "tstamp_utc": 744, "2025": 744, "666000": 744, "tstamp": 744, "600000": 744, "123000": 744, "666": 744, "td1": 744, "123456": 744, "987000": 744, "td2": 744, "td3": 744, "2m": [744, 822], "456m": 744, "7d": 744, "456789\u00b5": 744, "18d": 744, "999999\u00b5": 744, "23h": 744, "987m": 744, "14d": 744, "16h": 744, "39m": 744, "21d": 744, "456001\u00b5": 744, "is_selector": 744, "obj": 744, "selector_column_nam": 744, "colz": [744, 1067], "include_categor": 744, "set_ord": [744, 777], "2345": 744, "3456": 744, "append_chunk": [750, 1059], "behav": [750, 1059], "super": [750, 1059], "292432": [753, 1059], "549306": [757, 1059], "catnamespac": 774, "56789": [779, 859, 965, 1059], "901234": [779, 859, 965, 1059], "1232e": [786, 1059], "break_point_label": [793, 945, 1059], "break_point": [793, 864, 945, 1059], "category_label": [793, 945, 1059], "breakpoint": [793, 945, 1059], "quick": [794, 1059, 1067], "series_num": [794, 1059], "581139": [794, 1059], "series_str": [794, 1059], "datetimeindex": [796, 1059], "datetimenamespac": 799, "ser": [800, 804, 805, 808, 837, 840], "kathmandu": [804, 805, 837], "0545": [804, 805, 837], "500m": [817, 819, 827, 834], "500000": 817, "500000000": 827, "date_minus_1y_2mon": 829, "165": [833, 840], "series_equ": [833, 840, 1059], "timestamp_u": 838, "978307200000000000": 838, "978393600000000000": 838, "978480000000000000": 838, "005": [846, 1059], "06293300616044681": [846, 1059], "65": [846, 1059], "8568409950394724": [846, 1059], "4000000": [847, 1059], "814697265625": [847, 1059], "bitmask": [861, 1059], "swiftli": [861, 1059], "10734580197236529959": [862, 1059], "3022416320763508302": [862, 1059], "13756996518000038261": [862, 1059], "bin_count": [864, 1059], "occurr": [864, 1059], "a_count": [864, 1059], "listnamespac": 891, "field_2": 922, "n00": 922, "n01": 922, "n02": 922, "2147483648": [927, 1059], "iso3166": [928, 1059], "tur": [928, 1020, 1059], "jpn": [928, 1059], "nld": [928, 1059], "country_lookup": [928, 1059], "japan": [928, 1059], "t\u00fcrkiy": [928, 1059], "netherland": [928, 1059], "unrecognis": [928, 1059], "unspecifi": [928, 1059], "country_nam": [928, 1059], "166667": [941, 1059], "142857": [941, 1059], "peak": [942, 943, 1059], "nanstd": [955, 1059], "858612": [955, 1059], "200": [956, 957, 959, 1059], "150": [957, 1059], "350": [957, 1059], "450": [957, 1059], "dev": [962, 1059], "527525": [962, 1059], "57": [965, 1059, 1067], "frequent": [969, 970, 1059], "mutat": [970, 1059], "2246e": [979, 1032, 1059], "stringnamespac": 986, "orld": 1007, "6331e16": [1032, 1059], "lib": [1035, 1059], "int64arrai": [1035, 1059], "a_2": [1036, 1059], "a_3": [1036, 1059], "s_from_str_repr": [1038, 1059], "zero_copy_onli": [1040, 1059], "writabl": [1040, 1059], "complet": [1040, 1059], "presenc": [1040, 1059], "immut": [1040, 1059], "127": [1046, 1059], "seriesview": [1049, 1059], "arraylik": 1059, "dtype_if_empti": 1059, "position": 1059, "scenario": 1059, "chunk_length": 1059, "get_chunk": 1059, "has_valid": 1059, "hist": 1059, "is_boolean": 1059, "is_float": 1059, "is_integ": 1059, "is_numer": [1059, 1067], "is_sort": 1059, "is_tempor": 1059, "is_utf8": 1059, "new_from_index": 1059, "peak_max": 1059, "peak_min": 1059, "set_at_idx": 1059, "two_a": 1066, "__enter__": 1066, "__exit__": 1066, "exc_typ": 1066, "baseexcept": 1066, "exc_val": 1066, "exc_tb": 1066, "tracebacktyp": 1066, "guid": 1067, "easi": 1067, "machin": 1067, "xdist": 1067, "significantli": 1067, "hardwar": 1067, "setup": 1067, "numeric_dtyp": 1067, "null_probabililti": 1067, "test_numer": 1067, "col0": 1067, "col4": 1067, "29096": 1067, "485": 1067, "2147483647": 1067, "8257e14": 1067, "7508": 1067, "37338": 1067, "7264": 1067, "321": 1067, "16996": 1067, "121": 1067, "361": 1067, "63204": 1067, "1443e235": 1067, "conform": 1067, "ascii_lett": 1067, "id_char": 1067, "alphabet": 1067, "price": 1067, "min_valu": 1067, "max_valu": 1067, "test_price_calcul": 1067, "a101": 1067, "8nin": 1067, "qhoo": 1067, "714": 1067, "544": 1067, "i0e0": 1067, "0000": 1067, "test_miscellan": 1067, "235": 1067, "87": 1067, "186": 1067, "174": 1067, "179": 1067, "213": 1067, "221": 1067, "86": 1067, "255": 1067}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [36, 0, 1, "", "DataType"], [37, 0, 1, "", "Date"], [38, 0, 1, "", "Datetime"], [39, 0, 1, "", "Decimal"], [40, 0, 1, "", "Duration"], [41, 0, 1, "", "Float32"], [42, 0, 1, "", "Float64"], [43, 0, 1, "", "Int16"], [44, 0, 1, "", "Int32"], [45, 0, 1, "", "Int64"], [46, 0, 1, "", "Int8"], [49, 0, 1, "", "List"], [50, 0, 1, "", "Null"], [51, 0, 1, "", "Object"], [1066, 0, 1, "", "SQLContext"], [58, 0, 1, "", "StringCache"], [59, 0, 1, "", "Struct"], [60, 0, 1, "", "Time"], [61, 0, 1, "", "UInt16"], [62, 0, 1, "", "UInt32"], [63, 0, 1, "", "UInt64"], [64, 0, 1, "", "UInt8"], [65, 0, 1, "", "Unknown"], [66, 0, 1, "", "Utf8"], [67, 4, 1, "", "align_frames"], [567, 4, 1, "", "all"], [568, 4, 1, "", "all_horizontal"], [569, 4, 1, "", "any"], [570, 4, 1, "", "any_horizontal"], [571, 4, 1, "", "apply"], [572, 4, 1, "", "approx_n_unique"], [573, 4, 1, "", "arange"], [574, 4, 1, "", "arctan2"], [575, 4, 1, "", "arctan2d"], [576, 4, 1, "", "arg_sort_by"], [577, 4, 1, "", "arg_where"], [578, 4, 1, "", "avg"], [72, 4, 1, "", "build_info"], [579, 4, 1, "", "coalesce"], [580, 4, 1, "", "col"], [73, 4, 1, "", "collect_all"], [74, 4, 1, "", "concat"], [581, 4, 1, "", "concat_list"], [582, 4, 1, "", "concat_str"], [583, 4, 1, "", "corr"], [584, 4, 1, "", "count"], [585, 4, 1, "", "cov"], [586, 4, 1, "", "cumfold"], [587, 4, 1, "", "cumreduce"], [588, 4, 1, "", "cumsum"], [589, 4, 1, "", "cumsum_horizontal"], [590, 4, 1, "", "date"], [591, 4, 1, "", "date_range"], [592, 4, 1, "", "date_ranges"], [593, 4, 1, "", "datetime"], [594, 4, 1, "", "duration"], [595, 4, 1, "", "element"], [75, 4, 1, "", "enable_string_cache"], [596, 4, 1, "", "exclude"], [597, 4, 1, "", "first"], [598, 4, 1, "", "fold"], [599, 4, 1, "", "format"], [90, 4, 1, "", "from_arrow"], [91, 4, 1, "", "from_dataframe"], [92, 4, 1, "", "from_dict"], [93, 4, 1, "", "from_dicts"], [600, 4, 1, "", "from_epoch"], [94, 4, 1, "", "from_numpy"], [95, 4, 1, "", "from_pandas"], [96, 4, 1, "", "from_records"], [97, 4, 1, "", "from_repr"], [98, 4, 1, "", "get_index_type"], [601, 4, 1, "", "groups"], [602, 4, 1, "", "head"], [603, 4, 1, "", "implode"], [604, 4, 1, "", "int_range"], [605, 4, 1, "", "int_ranges"], [606, 4, 1, "", "last"], [607, 4, 1, "", "lit"], [608, 4, 1, "", "map"], [609, 4, 1, "", "max"], [610, 4, 1, "", "max_horizontal"], [611, 4, 1, "", "mean"], [612, 4, 1, "", "median"], [613, 4, 1, "", "min"], [614, 4, 1, "", "min_horizontal"], [615, 4, 1, "", "n_unique"], [616, 4, 1, "", "ones"], [617, 4, 1, "", "quantile"], [100, 4, 1, "", "read_avro"], [101, 4, 1, "", "read_csv"], [102, 4, 1, "", "read_csv_batched"], [103, 4, 1, "", "read_database"], [104, 4, 1, "", "read_delta"], [105, 4, 1, "", "read_excel"], [106, 4, 1, "", "read_ipc"], [107, 4, 1, "", "read_ipc_schema"], [108, 4, 1, "", "read_json"], [109, 4, 1, "", "read_ndjson"], [110, 4, 1, "", "read_parquet"], [111, 4, 1, "", "read_parquet_schema"], [618, 4, 1, "", "reduce"], [619, 4, 1, "", "repeat"], [620, 4, 1, "", "rolling_corr"], [621, 4, 1, "", "rolling_cov"], [112, 4, 1, "", "scan_csv"], [113, 4, 1, "", "scan_delta"], [114, 4, 1, "", "scan_ipc"], [115, 4, 1, "", "scan_ndjson"], [116, 4, 1, "", "scan_parquet"], [117, 4, 1, "", "scan_pyarrow_dataset"], [622, 4, 1, "", "select"], [744, 6, 0, "-", "selectors"], [118, 4, 1, "", "show_versions"], [623, 4, 1, "", "sql_expr"], [624, 4, 1, "", "std"], [625, 4, 1, "", "struct"], [626, 4, 1, "", "sum"], [627, 4, 1, "", "sum_horizontal"], [628, 4, 1, "", "tail"], [128, 4, 1, "", "threadpool_size"], [629, 4, 1, "", "time"], [630, 4, 1, "", "time_range"], [631, 4, 1, "", "time_ranges"], [129, 4, 1, "", "using_string_cache"], [632, 4, 1, "", "var"], [633, 4, 1, "", "when"], [634, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "restore_defaults"], [9, 1, 1, "", "save"], [10, 1, 1, "", "set_ascii_tables"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_streaming_chunk_size"], [14, 1, 1, "", "set_tbl_cell_alignment"], [15, 1, 1, "", "set_tbl_cols"], [16, 1, 1, "", "set_tbl_column_data_type_inline"], [17, 1, 1, "", "set_tbl_dataframe_shape_below"], [18, 1, 1, "", "set_tbl_formatting"], [19, 1, 1, "", "set_tbl_hide_column_data_types"], [20, 1, 1, "", "set_tbl_hide_column_names"], [21, 1, 1, "", "set_tbl_hide_dataframe_shape"], [22, 1, 1, "", "set_tbl_hide_dtype_separator"], [23, 1, 1, "", "set_tbl_rows"], [24, 1, 1, "", "set_tbl_width_chars"], [25, 1, 1, "", "set_verbose"], [26, 1, 1, "", "state"]], "polars.DataFrame": [[132, 1, 1, "", "__dataframe__"], [133, 1, 1, "", "apply"], [134, 1, 1, "", "bottom_k"], [135, 1, 1, "", "clear"], [136, 1, 1, "", "clone"], [137, 2, 1, "", "columns"], [138, 1, 1, "", "corr"], [139, 1, 1, "", "describe"], [140, 1, 1, "", "drop"], [141, 1, 1, "", "drop_in_place"], [142, 1, 1, "", "drop_nulls"], [143, 2, 1, "", "dtypes"], [144, 1, 1, "", "estimated_size"], [145, 1, 1, "", "explode"], [146, 1, 1, "", "extend"], [147, 1, 1, "", "fill_nan"], [148, 1, 1, "", "fill_null"], [149, 1, 1, "", "filter"], [150, 1, 1, "", "find_idx_by_name"], [151, 2, 1, "", "flags"], [152, 1, 1, "", "fold"], [153, 1, 1, "", "frame_equal"], [154, 1, 1, "", "get_column"], [155, 1, 1, "", "get_columns"], [156, 1, 1, "", "glimpse"], [157, 1, 1, "", "groupby"], [158, 1, 1, "", "groupby_dynamic"], [159, 1, 1, "", "groupby_rolling"], [160, 1, 1, "", "hash_rows"], [161, 1, 1, "", "head"], [162, 2, 1, "", "height"], [163, 1, 1, "", "hstack"], [164, 1, 1, "", "insert_at_idx"], [165, 1, 1, "", "interpolate"], [166, 1, 1, "", "is_duplicated"], [167, 1, 1, "", "is_empty"], [168, 1, 1, "", "is_unique"], [169, 1, 1, "", "item"], [170, 1, 1, "", "iter_rows"], [171, 1, 1, "", "iter_slices"], [172, 1, 1, "", "join"], [173, 1, 1, "", "join_asof"], [174, 1, 1, "", "lazy"], [175, 1, 1, "", "limit"], [176, 1, 1, "", "max"], [177, 1, 1, "", "mean"], [178, 1, 1, "", "median"], [179, 1, 1, "", "melt"], [180, 1, 1, "", "merge_sorted"], [181, 1, 1, "", "min"], [182, 1, 1, "", "n_chunks"], [183, 1, 1, "", "n_unique"], [184, 1, 1, "", "null_count"], [185, 1, 1, "", "partition_by"], [186, 1, 1, "", "pipe"], [187, 1, 1, "", "pivot"], [188, 1, 1, "", "product"], [189, 1, 1, "", "quantile"], [190, 1, 1, "", "rechunk"], [191, 1, 1, "", "rename"], [192, 1, 1, "", "replace"], [193, 1, 1, "", "replace_at_idx"], [194, 1, 1, "", "reverse"], [195, 1, 1, "", "row"], [196, 1, 1, "", "rows"], [197, 1, 1, "", "rows_by_key"], [198, 1, 1, "", "sample"], [199, 2, 1, "", "schema"], [200, 1, 1, "", "select"], [201, 1, 1, "", "select_seq"], [202, 1, 1, "", "set_sorted"], [203, 2, 1, "", "shape"], [204, 1, 1, "", "shift"], [205, 1, 1, "", "shift_and_fill"], [206, 1, 1, "", "shrink_to_fit"], [207, 1, 1, "", "slice"], [208, 1, 1, "", "sort"], [209, 1, 1, "", "std"], [210, 1, 1, "", "sum"], [211, 1, 1, "", "tail"], [212, 1, 1, "", "take_every"], [213, 1, 1, "", "to_arrow"], [214, 1, 1, "", "to_dict"], [215, 1, 1, "", "to_dicts"], [216, 1, 1, "", "to_dummies"], [217, 1, 1, "", "to_init_repr"], [218, 1, 1, "", "to_numpy"], [219, 1, 1, "", "to_pandas"], [220, 1, 1, "", "to_series"], [221, 1, 1, "", "to_struct"], [222, 1, 1, "", "top_k"], [223, 1, 1, "", "transpose"], [224, 1, 1, "", "unique"], [225, 1, 1, "", "unnest"], [226, 1, 1, "", "unstack"], [227, 1, 1, "", "update"], [228, 1, 1, "", "upsample"], [229, 1, 1, "", "var"], [230, 1, 1, "", "vstack"], [231, 2, 1, "", "width"], [232, 1, 1, "", "with_columns"], [233, 1, 1, "", "with_columns_seq"], [234, 1, 1, "", "with_row_count"], [27, 1, 1, "", "write_avro"], [28, 1, 1, "", "write_csv"], [29, 1, 1, "", "write_database"], [30, 1, 1, "", "write_delta"], [31, 1, 1, "", "write_excel"], [32, 1, 1, "", "write_ipc"], [33, 1, 1, "", "write_json"], [34, 1, 1, "", "write_ndjson"], [35, 1, 1, "", "write_parquet"]], "polars.DataType": [[36, 1, 1, "", "__init__"]], "polars.Date": [[37, 1, 1, "", "__init__"]], "polars.Datetime": [[38, 1, 1, "", "__init__"]], "polars.Decimal": [[39, 1, 1, "", "__init__"]], "polars.Duration": [[40, 1, 1, "", "__init__"]], "polars.Expr": [[262, 1, 1, "", "abs"], [263, 1, 1, "", "add"], [264, 1, 1, "", "agg_groups"], [265, 1, 1, "", "alias"], [266, 1, 1, "", "all"], [267, 1, 1, "", "and_"], [268, 1, 1, "", "any"], [269, 1, 1, "", "append"], [270, 1, 1, "", "apply"], [271, 1, 1, "", "approx_n_unique"], [272, 1, 1, "", "arccos"], [273, 1, 1, "", "arccosh"], [274, 1, 1, "", "arcsin"], [275, 1, 1, "", "arcsinh"], [276, 1, 1, "", "arctan"], [277, 1, 1, "", "arctanh"], [278, 1, 1, "", "arg_max"], [279, 1, 1, "", "arg_min"], [280, 1, 1, "", "arg_sort"], [281, 1, 1, "", "arg_true"], [282, 1, 1, "", "arg_unique"], [287, 1, 1, "", "backward_fill"], [293, 1, 1, "", "bottom_k"], [294, 1, 1, "", "cache"], [295, 1, 1, "", "cast"], [298, 1, 1, "", "cbrt"], [299, 1, 1, "", "ceil"], [300, 1, 1, "", "clip"], [301, 1, 1, "", "clip_max"], [302, 1, 1, "", "clip_min"], [303, 1, 1, "", "cos"], [304, 1, 1, "", "cosh"], [305, 1, 1, "", "count"], [306, 1, 1, "", "cumcount"], [307, 1, 1, "", "cummax"], [308, 1, 1, "", "cummin"], [309, 1, 1, "", "cumprod"], [310, 1, 1, "", "cumsum"], [311, 1, 1, "", "cumulative_eval"], [312, 1, 1, "", "cut"], [313, 1, 1, "", "degrees"], [314, 1, 1, "", "diff"], [315, 1, 1, "", "dot"], [316, 1, 1, "", "drop_nans"], [317, 1, 1, "", "drop_nulls"], [359, 1, 1, "", "entropy"], [360, 1, 1, "", "eq"], [361, 1, 1, "", "eq_missing"], [362, 1, 1, "", "ewm_mean"], [363, 1, 1, "", "ewm_std"], [364, 1, 1, "", "ewm_var"], [365, 1, 1, "", "exclude"], [366, 1, 1, "", "exp"], [367, 1, 1, "", "explode"], [368, 1, 1, "", "extend_constant"], [369, 1, 1, "", "fill_nan"], [370, 1, 1, "", "fill_null"], [371, 1, 1, "", "filter"], [372, 1, 1, "", "first"], [373, 1, 1, "", "flatten"], [374, 1, 1, "", "floor"], [375, 1, 1, "", "floordiv"], [376, 1, 1, "", "forward_fill"], [377, 1, 1, "", "from_json"], [378, 1, 1, "", "ge"], [379, 1, 1, "", "gt"], [380, 1, 1, "", "hash"], [381, 1, 1, "", "head"], [382, 1, 1, "", "implode"], [383, 1, 1, "", "inspect"], [384, 1, 1, "", "interpolate"], [385, 1, 1, "", "is_between"], [386, 1, 1, "", "is_duplicated"], [387, 1, 1, "", "is_finite"], [388, 1, 1, "", "is_first"], [389, 1, 1, "", "is_in"], [390, 1, 1, "", "is_infinite"], [391, 1, 1, "", "is_nan"], [392, 1, 1, "", "is_not"], [393, 1, 1, "", "is_not_nan"], [394, 1, 1, "", "is_not_null"], [395, 1, 1, "", "is_null"], [396, 1, 1, "", "is_unique"], [397, 1, 1, "", "keep_name"], [398, 1, 1, "", "kurtosis"], [399, 1, 1, "", "last"], [400, 1, 1, "", "le"], [401, 1, 1, "", "len"], [402, 1, 1, "", "limit"], [435, 1, 1, "", "log"], [436, 1, 1, "", "log10"], [437, 1, 1, "", "log1p"], [438, 1, 1, "", "lower_bound"], [439, 1, 1, "", "lt"], [440, 1, 1, "", "map"], [441, 1, 1, "", "map_alias"], [442, 1, 1, "", "map_dict"], [443, 1, 1, "", "max"], [444, 1, 1, "", "mean"], [445, 1, 1, "", "median"], [456, 1, 1, "", "min"], [457, 1, 1, "", "mod"], [458, 1, 1, "", "mode"], [459, 1, 1, "", "mul"], [460, 1, 1, "", "n_unique"], [461, 1, 1, "", "nan_max"], [462, 1, 1, "", "nan_min"], [463, 1, 1, "", "ne"], [464, 1, 1, "", "ne_missing"], [465, 1, 1, "", "null_count"], [466, 1, 1, "", "or_"], [467, 1, 1, "", "over"], [468, 1, 1, "", "pct_change"], [469, 1, 1, "", "pipe"], [470, 1, 1, "", "pow"], [471, 1, 1, "", "prefix"], [472, 1, 1, "", "product"], [473, 1, 1, "", "qcut"], [474, 1, 1, "", "quantile"], [475, 1, 1, "", "radians"], [476, 1, 1, "", "rank"], [477, 1, 1, "", "rechunk"], [478, 1, 1, "", "reinterpret"], [479, 1, 1, "", "repeat_by"], [480, 1, 1, "", "reshape"], [481, 1, 1, "", "reverse"], [482, 1, 1, "", "rle"], [483, 1, 1, "", "rle_id"], [484, 1, 1, "", "rolling_apply"], [485, 1, 1, "", "rolling_max"], [486, 1, 1, "", "rolling_mean"], [487, 1, 1, "", "rolling_median"], [488, 1, 1, "", "rolling_min"], [489, 1, 1, "", "rolling_quantile"], [490, 1, 1, "", "rolling_skew"], [491, 1, 1, "", "rolling_std"], [492, 1, 1, "", "rolling_sum"], [493, 1, 1, "", "rolling_var"], [494, 1, 1, "", "round"], [495, 1, 1, "", "sample"], [496, 1, 1, "", "search_sorted"], [497, 1, 1, "", "set_sorted"], [498, 1, 1, "", "shift"], [499, 1, 1, "", "shift_and_fill"], [500, 1, 1, "", "shrink_dtype"], [501, 1, 1, "", "shuffle"], [502, 1, 1, "", "sign"], [503, 1, 1, "", "sin"], [504, 1, 1, "", "sinh"], [505, 1, 1, "", "skew"], [506, 1, 1, "", "slice"], [507, 1, 1, "", "sort"], [508, 1, 1, "", "sort_by"], [509, 1, 1, "", "sqrt"], [510, 1, 1, "", "std"], [549, 1, 1, "", "sub"], [550, 1, 1, "", "suffix"], [551, 1, 1, "", "sum"], [552, 1, 1, "", "tail"], [553, 1, 1, "", "take"], [554, 1, 1, "", "take_every"], [555, 1, 1, "", "tan"], [556, 1, 1, "", "tanh"], [557, 1, 1, "", "to_physical"], [558, 1, 1, "", "top_k"], [559, 1, 1, "", "truediv"], [560, 1, 1, "", "unique"], [561, 1, 1, "", "unique_counts"], [562, 1, 1, "", "upper_bound"], [563, 1, 1, "", "value_counts"], [564, 1, 1, "", "var"], [565, 1, 1, "", "where"], [566, 1, 1, "", "xor"]], "polars.Expr.arr": [[283, 1, 1, "", "max"], [284, 1, 1, "", "min"], [285, 1, 1, "", "sum"], [286, 1, 1, "", "unique"]], "polars.Expr.bin": [[288, 1, 1, "", "contains"], [289, 1, 1, "", "decode"], [290, 1, 1, "", "encode"], [291, 1, 1, "", "ends_with"], [292, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[296, 1, 1, "", "get_categories"], [297, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[318, 1, 1, "", "base_utc_offset"], [319, 1, 1, "", "cast_time_unit"], [320, 1, 1, "", "combine"], [321, 1, 1, "", "convert_time_zone"], [322, 1, 1, "", "date"], [323, 1, 1, "", "datetime"], [324, 1, 1, "", "day"], [325, 1, 1, "", "days"], [326, 1, 1, "", "dst_offset"], [327, 1, 1, "", "epoch"], [328, 1, 1, "", "hour"], [329, 1, 1, "", "hours"], [330, 1, 1, "", "is_leap_year"], [331, 1, 1, "", "iso_year"], [332, 1, 1, "", "microsecond"], [333, 1, 1, "", "microseconds"], [334, 1, 1, "", "millisecond"], [335, 1, 1, "", "milliseconds"], [336, 1, 1, "", "minute"], [337, 1, 1, "", "minutes"], [338, 1, 1, "", "month"], [339, 1, 1, "", "month_end"], [340, 1, 1, "", "month_start"], [341, 1, 1, "", "nanosecond"], [342, 1, 1, "", "nanoseconds"], [343, 1, 1, "", "offset_by"], [344, 1, 1, "", "ordinal_day"], [345, 1, 1, "", "quarter"], [346, 1, 1, "", "replace_time_zone"], [347, 1, 1, "", "round"], [348, 1, 1, "", "second"], [349, 1, 1, "", "seconds"], [350, 1, 1, "", "strftime"], [351, 1, 1, "", "time"], [352, 1, 1, "", "timestamp"], [353, 1, 1, "", "to_string"], [354, 1, 1, "", "truncate"], [355, 1, 1, "", "week"], [356, 1, 1, "", "weekday"], [357, 1, 1, "", "with_time_unit"], [358, 1, 1, "", "year"]], "polars.Expr.list": [[403, 1, 1, "", "all"], [404, 1, 1, "", "any"], [405, 1, 1, "", "arg_max"], [406, 1, 1, "", "arg_min"], [407, 1, 1, "", "concat"], [408, 1, 1, "", "contains"], [409, 1, 1, "", "count_match"], [410, 1, 1, "", "diff"], [411, 1, 1, "", "eval"], [412, 1, 1, "", "explode"], [413, 1, 1, "", "first"], [414, 1, 1, "", "get"], [415, 1, 1, "", "head"], [416, 1, 1, "", "join"], [417, 1, 1, "", "last"], [418, 1, 1, "", "lengths"], [419, 1, 1, "", "max"], [420, 1, 1, "", "mean"], [421, 1, 1, "", "min"], [422, 1, 1, "", "reverse"], [423, 1, 1, "", "set_difference"], [424, 1, 1, "", "set_intersection"], [425, 1, 1, "", "set_symmetric_difference"], [426, 1, 1, "", "set_union"], [427, 1, 1, "", "shift"], [428, 1, 1, "", "slice"], [429, 1, 1, "", "sort"], [430, 1, 1, "", "sum"], [431, 1, 1, "", "tail"], [432, 1, 1, "", "take"], [433, 1, 1, "", "to_struct"], [434, 1, 1, "", "unique"]], "polars.Expr.meta": [[446, 1, 1, "", "eq"], [447, 1, 1, "", "has_multiple_outputs"], [448, 1, 1, "", "is_regex_projection"], [449, 1, 1, "", "ne"], [450, 1, 1, "", "output_name"], [451, 1, 1, "", "pop"], [452, 1, 1, "", "root_names"], [453, 1, 1, "", "tree_format"], [454, 1, 1, "", "undo_aliases"], [455, 1, 1, "", "write_json"]], "polars.Expr.str": [[511, 1, 1, "", "concat"], [512, 1, 1, "", "contains"], [513, 1, 1, "", "count_match"], [514, 1, 1, "", "decode"], [515, 1, 1, "", "encode"], [516, 1, 1, "", "ends_with"], [517, 1, 1, "", "explode"], [518, 1, 1, "", "extract"], [519, 1, 1, "", "extract_all"], [520, 1, 1, "", "extract_groups"], [521, 1, 1, "", "json_extract"], [522, 1, 1, "", "json_path_match"], [523, 1, 1, "", "lengths"], [524, 1, 1, "", "ljust"], [525, 1, 1, "", "lstrip"], [526, 1, 1, "", "n_chars"], [527, 1, 1, "", "parse_int"], [528, 1, 1, "", "replace"], [529, 1, 1, "", "replace_all"], [530, 1, 1, "", "rjust"], [531, 1, 1, "", "rstrip"], [532, 1, 1, "", "slice"], [533, 1, 1, "", "split"], [534, 1, 1, "", "split_exact"], [535, 1, 1, "", "splitn"], [536, 1, 1, "", "starts_with"], [537, 1, 1, "", "strip"], [538, 1, 1, "", "strptime"], [539, 1, 1, "", "to_date"], [540, 1, 1, "", "to_datetime"], [541, 1, 1, "", "to_decimal"], [542, 1, 1, "", "to_lowercase"], [543, 1, 1, "", "to_time"], [544, 1, 1, "", "to_titlecase"], [545, 1, 1, "", "to_uppercase"], [546, 1, 1, "", "zfill"]], "polars.Expr.struct": [[547, 1, 1, "", "field"], [548, 1, 1, "", "rename_fields"]], "polars.Float32": [[41, 1, 1, "", "__init__"]], "polars.Float64": [[42, 1, 1, "", "__init__"]], "polars.Int16": [[43, 1, 1, "", "__init__"]], "polars.Int32": [[44, 1, 1, "", "__init__"]], "polars.Int64": [[45, 1, 1, "", "__init__"]], "polars.Int8": [[46, 1, 1, "", "__init__"]], "polars.LazyFrame": [[656, 1, 1, "", "bottom_k"], [657, 1, 1, "", "cache"], [658, 1, 1, "", "clear"], [659, 1, 1, "", "clone"], [660, 1, 1, "", "collect"], [661, 2, 1, "", "columns"], [662, 1, 1, "", "deserialize"], [663, 1, 1, "", "drop"], [664, 1, 1, "", "drop_nulls"], [665, 2, 1, "", "dtypes"], [666, 1, 1, "", "explain"], [667, 1, 1, "", "explode"], [668, 1, 1, "", "fetch"], [669, 1, 1, "", "fill_nan"], [670, 1, 1, "", "fill_null"], [671, 1, 1, "", "filter"], [672, 1, 1, "", "first"], [673, 1, 1, "", "from_json"], [674, 1, 1, "", "groupby"], [675, 1, 1, "", "groupby_dynamic"], [676, 1, 1, "", "groupby_rolling"], [677, 1, 1, "", "head"], [678, 1, 1, "", "inspect"], [679, 1, 1, "", "interpolate"], [680, 1, 1, "", "join"], [681, 1, 1, "", "join_asof"], [682, 1, 1, "", "last"], [683, 1, 1, "", "lazy"], [684, 1, 1, "", "limit"], [685, 1, 1, "", "map"], [686, 1, 1, "", "max"], [687, 1, 1, "", "mean"], [688, 1, 1, "", "median"], [689, 1, 1, "", "melt"], [690, 1, 1, "", "merge_sorted"], [691, 1, 1, "", "min"], [692, 1, 1, "", "null_count"], [693, 1, 1, "", "pipe"], [694, 1, 1, "", "profile"], [695, 1, 1, "", "quantile"], [696, 1, 1, "", "read_json"], [697, 1, 1, "", "rename"], [698, 1, 1, "", "reverse"], [699, 2, 1, "", "schema"], [700, 1, 1, "", "select"], [701, 1, 1, "", "select_seq"], [702, 1, 1, "", "serialize"], [703, 1, 1, "", "set_sorted"], [704, 1, 1, "", "shift"], [705, 1, 1, "", "shift_and_fill"], [706, 1, 1, "", "show_graph"], [47, 1, 1, "", "sink_ipc"], [48, 1, 1, "", "sink_parquet"], [707, 1, 1, "", "slice"], [708, 1, 1, "", "sort"], [709, 1, 1, "", "std"], [710, 1, 1, "", "sum"], [711, 1, 1, "", "tail"], [712, 1, 1, "", "take_every"], [713, 1, 1, "", "top_k"], [714, 1, 1, "", "unique"], [715, 1, 1, "", "unnest"], [716, 1, 1, "", "update"], [717, 1, 1, "", "var"], [718, 2, 1, "", "width"], [719, 1, 1, "", "with_columns"], [720, 1, 1, "", "with_columns_seq"], [721, 1, 1, "", "with_context"], [722, 1, 1, "", "with_row_count"]], "polars.List": [[49, 1, 1, "", "__init__"]], "polars.Null": [[50, 1, 1, "", "__init__"]], "polars.Object": [[51, 1, 1, "", "__init__"]], "polars.SQLContext": [[1066, 1, 1, "", "__enter__"], [1066, 1, 1, "", "__exit__"], [1066, 1, 1, "", "__init__"], [52, 1, 1, "", "execute"], [53, 1, 1, "", "register"], [54, 1, 1, "", "register_globals"], [55, 1, 1, "", "register_many"], [56, 1, 1, "", "tables"], [57, 1, 1, "", "unregister"]], "polars.Series": [[746, 1, 1, "", "abs"], [747, 1, 1, "", "alias"], [748, 1, 1, "", "all"], [749, 1, 1, "", "any"], [750, 1, 1, "", "append"], [751, 1, 1, "", "apply"], [752, 1, 1, "", "arccos"], [753, 1, 1, "", "arccosh"], [754, 1, 1, "", "arcsin"], [755, 1, 1, "", "arcsinh"], [756, 1, 1, "", "arctan"], [757, 1, 1, "", "arctanh"], [758, 1, 1, "", "arg_max"], [759, 1, 1, "", "arg_min"], [760, 1, 1, "", "arg_sort"], [761, 1, 1, "", "arg_true"], [762, 1, 1, "", "arg_unique"], [772, 1, 1, "", "bottom_k"], [773, 1, 1, "", "cast"], [774, 3, 1, "", "cat"], [778, 1, 1, "", "cbrt"], [779, 1, 1, "", "ceil"], [780, 1, 1, "", "chunk_lengths"], [781, 1, 1, "", "clear"], [782, 1, 1, "", "clip"], [783, 1, 1, "", "clip_max"], [784, 1, 1, "", "clip_min"], [785, 1, 1, "", "clone"], [786, 1, 1, "", "cos"], [787, 1, 1, "", "cosh"], [788, 1, 1, "", "cummax"], [789, 1, 1, "", "cummin"], [790, 1, 1, "", "cumprod"], [791, 1, 1, "", "cumsum"], [792, 1, 1, "", "cumulative_eval"], [793, 1, 1, "", "cut"], [794, 1, 1, "", "describe"], [795, 1, 1, "", "diff"], [796, 1, 1, "", "dot"], [797, 1, 1, "", "drop_nans"], [798, 1, 1, "", "drop_nulls"], [799, 3, 1, "", "dt"], [845, 3, 1, "", "dtype"], [846, 1, 1, "", "entropy"], [847, 1, 1, "", "estimated_size"], [848, 1, 1, "", "ewm_mean"], [849, 1, 1, "", "ewm_std"], [850, 1, 1, "", "ewm_var"], [851, 1, 1, "", "exp"], [852, 1, 1, "", "explode"], [853, 1, 1, "", "extend"], [854, 1, 1, "", "extend_constant"], [855, 1, 1, "", "fill_nan"], [856, 1, 1, "", "fill_null"], [857, 1, 1, "", "filter"], [858, 3, 1, "", "flags"], [859, 1, 1, "", "floor"], [860, 1, 1, "", "get_chunks"], [861, 1, 1, "", "has_validity"], [862, 1, 1, "", "hash"], [863, 1, 1, "", "head"], [864, 1, 1, "", "hist"], [865, 1, 1, "", "implode"], [866, 3, 1, "", "inner_dtype"], [867, 1, 1, "", "interpolate"], [868, 1, 1, "", "is_between"], [869, 1, 1, "", "is_boolean"], [870, 1, 1, "", "is_duplicated"], [871, 1, 1, "", "is_empty"], [872, 1, 1, "", "is_finite"], [873, 1, 1, "", "is_first"], [874, 1, 1, "", "is_float"], [875, 1, 1, "", "is_in"], [876, 1, 1, "", "is_infinite"], [877, 1, 1, "", "is_integer"], [878, 1, 1, "", "is_nan"], [879, 1, 1, "", "is_not_nan"], [880, 1, 1, "", "is_not_null"], [881, 1, 1, "", "is_null"], [882, 1, 1, "", "is_numeric"], [883, 1, 1, "", "is_sorted"], [884, 1, 1, "", "is_temporal"], [885, 1, 1, "", "is_unique"], [886, 1, 1, "", "is_utf8"], [887, 1, 1, "", "item"], [888, 1, 1, "", "kurtosis"], [889, 1, 1, "", "len"], [890, 1, 1, "", "limit"], [891, 3, 1, "", "list"], [924, 1, 1, "", "log"], [925, 1, 1, "", "log10"], [926, 1, 1, "", "log1p"], [927, 1, 1, "", "lower_bound"], [928, 1, 1, "", "map_dict"], [929, 1, 1, "", "max"], [930, 1, 1, "", "mean"], [931, 1, 1, "", "median"], [932, 1, 1, "", "min"], [933, 1, 1, "", "mode"], [934, 1, 1, "", "n_chunks"], [935, 1, 1, "", "n_unique"], [936, 3, 1, "", "name"], [937, 1, 1, "", "nan_max"], [938, 1, 1, "", "nan_min"], [939, 1, 1, "", "new_from_index"], [940, 1, 1, "", "null_count"], [941, 1, 1, "", "pct_change"], [942, 1, 1, "", "peak_max"], [943, 1, 1, "", "peak_min"], [944, 1, 1, "", "product"], [945, 1, 1, "", "qcut"], [946, 1, 1, "", "quantile"], [947, 1, 1, "", "rank"], [948, 1, 1, "", "rechunk"], [949, 1, 1, "", "reinterpret"], [950, 1, 1, "", "rename"], [951, 1, 1, "", "reshape"], [952, 1, 1, "", "reverse"], [953, 1, 1, "", "rle"], [954, 1, 1, "", "rle_id"], [955, 1, 1, "", "rolling_apply"], [956, 1, 1, "", "rolling_max"], [957, 1, 1, "", "rolling_mean"], [958, 1, 1, "", "rolling_median"], [959, 1, 1, "", "rolling_min"], [960, 1, 1, "", "rolling_quantile"], [961, 1, 1, "", "rolling_skew"], [962, 1, 1, "", "rolling_std"], [963, 1, 1, "", "rolling_sum"], [964, 1, 1, "", "rolling_var"], [965, 1, 1, "", "round"], [966, 1, 1, "", "sample"], [967, 1, 1, "", "search_sorted"], [968, 1, 1, "", "series_equal"], [969, 1, 1, "", "set"], [970, 1, 1, "", "set_at_idx"], [971, 1, 1, "", "set_sorted"], [972, 3, 1, "", "shape"], [973, 1, 1, "", "shift"], [974, 1, 1, "", "shift_and_fill"], [975, 1, 1, "", "shrink_dtype"], [976, 1, 1, "", "shrink_to_fit"], [977, 1, 1, "", "shuffle"], [978, 1, 1, "", "sign"], [979, 1, 1, "", "sin"], [980, 1, 1, "", "sinh"], [981, 1, 1, "", "skew"], [982, 1, 1, "", "slice"], [983, 1, 1, "", "sort"], [984, 1, 1, "", "sqrt"], [985, 1, 1, "", "std"], [986, 3, 1, "", "str"], [1028, 1, 1, "", "sum"], [1029, 1, 1, "", "tail"], [1030, 1, 1, "", "take"], [1031, 1, 1, "", "take_every"], [1032, 1, 1, "", "tan"], [1033, 1, 1, "", "tanh"], [1034, 3, 1, "", "time_unit"], [1035, 1, 1, "", "to_arrow"], [1036, 1, 1, "", "to_dummies"], [1037, 1, 1, "", "to_frame"], [1038, 1, 1, "", "to_init_repr"], [1039, 1, 1, "", "to_list"], [1040, 1, 1, "", "to_numpy"], [1041, 1, 1, "", "to_pandas"], [1042, 1, 1, "", "to_physical"], [1043, 1, 1, "", "top_k"], [1044, 1, 1, "", "unique"], [1045, 1, 1, "", "unique_counts"], [1046, 1, 1, "", "upper_bound"], [1047, 1, 1, "", "value_counts"], [1048, 1, 1, "", "var"], [1049, 1, 1, "", "view"], [1050, 1, 1, "", "zip_with"]], "polars.Series.arr": [[763, 1, 1, "", "max"], [764, 1, 1, "", "min"], [765, 1, 1, "", "sum"], [766, 1, 1, "", "unique"]], "polars.Series.bin": [[767, 1, 1, "", "contains"], [768, 1, 1, "", "decode"], [769, 1, 1, "", "encode"], [770, 1, 1, "", "ends_with"], [771, 1, 1, "", "starts_with"]], "polars.Series.cat": [[775, 1, 1, "", "get_categories"], [776, 1, 1, "", "set_ordering"], [777, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[800, 1, 1, "", "base_utc_offset"], [801, 1, 1, "", "cast_time_unit"], [802, 1, 1, "", "combine"], [803, 1, 1, "", "convert_time_zone"], [804, 1, 1, "", "date"], [805, 1, 1, "", "datetime"], [806, 1, 1, "", "day"], [807, 1, 1, "", "days"], [808, 1, 1, "", "dst_offset"], [809, 1, 1, "", "epoch"], [810, 1, 1, "", "hour"], [811, 1, 1, "", "hours"], [812, 1, 1, "", "is_leap_year"], [813, 1, 1, "", "iso_year"], [814, 1, 1, "", "max"], [815, 1, 1, "", "mean"], [816, 1, 1, "", "median"], [817, 1, 1, "", "microsecond"], [818, 1, 1, "", "microseconds"], [819, 1, 1, "", "millisecond"], [820, 1, 1, "", "milliseconds"], [821, 1, 1, "", "min"], [822, 1, 1, "", "minute"], [823, 1, 1, "", "minutes"], [824, 1, 1, "", "month"], [825, 1, 1, "", "month_end"], [826, 1, 1, "", "month_start"], [827, 1, 1, "", "nanosecond"], [828, 1, 1, "", "nanoseconds"], [829, 1, 1, "", "offset_by"], [830, 1, 1, "", "ordinal_day"], [831, 1, 1, "", "quarter"], [832, 1, 1, "", "replace_time_zone"], [833, 1, 1, "", "round"], [834, 1, 1, "", "second"], [835, 1, 1, "", "seconds"], [836, 1, 1, "", "strftime"], [837, 1, 1, "", "time"], [838, 1, 1, "", "timestamp"], [839, 1, 1, "", "to_string"], [840, 1, 1, "", "truncate"], [841, 1, 1, "", "week"], [842, 1, 1, "", "weekday"], [843, 1, 1, "", "with_time_unit"], [844, 1, 1, "", "year"]], "polars.Series.list": [[892, 1, 1, "", "all"], [893, 1, 1, "", "any"], [894, 1, 1, "", "arg_max"], [895, 1, 1, "", "arg_min"], [896, 1, 1, "", "concat"], [897, 1, 1, "", "contains"], [898, 1, 1, "", "count_match"], [899, 1, 1, "", "diff"], [900, 1, 1, "", "eval"], [901, 1, 1, "", "explode"], [902, 1, 1, "", "first"], [903, 1, 1, "", "get"], [904, 1, 1, "", "head"], [905, 1, 1, "", "join"], [906, 1, 1, "", "last"], [907, 1, 1, "", "lengths"], [908, 1, 1, "", "max"], [909, 1, 1, "", "mean"], [910, 1, 1, "", "min"], [911, 1, 1, "", "reverse"], [912, 1, 1, "", "set_difference"], [913, 1, 1, "", "set_intersection"], [914, 1, 1, "", "set_symmetric_difference"], [915, 1, 1, "", "set_union"], [916, 1, 1, "", "shift"], [917, 1, 1, "", "slice"], [918, 1, 1, "", "sort"], [919, 1, 1, "", "sum"], [920, 1, 1, "", "tail"], [921, 1, 1, "", "take"], [922, 1, 1, "", "to_struct"], [923, 1, 1, "", "unique"]], "polars.Series.str": [[987, 1, 1, "", "concat"], [988, 1, 1, "", "contains"], [989, 1, 1, "", "count_match"], [990, 1, 1, "", "decode"], [991, 1, 1, "", "encode"], [992, 1, 1, "", "ends_with"], [993, 1, 1, "", "explode"], [994, 1, 1, "", "extract"], [995, 1, 1, "", "extract_all"], [996, 1, 1, "", "extract_groups"], [997, 1, 1, "", "json_extract"], [998, 1, 1, "", "json_path_match"], [999, 1, 1, "", "lengths"], [1000, 1, 1, "", "ljust"], [1001, 1, 1, "", "lstrip"], [1002, 1, 1, "", "n_chars"], [1003, 1, 1, "", "parse_int"], [1004, 1, 1, "", "replace"], [1005, 1, 1, "", "replace_all"], [1006, 1, 1, "", "rjust"], [1007, 1, 1, "", "rstrip"], [1008, 1, 1, "", "slice"], [1009, 1, 1, "", "split"], [1010, 1, 1, "", "split_exact"], [1011, 1, 1, "", "splitn"], [1012, 1, 1, "", "starts_with"], [1013, 1, 1, "", "strip"], [1014, 1, 1, "", "strptime"], [1015, 1, 1, "", "to_date"], [1016, 1, 1, "", "to_datetime"], [1017, 1, 1, "", "to_decimal"], [1018, 1, 1, "", "to_lowercase"], [1019, 1, 1, "", "to_time"], [1020, 1, 1, "", "to_titlecase"], [1021, 1, 1, "", "to_uppercase"], [1022, 1, 1, "", "zfill"]], "polars.Series.struct": [[1023, 1, 1, "", "field"], [1024, 3, 1, "", "fields"], [1025, 1, 1, "", "rename_fields"], [1026, 3, 1, "", "schema"], [1027, 1, 1, "", "unnest"]], "polars.StringCache": [[58, 1, 1, "", "__init__"]], "polars.Struct": [[59, 1, 1, "", "__init__"]], "polars.Time": [[60, 1, 1, "", "__init__"]], "polars.UInt16": [[61, 1, 1, "", "__init__"]], "polars.UInt32": [[62, 1, 1, "", "__init__"]], "polars.UInt64": [[63, 1, 1, "", "__init__"]], "polars.UInt8": [[64, 1, 1, "", "__init__"]], "polars.Unknown": [[65, 1, 1, "", "__init__"]], "polars.Utf8": [[66, 1, 1, "", "__init__"]], "polars.api": [[68, 4, 1, "", "register_dataframe_namespace"], [69, 4, 1, "", "register_expr_namespace"], [70, 4, 1, "", "register_lazyframe_namespace"], [71, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[235, 1, 1, "", "__iter__"], [236, 1, 1, "", "agg"], [237, 1, 1, "", "all"], [238, 1, 1, "", "apply"], [239, 1, 1, "", "count"], [240, 1, 1, "", "first"], [241, 1, 1, "", "head"], [242, 1, 1, "", "last"], [243, 1, 1, "", "max"], [244, 1, 1, "", "mean"], [245, 1, 1, "", "median"], [246, 1, 1, "", "min"], [247, 1, 1, "", "n_unique"], [248, 1, 1, "", "quantile"], [249, 1, 1, "", "sum"], [250, 1, 1, "", "tail"]], "polars.exceptions": [[76, 5, 1, "", "ArrowError"], [77, 5, 1, "", "ColumnNotFoundError"], [78, 5, 1, "", "ComputeError"], [79, 5, 1, "", "DuplicateError"], [80, 5, 1, "", "InvalidOperationError"], [81, 5, 1, "", "NoDataError"], [82, 5, 1, "", "NoRowsReturnedError"], [83, 5, 1, "", "PolarsPanicError"], [84, 5, 1, "", "RowsError"], [85, 5, 1, "", "SchemaError"], [86, 5, 1, "", "SchemaFieldNotFoundError"], [87, 5, 1, "", "ShapeError"], [88, 5, 1, "", "StructFieldNotFoundError"], [89, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[99, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[723, 1, 1, "", "agg"], [724, 1, 1, "", "all"], [725, 1, 1, "", "apply"], [726, 1, 1, "", "count"], [727, 1, 1, "", "first"], [728, 1, 1, "", "head"], [729, 1, 1, "", "last"], [730, 1, 1, "", "max"], [731, 1, 1, "", "mean"], [732, 1, 1, "", "median"], [733, 1, 1, "", "min"], [734, 1, 1, "", "n_unique"], [735, 1, 1, "", "quantile"], [736, 1, 1, "", "sum"], [737, 1, 1, "", "tail"]], "polars.selectors": [[744, 4, 1, "", "all"], [744, 4, 1, "", "by_dtype"], [744, 4, 1, "", "by_name"], [744, 4, 1, "", "contains"], [744, 4, 1, "", "datetime"], [744, 4, 1, "", "duration"], [744, 4, 1, "", "ends_with"], [744, 4, 1, "", "first"], [744, 4, 1, "", "float"], [744, 4, 1, "", "integer"], [744, 4, 1, "", "is_selector"], [744, 4, 1, "", "last"], [744, 4, 1, "", "matches"], [744, 4, 1, "", "numeric"], [744, 4, 1, "", "selector_column_names"], [744, 4, 1, "", "starts_with"], [744, 4, 1, "", "string"], [744, 4, 1, "", "temporal"]], "polars.testing": [[119, 4, 1, "", "assert_frame_equal"], [120, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[121, 0, 1, "", "column"], [122, 4, 1, "", "columns"], [123, 4, 1, "", "create_list_strategy"], [124, 4, 1, "", "dataframes"], [125, 4, 1, "", "load_profile"], [126, 4, 1, "", "series"], [127, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[121, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"extend": [1, 146, 853], "api": [1, 68, 69, 70, 71, 653], "provid": 1, "new": 1, "function": [1, 130, 641, 652, 744], "avail": 1, "registr": 1, "exampl": [1, 744, 1067], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1067], "arrai": [2, 635, 1051], "binari": [3, 636, 647, 1053], "boolean": [4, 637, 1054], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 130], "activate_decim": 6, "load": [7, 130], "restore_default": 8, "save": [9, 130], "set_ascii_t": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_streaming_chunk_s": 13, "set_tbl_cell_align": 14, "set_tbl_col": 15, "set_tbl_column_data_type_inlin": 16, "set_tbl_dataframe_shape_below": 17, "set_tbl_format": 18, "set_tbl_hide_column_data_typ": 19, "set_tbl_hide_column_nam": 20, "set_tbl_hide_dataframe_shap": 21, "set_tbl_hide_dtype_separ": 22, "set_tbl_row": 23, "set_tbl_width_char": 24, "set_verbos": 25, "state": [26, 130], "datafram": [27, 28, 29, 30, 31, 32, 33, 34, 35, 124, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 256], "write_avro": 27, "write_csv": 28, "write_databas": 29, "write_delta": 30, "write_excel": 31, "write_ipc": 32, "write_json": [33, 455], "write_ndjson": 34, "write_parquet": 35, "datatyp": 36, "date": [37, 322, 590, 804], "datetim": [38, 323, 593, 805], "decim": 39, "durat": [40, 594], "float32": 41, "float64": 42, "int16": 43, "int32": 44, "int64": 45, "int8": 46, "lazyfram": [47, 48, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741], "sink_ipc": 47, "sink_parquet": 48, "list": [49, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 643, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 1060], "null": 50, "object": 51, "sqlcontext": [52, 53, 54, 55, 56, 57], "execut": 52, "regist": 53, "register_glob": 54, "register_mani": 55, "tabl": 56, "unregist": 57, "stringcach": [58, 652], "struct": [59, 547, 548, 625, 649, 1023, 1024, 1025, 1026, 1027, 1064], "time": [60, 351, 629, 837], "uint16": 61, "uint32": 62, "uint64": 63, "uint8": 64, "unknown": 65, "utf8": 66, "align_fram": 67, "register_dataframe_namespac": 68, "register_expr_namespac": 69, "register_lazyframe_namespac": 70, "register_series_namespac": 71, "build_info": 72, "collect_al": 73, "concat": [74, 407, 511, 896, 987], "enable_string_cach": 75, "except": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 260], "arrowerror": 76, "columnnotfounderror": 77, "computeerror": 78, "duplicateerror": 79, "invalidoperationerror": 80, "nodataerror": 81, "norowsreturnederror": 82, "polarspanicerror": 83, "rowserror": 84, "schemaerror": 85, "schemafieldnotfounderror": 86, "shapeerror": 87, "structfieldnotfounderror": 88, "toomanyrowsreturnederror": 89, "from_arrow": 90, "from_datafram": 91, "from_dict": [92, 93], "from_numpi": 94, "from_panda": 95, "from_record": 96, "from_repr": 97, "get_index_typ": 98, "io": 99, "csv": [99, 654], "batched_read": 99, "batchedcsvread": [99, 654], "next_batch": 99, "read_avro": 100, "read_csv": 101, "read_csv_batch": 102, "read_databas": 103, "read_delta": 104, "read_excel": 105, "read_ipc": 106, "read_ipc_schema": 107, "read_json": [108, 696], "read_ndjson": 109, "read_parquet": 110, "read_parquet_schema": 111, "scan_csv": 112, "scan_delta": 113, "scan_ipc": 114, "scan_ndjson": 115, "scan_parquet": 116, "scan_pyarrow_dataset": 117, "show_vers": 118, "test": [119, 120, 121, 122, 123, 124, 125, 126, 127, 1067], "assert_frame_equ": 119, "assert_series_equ": 120, "parametr": [121, 122, 123, 124, 125, 126, 127, 1067], "column": [121, 122, 137, 639, 661], "create_list_strategi": 123, "load_profil": 125, "seri": [126, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1059], "set_profil": 127, "threadpool_s": 128, "using_string_cach": 129, "option": 130, "current": 130, "us": 130, "context": 130, "manag": 130, "decor": 130, "aggreg": [131, 261, 655, 745], "__dataframe__": 132, "appli": [133, 238, 270, 571, 725, 751], "bottom_k": [134, 293, 656, 772], "clear": [135, 658, 781], "clone": [136, 659, 785], "corr": [138, 583], "describ": [139, 794], "drop": [140, 663], "drop_in_plac": 141, "drop_nul": [142, 317, 664, 798], "dtype": [143, 665, 845], "estimated_s": [144, 847], "explod": [145, 367, 412, 517, 667, 852, 901, 993], "fill_nan": [147, 369, 669, 855], "fill_nul": [148, 370, 670, 856], "filter": [149, 371, 671, 857], "find_idx_by_nam": 150, "flag": [151, 858], "fold": [152, 598], "frame_equ": 153, "get_column": [154, 155], "glimps": 156, "groupbi": [157, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 674, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 740], "groupby_dynam": [158, 675], "groupby_rol": [159, 676], "hash_row": 160, "head": [161, 241, 381, 415, 602, 677, 728, 863, 904], "height": 162, "hstack": 163, "insert_at_idx": 164, "interpol": [165, 384, 679, 867], "is_dupl": [166, 386, 870], "is_empti": [167, 871], "is_uniqu": [168, 396, 885], "item": [169, 887], "iter_row": 170, "iter_slic": 171, "join": [172, 416, 680, 905], "join_asof": [173, 681], "lazi": [174, 683], "limit": [175, 402, 684, 890], "max": [176, 243, 283, 419, 443, 609, 686, 730, 763, 814, 908, 929], "mean": [177, 244, 420, 444, 611, 687, 731, 815, 909, 930], "median": [178, 245, 445, 612, 688, 732, 816, 931], "melt": [179, 689], "merge_sort": [180, 690], "min": [181, 246, 284, 421, 456, 613, 691, 733, 764, 821, 910, 932], "n_chunk": [182, 934], "n_uniqu": [183, 247, 460, 615, 734, 935], "null_count": [184, 465, 692, 940], "partition_bi": 185, "pipe": [186, 469, 693], "pivot": 187, "product": [188, 472, 944], "quantil": [189, 248, 474, 617, 695, 735, 946], "rechunk": [190, 477, 948], "renam": [191, 697, 950], "replac": [192, 528, 1004], "replace_at_idx": 193, "revers": [194, 422, 481, 698, 911, 952], "row": [195, 196], "rows_by_kei": 197, "sampl": [198, 495, 966], "schema": [199, 699, 1026], "select": [200, 258, 622, 646, 700, 743, 1062], "select_seq": [201, 701], "set_sort": [202, 497, 703, 971], "shape": [203, 972], "shift": [204, 427, 498, 704, 916, 973], "shift_and_fil": [205, 499, 705, 974], "shrink_to_fit": [206, 976], "slice": [207, 428, 506, 532, 707, 917, 982, 1008], "sort": [208, 429, 507, 708, 918, 983], "std": [209, 510, 624, 709, 985], "sum": [210, 249, 285, 430, 551, 626, 710, 736, 765, 919, 1028], "tail": [211, 250, 431, 552, 628, 711, 737, 920, 1029], "take_everi": [212, 554, 712, 1031], "to_arrow": [213, 1035], "to_dict": [214, 215], "to_dummi": [216, 1036], "to_init_repr": [217, 1038], "to_numpi": [218, 1040], "to_panda": [219, 1041], "to_seri": 220, "to_struct": [221, 433, 922], "top_k": [222, 558, 713, 1043], "transpos": 223, "uniqu": [224, 286, 434, 560, 714, 766, 923, 1044], "unnest": [225, 715, 1027], "unstack": 226, "updat": [227, 716], "upsampl": 228, "var": [229, 564, 632, 717, 1048], "vstack": 230, "width": [231, 718], "with_column": [232, 719], "with_columns_seq": [233, 720], "with_row_count": [234, 722], "__iter__": 235, "agg": [236, 723], "all": [237, 266, 403, 567, 724, 748, 892], "count": [239, 305, 584, 726], "first": [240, 372, 413, 597, 672, 727, 902], "last": [242, 399, 417, 606, 682, 729, 906], "attribut": [251, 738, 1052], "comput": [252, 640, 1056], "descript": [253, 739, 1057], "export": [254, 1058], "miscellan": [257, 645, 652, 742, 1061], "manipul": [258, 646, 743, 1062], "data": 259, "type": 259, "numer": [259, 647], "tempor": [259, 650, 1065], "nest": 259, "other": 259, "expr": [262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566], "ab": [262, 746], "add": 263, "agg_group": 264, "alia": [265, 747], "and_": 267, "ani": [268, 404, 569, 749, 893], "append": [269, 750], "approx_n_uniqu": [271, 572], "arcco": [272, 752], "arccosh": [273, 753], "arcsin": [274, 754], "arcsinh": [275, 755], "arctan": [276, 756], "arctanh": [277, 757], "arg_max": [278, 405, 758, 894], "arg_min": [279, 406, 759, 895], "arg_sort": [280, 760], "arg_tru": [281, 761], "arg_uniqu": [282, 762], "arr": [283, 284, 285, 286, 763, 764, 765, 766], "backward_fil": 287, "bin": [288, 289, 290, 291, 292, 767, 768, 769, 770, 771], "contain": [288, 408, 512, 767, 897, 988], "decod": [289, 514, 768, 990], "encod": [290, 515, 769, 991], "ends_with": [291, 516, 770, 992], "starts_with": [292, 536, 771, 1012], "cach": [294, 657], "cast": [295, 773], "cat": [296, 297, 774, 775, 776, 777], "get_categori": [296, 775], "set_ord": [297, 776], "cbrt": [298, 778], "ceil": [299, 779], "clip": [300, 782], "clip_max": [301, 783], "clip_min": [302, 784], "co": [303, 786], "cosh": [304, 787], "cumcount": 306, "cummax": [307, 788], "cummin": [308, 789], "cumprod": [309, 790], "cumsum": [310, 588, 791], "cumulative_ev": [311, 792], "cut": [312, 793], "degre": 313, "diff": [314, 410, 795, 899], "dot": [315, 796], "drop_nan": [316, 797], "dt": [318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844], "base_utc_offset": [318, 800], "cast_time_unit": [319, 801], "combin": [320, 802], "convert_time_zon": [321, 803], "dai": [324, 325, 806, 807], "dst_offset": [326, 808], "epoch": [327, 809], "hour": [328, 329, 810, 811], "is_leap_year": [330, 812], "iso_year": [331, 813], "microsecond": [332, 333, 817, 818], "millisecond": [334, 335, 819, 820], "minut": [336, 337, 822, 823], "month": [338, 824], "month_end": [339, 825], "month_start": [340, 826], "nanosecond": [341, 342, 827, 828], "offset_bi": [343, 829], "ordinal_dai": [344, 830], "quarter": [345, 831], "replace_time_zon": [346, 832], "round": [347, 494, 833, 965], "second": [348, 349, 834, 835], "strftime": [350, 836], "timestamp": [352, 838], "to_str": [353, 839], "truncat": [354, 840], "week": [355, 841], "weekdai": [356, 842], "with_time_unit": [357, 843], "year": [358, 844], "entropi": [359, 846], "eq": [360, 446], "eq_miss": 361, "ewm_mean": [362, 848], "ewm_std": [363, 849], "ewm_var": [364, 850], "exclud": [365, 596], "exp": [366, 851], "extend_const": [368, 854], "flatten": 373, "floor": [374, 859], "floordiv": 375, "forward_fil": 376, "from_json": [377, 673], "ge": 378, "gt": 379, "hash": [380, 862], "implod": [382, 603, 865], "inspect": [383, 678], "is_between": [385, 868], "is_finit": [387, 872], "is_first": [388, 873], "is_in": [389, 875], "is_infinit": [390, 876], "is_nan": [391, 878], "is_not": 392, "is_not_nan": [393, 879], "is_not_nul": [394, 880], "is_nul": [395, 881], "keep_nam": 397, "kurtosi": [398, 888], "le": 400, "len": [401, 889], "count_match": [409, 513, 898, 989], "eval": [411, 900], "get": [414, 903], "length": [418, 523, 907, 999], "set_differ": [423, 912], "set_intersect": [424, 913], "set_symmetric_differ": [425, 914], "set_union": [426, 915], "take": [432, 553, 921, 1030], "log": [435, 924], "log10": [436, 925], "log1p": [437, 926], "lower_bound": [438, 927], "lt": 439, "map": [440, 608, 685], "map_alia": 441, "map_dict": [442, 928], "meta": [446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 644], "has_multiple_output": 447, "is_regex_project": 448, "ne": [449, 463], "output_nam": 450, "pop": 451, "root_nam": 452, "tree_format": 453, "undo_alias": 454, "mod": 457, "mode": [458, 933], "mul": 459, "nan_max": [461, 937], "nan_min": [462, 938], "ne_miss": 464, "or_": 466, "over": 467, "pct_chang": [468, 941], "pow": 470, "prefix": 471, "qcut": [473, 945], "radian": 475, "rank": [476, 947], "reinterpret": [478, 949], "repeat_bi": 479, "reshap": [480, 951], "rle": [482, 953], "rle_id": [483, 954], "rolling_appli": [484, 955], "rolling_max": [485, 956], "rolling_mean": [486, 957], "rolling_median": [487, 958], "rolling_min": [488, 959], "rolling_quantil": [489, 960], "rolling_skew": [490, 961], "rolling_std": [491, 962], "rolling_sum": [492, 963], "rolling_var": [493, 964], "search_sort": [496, 967], "shrink_dtyp": [500, 975], "shuffl": [501, 977], "sign": [502, 978], "sin": [503, 979], "sinh": [504, 980], "skew": [505, 981], "sort_bi": 508, "sqrt": [509, 984], "str": [511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022], "extract": [518, 994], "extract_al": [519, 995], "extract_group": [520, 996], "json_extract": [521, 997], "json_path_match": [522, 998], "ljust": [524, 1000], "lstrip": [525, 1001], "n_char": [526, 1002], "parse_int": [527, 1003], "replace_al": [529, 1005], "rjust": [530, 1006], "rstrip": [531, 1007], "split": [533, 1009], "split_exact": [534, 1010], "splitn": [535, 1011], "strip": [537, 1013], "strptime": [538, 1014], "to_dat": [539, 1015], "to_datetim": [540, 1016], "to_decim": [541, 1017], "to_lowercas": [542, 1018], "to_tim": [543, 1019], "to_titlecas": [544, 1020], "to_uppercas": [545, 1021], "zfill": [546, 1022], "field": [547, 1023, 1024], "rename_field": [548, 1025], "sub": 549, "suffix": 550, "tan": [555, 1032], "tanh": [556, 1033], "to_phys": [557, 1042], "truediv": 559, "unique_count": [561, 1045], "upper_bound": [562, 1046], "value_count": [563, 1047], "where": 565, "xor": 566, "all_horizont": 568, "any_horizont": 570, "arang": 573, "arctan2": 574, "arctan2d": 575, "arg_sort_bi": 576, "arg_wher": 577, "avg": 578, "coalesc": 579, "col": 580, "concat_list": 581, "concat_str": 582, "cov": 585, "cumfold": 586, "cumreduc": 587, "cumsum_horizont": 589, "date_rang": [591, 592], "element": 595, "format": 599, "from_epoch": 600, "group": 601, "int_rang": [604, 605], "lit": 607, "max_horizont": 610, "min_horizont": 614, "ones": 616, "reduc": 618, "repeat": 619, "rolling_corr": 620, "rolling_cov": 621, "sql_expr": 623, "sum_horizont": 627, "time_rang": [630, 631], "when": 633, "zero": 634, "categori": [638, 1055], "name": [639, 936], "express": 642, "oper": [647, 744], "conjunct": 647, "comparison": 647, "string": [648, 1063], "window": 651, "convers": 652, "parallel": 652, "refer": 653, "input": 654, "output": 654, "feather": 654, "ipc": 654, "parquet": 654, "databas": 654, "json": 654, "avro": 654, "excel": 654, "delta": 654, "lake": 654, "dataset": 654, "collect": 660, "deseri": 662, "explain": 666, "fetch": 668, "profil": [694, 1067], "serial": 702, "show_graph": 706, "with_context": 721, "lazygroupbi": [723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737], "read": 742, "write": 742, "logic": 742, "plan": 742, "selector": 744, "import": 744, "set": [744, 969], "uses_lexical_ord": 777, "chunk_length": 780, "get_chunk": 860, "has_valid": 861, "hist": 864, "inner_dtyp": 866, "is_boolean": 869, "is_float": 874, "is_integ": 877, "is_numer": 882, "is_sort": 883, "is_tempor": 884, "is_utf8": 886, "new_from_index": 939, "peak_max": 942, "peak_min": 943, "series_equ": 968, "set_at_idx": 970, "time_unit": 1034, "to_fram": 1037, "to_list": 1039, "view": 1049, "zip_with": 1050, "sql": 1066, "method": 1066, "assert": 1067, "primit": 1067, "strategi": 1067, "helper": 1067, "util": 1068}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 58}, "alltitles": {"polars.DataFrame.corr": [[138, "polars-dataframe-corr"]], "polars.exceptions.ShapeError": [[87, "polars-exceptions-shapeerror"]], "polars.read_csv_batched": [[102, "polars-read-csv-batched"]], "polars.read_parquet_schema": [[111, "polars-read-parquet-schema"]], "polars.exceptions.ColumnNotFoundError": [[77, "polars-exceptions-columnnotfounderror"]], "polars.testing.parametric.columns": [[122, "polars-testing-parametric-columns"]], "polars.DataFrame.describe": [[139, "polars-dataframe-describe"]], "polars.testing.parametric.set_profile": [[127, "polars-testing-parametric-set-profile"]], "polars.scan_parquet": [[116, "polars-scan-parquet"]], "polars.exceptions.PolarsPanicError": [[83, "polars-exceptions-polarspanicerror"]], "polars.testing.assert_series_equal": [[120, "polars-testing-assert-series-equal"]], "polars.DataFrame.apply": [[133, "polars-dataframe-apply"]], "polars.read_excel": [[105, "polars-read-excel"]], "polars.exceptions.InvalidOperationError": [[80, "polars-exceptions-invalidoperationerror"]], "polars.testing.parametric.load_profile": [[125, "polars-testing-parametric-load-profile"]], "polars.DataFrame.__dataframe__": [[132, "polars-dataframe-dataframe"]], "polars.DataFrame.bottom_k": [[134, "polars-dataframe-bottom-k"]], "polars.from_dict": [[92, "polars-from-dict"]], "polars.get_index_type": [[98, "polars-get-index-type"]], "polars.read_parquet": [[110, "polars-read-parquet"]], "polars.DataFrame.dtypes": [[143, "polars-dataframe-dtypes"]], "polars.from_pandas": [[95, "polars-from-pandas"]], "polars.read_ipc_schema": [[107, "polars-read-ipc-schema"]], "polars.exceptions.TooManyRowsReturnedError": [[89, "polars-exceptions-toomanyrowsreturnederror"]], "polars.testing.parametric.dataframes": [[124, "polars-testing-parametric-dataframes"]], "polars.exceptions.NoRowsReturnedError": [[82, "polars-exceptions-norowsreturnederror"]], "polars.DataFrame.columns": [[137, "polars-dataframe-columns"]], "polars.concat": [[74, "polars-concat"]], "polars.DataFrame.explode": [[145, "polars-dataframe-explode"]], "polars.DataFrame.clone": [[136, "polars-dataframe-clone"]], "polars.exceptions.SchemaError": [[85, "polars-exceptions-schemaerror"]], "polars.show_versions": [[118, "polars-show-versions"]], "polars.collect_all": [[73, "polars-collect-all"]], "polars.scan_csv": [[112, "polars-scan-csv"]], "polars.exceptions.NoDataError": [[81, "polars-exceptions-nodataerror"]], "polars.enable_string_cache": [[75, "polars-enable-string-cache"]], "polars.read_delta": [[104, "polars-read-delta"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[99, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.scan_ndjson": [[115, "polars-scan-ndjson"]], "polars.exceptions.ArrowError": [[76, "polars-exceptions-arrowerror"]], "polars.exceptions.StructFieldNotFoundError": [[88, "polars-exceptions-structfieldnotfounderror"]], "polars.scan_delta": [[113, "polars-scan-delta"]], "polars.read_csv": [[101, "polars-read-csv"]], "polars.from_numpy": [[94, "polars-from-numpy"]], "polars.testing.parametric.column": [[121, "polars-testing-parametric-column"]], "polars.testing.parametric.series": [[126, "polars-testing-parametric-series"]], "polars.testing.assert_frame_equal": [[119, "polars-testing-assert-frame-equal"]], "polars.threadpool_size": [[128, "polars-threadpool-size"]], "Aggregation": [[131, "aggregation"], [745, "aggregation"], [655, "aggregation"], [261, "aggregation"]], "polars.from_dataframe": [[91, "polars-from-dataframe"]], "polars.DataFrame.drop": [[140, "polars-dataframe-drop"]], "polars.scan_ipc": [[114, "polars-scan-ipc"]], "polars.read_ndjson": [[109, "polars-read-ndjson"]], "polars.exceptions.DuplicateError": [[79, "polars-exceptions-duplicateerror"]], "polars.exceptions.ComputeError": [[78, "polars-exceptions-computeerror"]], "polars.read_avro": [[100, "polars-read-avro"]], "polars.from_dicts": [[93, "polars-from-dicts"]], "polars.using_string_cache": [[129, "polars-using-string-cache"]], "Config": [[130, "config"]], "Config options": [[130, "config-options"]], "Config load, save, and current state": [[130, "config-load-save-and-current-state"]], "Use as a context manager": [[130, "use-as-a-context-manager"]], "Use as a function decorator": [[130, "use-as-a-function-decorator"]], "polars.from_records": [[96, "polars-from-records"]], "polars.DataFrame.drop_nulls": [[142, "polars-dataframe-drop-nulls"]], "polars.DataFrame.estimated_size": [[144, "polars-dataframe-estimated-size"]], "polars.exceptions.RowsError": [[84, "polars-exceptions-rowserror"]], "polars.read_database": [[103, "polars-read-database"]], "polars.read_ipc": [[106, "polars-read-ipc"]], "polars.scan_pyarrow_dataset": [[117, "polars-scan-pyarrow-dataset"]], "polars.exceptions.SchemaFieldNotFoundError": [[86, "polars-exceptions-schemafieldnotfounderror"]], "polars.read_json": [[108, "polars-read-json"]], "polars.from_arrow": [[90, "polars-from-arrow"]], "polars.DataFrame.drop_in_place": [[141, "polars-dataframe-drop-in-place"]], "polars.testing.parametric.create_list_strategy": [[123, "polars-testing-parametric-create-list-strategy"]], "polars.from_repr": [[97, "polars-from-repr"]], "polars.DataFrame.clear": [[135, "polars-dataframe-clear"]], "polars.Config.set_ascii_tables": [[10, "polars-config-set-ascii-tables"]], "polars.Config.set_tbl_rows": [[23, "polars-config-set-tbl-rows"]], "polars.Date": [[37, "polars-date"]], "polars.Config.set_verbose": [[25, "polars-config-set-verbose"]], "polars.Config.set_tbl_hide_column_names": [[20, "polars-config-set-tbl-hide-column-names"]], "polars.DataFrame.write_parquet": [[35, "polars-dataframe-write-parquet"]], "polars.Config.save": [[9, "polars-config-save"]], "polars.Decimal": [[39, "polars-decimal"]], "polars.SQLContext.tables": [[56, "polars-sqlcontext-tables"]], "polars.SQLContext.register_globals": [[54, "polars-sqlcontext-register-globals"]], "polars.Float64": [[42, "polars-float64"]], "polars.Float32": [[41, "polars-float32"]], "polars.Array": [[2, "polars-array"]], "polars.DataFrame.write_database": [[29, "polars-dataframe-write-database"]], "polars.Time": [[60, "polars-time"]], "polars.UInt8": [[64, "polars-uint8"]], "polars.api.register_lazyframe_namespace": [[70, "polars-api-register-lazyframe-namespace"]], "polars.build_info": [[72, "polars-build-info"]], "polars.UInt16": [[61, "polars-uint16"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1067, "examples"], [744, "examples"]], "polars.DataFrame.write_csv": [[28, "polars-dataframe-write-csv"]], "polars.Duration": [[40, "polars-duration"]], "polars.SQLContext.register_many": [[55, "polars-sqlcontext-register-many"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.SQLContext.execute": [[52, "polars-sqlcontext-execute"]], "polars.Config.set_tbl_cols": [[15, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_formatting": [[18, "polars-config-set-tbl-formatting"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Int8": [[46, "polars-int8"]], "polars.api.register_series_namespace": [[71, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_cell_alignment": [[14, "polars-config-set-tbl-cell-alignment"]], "polars.DataFrame.write_excel": [[31, "polars-dataframe-write-excel"]], "polars.Config.set_streaming_chunk_size": [[13, "polars-config-set-streaming-chunk-size"]], "polars.Int16": [[43, "polars-int16"]], "polars.StringCache": [[58, "polars-stringcache"]], "polars.LazyFrame.sink_parquet": [[48, "polars-lazyframe-sink-parquet"]], "polars.DataFrame.write_ndjson": [[34, "polars-dataframe-write-ndjson"]], "polars.DataFrame.write_avro": [[27, "polars-dataframe-write-avro"]], "polars.Binary": [[3, "polars-binary"]], "polars.align_frames": [[67, "polars-align-frames"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Int64": [[45, "polars-int64"]], "polars.Utf8": [[66, "polars-utf8"]], "polars.Config.set_tbl_column_data_type_inline": [[16, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.restore_defaults": [[8, "polars-config-restore-defaults"]], "polars.Int32": [[44, "polars-int32"]], "polars.api.register_expr_namespace": [[69, "polars-api-register-expr-namespace"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.List": [[49, "polars-list"]], "polars.api.register_dataframe_namespace": [[68, "polars-api-register-dataframe-namespace"]], "polars.DataType": [[36, "polars-datatype"]], "polars.Config.set_tbl_width_chars": [[24, "polars-config-set-tbl-width-chars"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.SQLContext.unregister": [[57, "polars-sqlcontext-unregister"]], "polars.Config.set_tbl_hide_dataframe_shape": [[21, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_delta": [[30, "polars-dataframe-write-delta"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_tbl_dataframe_shape_below": [[17, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Unknown": [[65, "polars-unknown"]], "polars.DataFrame.write_json": [[33, "polars-dataframe-write-json"]], "polars.SQLContext.register": [[53, "polars-sqlcontext-register"]], "polars.UInt32": [[62, "polars-uint32"]], "polars.Config.set_tbl_hide_column_data_types": [[19, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_hide_dtype_separator": [[22, "polars-config-set-tbl-hide-dtype-separator"]], "polars.DataFrame.write_ipc": [[32, "polars-dataframe-write-ipc"]], "polars.Datetime": [[38, "polars-datetime"]], "polars.LazyFrame.sink_ipc": [[47, "polars-lazyframe-sink-ipc"]], "polars.UInt64": [[63, "polars-uint64"]], "polars.Object": [[51, "polars-object"]], "polars.Config.state": [[26, "polars-config-state"]], "polars.Struct": [[59, "polars-struct"]], "polars.Null": [[50, "polars-null"]], "polars.Series.str.starts_with": [[1012, "polars-series-str-starts-with"]], "polars.Series.str.lstrip": [[1001, "polars-series-str-lstrip"]], "polars.Series.sinh": [[980, "polars-series-sinh"]], "polars.Series.str.concat": [[987, "polars-series-str-concat"]], "polars.Series.str.count_match": [[989, "polars-series-str-count-match"]], "polars.Series.rolling_max": [[956, "polars-series-rolling-max"]], "polars.Series.rolling_skew": [[961, "polars-series-rolling-skew"]], "polars.Series.shrink_dtype": [[975, "polars-series-shrink-dtype"]], "polars.Series.str.n_chars": [[1002, "polars-series-str-n-chars"]], "polars.Series.shift_and_fill": [[974, "polars-series-shift-and-fill"]], "polars.Series.round": [[965, "polars-series-round"]], "polars.Series.shrink_to_fit": [[976, "polars-series-shrink-to-fit"]], "polars.Series.sort": [[983, "polars-series-sort"]], "polars.Series.str.ends_with": [[992, "polars-series-str-ends-with"]], "polars.Series.str.to_decimal": [[1017, "polars-series-str-to-decimal"]], "polars.Series.rolling_quantile": [[960, "polars-series-rolling-quantile"]], "polars.Series.skew": [[981, "polars-series-skew"]], "polars.Series.set": [[969, "polars-series-set"]], "polars.Series.reverse": [[952, "polars-series-reverse"]], "polars.Series.std": [[985, "polars-series-std"]], "polars.Series.str": [[986, "polars-series-str"]], "polars.Series.str.lengths": [[999, "polars-series-str-lengths"]], "polars.Series.str.split_exact": [[1010, "polars-series-str-split-exact"]], "polars.Series.str.splitn": [[1011, "polars-series-str-splitn"]], "polars.Series.str.to_datetime": [[1016, "polars-series-str-to-datetime"]], "polars.Series.str.replace": [[1004, "polars-series-str-replace"]], "polars.Series.series_equal": [[968, "polars-series-series-equal"]], "polars.Series.str.slice": [[1008, "polars-series-str-slice"]], "polars.Series.reshape": [[951, "polars-series-reshape"]], "polars.Series.rolling_apply": [[955, "polars-series-rolling-apply"]], "polars.Series.str.extract": [[994, "polars-series-str-extract"]], "polars.Series.rolling_min": [[959, "polars-series-rolling-min"]], "polars.Series.set_sorted": [[971, "polars-series-set-sorted"]], "polars.Series.str.rjust": [[1006, "polars-series-str-rjust"]], "polars.Series.str.split": [[1009, "polars-series-str-split"]], "polars.Series.str.to_date": [[1015, "polars-series-str-to-date"]], "polars.Series.sqrt": [[984, "polars-series-sqrt"]], "polars.Series.reinterpret": [[949, "polars-series-reinterpret"]], "polars.Series.rolling_std": [[962, "polars-series-rolling-std"]], "polars.Series.shift": [[973, "polars-series-shift"]], "polars.Series.str.explode": [[993, "polars-series-str-explode"]], "polars.Series.sample": [[966, "polars-series-sample"]], "polars.Series.rolling_var": [[964, "polars-series-rolling-var"]], "polars.Series.slice": [[982, "polars-series-slice"]], "polars.Series.rename": [[950, "polars-series-rename"]], "polars.Series.sign": [[978, "polars-series-sign"]], "polars.Series.str.extract_all": [[995, "polars-series-str-extract-all"]], "polars.Series.rolling_sum": [[963, "polars-series-rolling-sum"]], "polars.Series.str.rstrip": [[1007, "polars-series-str-rstrip"]], "polars.Series.str.ljust": [[1000, "polars-series-str-ljust"]], "polars.Series.str.extract_groups": [[996, "polars-series-str-extract-groups"]], "polars.Series.set_at_idx": [[970, "polars-series-set-at-idx"]], "polars.Series.rle": [[953, "polars-series-rle"]], "polars.Series.rolling_mean": [[957, "polars-series-rolling-mean"]], "polars.Series.str.decode": [[990, "polars-series-str-decode"]], "polars.Series.sin": [[979, "polars-series-sin"]], "polars.Series.str.encode": [[991, "polars-series-str-encode"]], "polars.Series.str.json_path_match": [[998, "polars-series-str-json-path-match"]], "polars.Series.str.parse_int": [[1003, "polars-series-str-parse-int"]], "polars.Series.str.strip": [[1013, "polars-series-str-strip"]], "polars.Series.str.strptime": [[1014, "polars-series-str-strptime"]], "polars.Series.rolling_median": [[958, "polars-series-rolling-median"]], "polars.Series.str.contains": [[988, "polars-series-str-contains"]], "polars.Series.str.to_uppercase": [[1021, "polars-series-str-to-uppercase"]], "polars.Series.shape": [[972, "polars-series-shape"]], "polars.Series.str.to_time": [[1019, "polars-series-str-to-time"]], "polars.Series.str.to_lowercase": [[1018, "polars-series-str-to-lowercase"]], "polars.Series.str.to_titlecase": [[1020, "polars-series-str-to-titlecase"]], "polars.Series.str.replace_all": [[1005, "polars-series-str-replace-all"]], "polars.Series.shuffle": [[977, "polars-series-shuffle"]], "polars.Series.search_sorted": [[967, "polars-series-search-sorted"]], "polars.Series.str.json_extract": [[997, "polars-series-str-json-extract"]], "polars.Series.rle_id": [[954, "polars-series-rle-id"]], "polars.Series.is_not_null": [[880, "polars-series-is-not-null"]], "polars.Series.is_temporal": [[884, "polars-series-is-temporal"]], "polars.Series.list.all": [[892, "polars-series-list-all"]], "polars.Series.nan_max": [[937, "polars-series-nan-max"]], "polars.Series.log10": [[925, "polars-series-log10"]], "polars.Series.list.eval": [[900, "polars-series-list-eval"]], "polars.Series.item": [[887, "polars-series-item"]], "polars.Series.list.last": [[906, "polars-series-list-last"]], "polars.Series.list": [[891, "polars-series-list"]], "polars.Series.is_unique": [[885, "polars-series-is-unique"]], "polars.Series.list.get": [[903, "polars-series-list-get"]], "polars.Series.product": [[944, "polars-series-product"]], "polars.Series.list.max": [[908, "polars-series-list-max"]], "polars.Series.list.slice": [[917, "polars-series-list-slice"]], "polars.Series.nan_min": [[938, "polars-series-nan-min"]], "polars.Series.list.contains": [[897, "polars-series-list-contains"]], "polars.Series.list.concat": [[896, "polars-series-list-concat"]], "polars.Series.list.head": [[904, "polars-series-list-head"]], "polars.Series.limit": [[890, "polars-series-limit"]], "polars.Series.list.count_match": [[898, "polars-series-list-count-match"]], "polars.Series.list.set_union": [[915, "polars-series-list-set-union"]], "polars.Series.peak_max": [[942, "polars-series-peak-max"]], "polars.Series.list.reverse": [[911, "polars-series-list-reverse"]], "polars.Series.list.any": [[893, "polars-series-list-any"]], "polars.Series.list.to_struct": [[922, "polars-series-list-to-struct"]], "polars.Series.list.shift": [[916, "polars-series-list-shift"]], "polars.Series.list.tail": [[920, "polars-series-list-tail"]], "polars.Series.name": [[936, "polars-series-name"]], "polars.Series.is_sorted": [[883, "polars-series-is-sorted"]], "polars.Series.list.unique": [[923, "polars-series-list-unique"]], "polars.Series.median": [[931, "polars-series-median"]], "polars.Series.is_null": [[881, "polars-series-is-null"]], "polars.Series.list.arg_min": [[895, "polars-series-list-arg-min"]], "polars.Series.mean": [[930, "polars-series-mean"]], "polars.Series.min": [[932, "polars-series-min"]], "polars.Series.n_unique": [[935, "polars-series-n-unique"]], "polars.Series.new_from_index": [[939, "polars-series-new-from-index"]], "polars.Series.map_dict": [[928, "polars-series-map-dict"]], "polars.Series.rechunk": [[948, "polars-series-rechunk"]], "polars.Series.list.sum": [[919, "polars-series-list-sum"]], "polars.Series.mode": [[933, "polars-series-mode"]], "polars.Series.null_count": [[940, "polars-series-null-count"]], "polars.Series.n_chunks": [[934, "polars-series-n-chunks"]], "polars.Series.log1p": [[926, "polars-series-log1p"]], "polars.Series.is_nan": [[878, "polars-series-is-nan"]], "polars.Series.log": [[924, "polars-series-log"]], "polars.Series.list.set_symmetric_difference": [[914, "polars-series-list-set-symmetric-difference"]], "polars.Series.quantile": [[946, "polars-series-quantile"]], "polars.Series.list.explode": [[901, "polars-series-list-explode"]], "polars.Series.len": [[889, "polars-series-len"]], "polars.Series.list.arg_max": [[894, "polars-series-list-arg-max"]], "polars.Series.list.first": [[902, "polars-series-list-first"]], "polars.Series.is_infinite": [[876, "polars-series-is-infinite"]], "polars.Series.max": [[929, "polars-series-max"]], "polars.Series.list.mean": [[909, "polars-series-list-mean"]], "polars.Series.peak_min": [[943, "polars-series-peak-min"]], "polars.Series.list.set_intersection": [[913, "polars-series-list-set-intersection"]], "polars.Series.rank": [[947, "polars-series-rank"]], "polars.Series.is_utf8": [[886, "polars-series-is-utf8"]], "polars.Series.is_not_nan": [[879, "polars-series-is-not-nan"]], "polars.Series.list.sort": [[918, "polars-series-list-sort"]], "polars.Series.list.take": [[921, "polars-series-list-take"]], "polars.Series.list.set_difference": [[912, "polars-series-list-set-difference"]], "polars.Series.lower_bound": [[927, "polars-series-lower-bound"]], "polars.Series.list.diff": [[899, "polars-series-list-diff"]], "polars.Series.pct_change": [[941, "polars-series-pct-change"]], "polars.Series.list.join": [[905, "polars-series-list-join"]], "polars.Series.is_numeric": [[882, "polars-series-is-numeric"]], "polars.Series.list.min": [[910, "polars-series-list-min"]], "polars.Series.qcut": [[945, "polars-series-qcut"]], "polars.Series.is_integer": [[877, "polars-series-is-integer"]], "polars.Series.kurtosis": [[888, "polars-series-kurtosis"]], "polars.Series.list.lengths": [[907, "polars-series-list-lengths"]], "polars.Series.dt.to_string": [[839, "polars-series-dt-to-string"]], "polars.Series.dt.hour": [[810, "polars-series-dt-hour"]], "polars.Series.get_chunks": [[860, "polars-series-get-chunks"]], "polars.Series.is_duplicated": [[870, "polars-series-is-duplicated"]], "polars.Series.dt.time": [[837, "polars-series-dt-time"]], "polars.Series.implode": [[865, "polars-series-implode"]], "polars.Series.dt.datetime": [[805, "polars-series-dt-datetime"]], "polars.Series.dt.iso_year": [[813, "polars-series-dt-iso-year"]], "polars.Series.floor": [[859, "polars-series-floor"]], "polars.Series.dt.ordinal_day": [[830, "polars-series-dt-ordinal-day"]], "polars.Series.dt.month_start": [[826, "polars-series-dt-month-start"]], "polars.Series.is_finite": [[872, "polars-series-is-finite"]], "polars.Series.dt.dst_offset": [[808, "polars-series-dt-dst-offset"]], "polars.Series.dt.seconds": [[835, "polars-series-dt-seconds"]], "polars.Series.filter": [[857, "polars-series-filter"]], "polars.Series.is_in": [[875, "polars-series-is-in"]], "polars.Series.estimated_size": [[847, "polars-series-estimated-size"]], "polars.Series.dt.minute": [[822, "polars-series-dt-minute"]], "polars.Series.is_empty": [[871, "polars-series-is-empty"]], "polars.Series.ewm_mean": [[848, "polars-series-ewm-mean"]], "polars.Series.dt.mean": [[815, "polars-series-dt-mean"]], "polars.Series.extend_constant": [[854, "polars-series-extend-constant"]], "polars.Series.dt.nanoseconds": [[828, "polars-series-dt-nanoseconds"]], "polars.Series.dt.microseconds": [[818, "polars-series-dt-microseconds"]], "polars.Series.dt.month_end": [[825, "polars-series-dt-month-end"]], "polars.Series.dt.second": [[834, "polars-series-dt-second"]], "polars.Series.dtype": [[845, "polars-series-dtype"]], "polars.Series.fill_nan": [[855, "polars-series-fill-nan"]], "polars.Series.has_validity": [[861, "polars-series-has-validity"]], "polars.Series.dt.quarter": [[831, "polars-series-dt-quarter"]], "polars.Series.dt.strftime": [[836, "polars-series-dt-strftime"]], "polars.Series.explode": [[852, "polars-series-explode"]], "polars.Series.dt.milliseconds": [[820, "polars-series-dt-milliseconds"]], "polars.Series.dt.nanosecond": [[827, "polars-series-dt-nanosecond"]], "polars.Series.hist": [[864, "polars-series-hist"]], "polars.Series.is_boolean": [[869, "polars-series-is-boolean"]], "polars.Series.dt.day": [[806, "polars-series-dt-day"]], "polars.Series.extend": [[853, "polars-series-extend"]], "polars.Series.dt.minutes": [[823, "polars-series-dt-minutes"]], "polars.Series.ewm_std": [[849, "polars-series-ewm-std"]], "polars.Series.is_between": [[868, "polars-series-is-between"]], "polars.Series.flags": [[858, "polars-series-flags"]], "polars.Series.is_first": [[873, "polars-series-is-first"]], "polars.Series.dt.timestamp": [[838, "polars-series-dt-timestamp"]], "polars.Series.dt.microsecond": [[817, "polars-series-dt-microsecond"]], "polars.Series.dt.max": [[814, "polars-series-dt-max"]], "polars.Series.dt.weekday": [[842, "polars-series-dt-weekday"]], "polars.Series.ewm_var": [[850, "polars-series-ewm-var"]], "polars.Series.dt.week": [[841, "polars-series-dt-week"]], "polars.Series.exp": [[851, "polars-series-exp"]], "polars.Series.inner_dtype": [[866, "polars-series-inner-dtype"]], "polars.Series.dt.with_time_unit": [[843, "polars-series-dt-with-time-unit"]], "polars.Series.dt.convert_time_zone": [[803, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.month": [[824, "polars-series-dt-month"]], "polars.Series.dt.days": [[807, "polars-series-dt-days"]], "polars.Series.is_float": [[874, "polars-series-is-float"]], "polars.Series.hash": [[862, "polars-series-hash"]], "polars.Series.dt.min": [[821, "polars-series-dt-min"]], "polars.Series.fill_null": [[856, "polars-series-fill-null"]], "polars.Series.interpolate": [[867, "polars-series-interpolate"]], "polars.Series.dt.replace_time_zone": [[832, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.hours": [[811, "polars-series-dt-hours"]], "polars.Series.dt.millisecond": [[819, "polars-series-dt-millisecond"]], "polars.Series.head": [[863, "polars-series-head"]], "polars.Series.dt.median": [[816, "polars-series-dt-median"]], "polars.Series.dt.epoch": [[809, "polars-series-dt-epoch"]], "polars.Series.entropy": [[846, "polars-series-entropy"]], "polars.Series.dt.offset_by": [[829, "polars-series-dt-offset-by"]], "polars.Series.dt.truncate": [[840, "polars-series-dt-truncate"]], "polars.Series.dt.year": [[844, "polars-series-dt-year"]], "polars.Series.dt.date": [[804, "polars-series-dt-date"]], "polars.Series.dt.round": [[833, "polars-series-dt-round"]], "polars.Series.dt.is_leap_year": [[812, "polars-series-dt-is-leap-year"]], "Attributes": [[1052, "attributes"], [738, "attributes"], [251, "attributes"]], "Series": [[1059, "series"]], "Array": [[1051, "array"], [635, "array"]], "Utils": [[1068, "utils"]], "polars.Series.value_counts": [[1047, "polars-series-value-counts"]], "polars.Series.struct.fields": [[1024, "polars-series-struct-fields"]], "polars.Series.to_arrow": [[1035, "polars-series-to-arrow"]], "polars.Series.struct.rename_fields": [[1025, "polars-series-struct-rename-fields"]], "polars.Series.unique_counts": [[1045, "polars-series-unique-counts"]], "polars.Series.time_unit": [[1034, "polars-series-time-unit"]], "polars.Series.struct.field": [[1023, "polars-series-struct-field"]], "polars.Series.unique": [[1044, "polars-series-unique"]], "polars.Series.tail": [[1029, "polars-series-tail"]], "Binary": [[1053, "binary"], [636, "binary"], [647, "binary"]], "List": [[1060, "list"], [643, "list"]], "Boolean": [[1054, "boolean"], [637, "boolean"]], "polars.Series.to_init_repr": [[1038, "polars-series-to-init-repr"]], "polars.Series.var": [[1048, "polars-series-var"]], "Computation": [[1056, "computation"], [640, "computation"], [252, "computation"]], "polars.Series.to_dummies": [[1036, "polars-series-to-dummies"]], "Manipulation/selection": [[1062, "manipulation-selection"], [743, "manipulation-selection"], [646, "manipulation-selection"], [258, "manipulation-selection"]], "Miscellaneous": [[1061, "miscellaneous"], [742, "miscellaneous"], [652, "miscellaneous"], [645, "miscellaneous"], [257, "miscellaneous"]], "polars.Series.upper_bound": [[1046, "polars-series-upper-bound"]], "polars.Series.top_k": [[1043, "polars-series-top-k"]], "polars.Series.view": [[1049, "polars-series-view"]], "polars.Series.to_list": [[1039, "polars-series-to-list"]], "String": [[1063, "string"], [648, "string"]], "polars.Series.struct.schema": [[1026, "polars-series-struct-schema"]], "polars.Series.struct.unnest": [[1027, "polars-series-struct-unnest"]], "polars.Series.to_frame": [[1037, "polars-series-to-frame"]], "polars.Series.tanh": [[1033, "polars-series-tanh"]], "polars.Series.str.zfill": [[1022, "polars-series-str-zfill"]], "polars.Series.to_pandas": [[1041, "polars-series-to-pandas"]], "SQL": [[1066, "sql"]], "Methods": [[1066, "methods"]], "polars.Series.to_numpy": [[1040, "polars-series-to-numpy"]], "polars.Series.sum": [[1028, "polars-series-sum"]], "polars.Series.to_physical": [[1042, "polars-series-to-physical"]], "polars.Series.tan": [[1032, "polars-series-tan"]], "Struct": [[1064, "struct"], [649, "struct"]], "Categories": [[1055, "categories"], [638, "categories"]], "polars.Series.take_every": [[1031, "polars-series-take-every"]], "polars.Series.zip_with": [[1050, "polars-series-zip-with"]], "Temporal": [[1065, "temporal"], [650, "temporal"], [259, "temporal"]], "Export": [[1058, "export"], [254, "export"]], "Descriptive": [[1057, "descriptive"], [739, "descriptive"], [253, "descriptive"]], "Testing": [[1067, "testing"]], "Asserts": [[1067, "asserts"]], "Parametric testing": [[1067, "parametric-testing"]], "Polars primitives": [[1067, "polars-primitives"]], "Strategy helpers": [[1067, "strategy-helpers"]], "Profiles": [[1067, "profiles"]], "polars.Series.take": [[1030, "polars-series-take"]], "polars.LazyFrame.tail": [[711, "polars-lazyframe-tail"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[725, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.join_asof": [[681, "polars-lazyframe-join-asof"]], "polars.LazyFrame.map": [[685, "polars-lazyframe-map"]], "polars.LazyFrame.columns": [[661, "polars-lazyframe-columns"]], "polars.LazyFrame.median": [[688, "polars-lazyframe-median"]], "polars.LazyFrame.profile": [[694, "polars-lazyframe-profile"]], "polars.LazyFrame.with_columns_seq": [[720, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.groupby": [[674, "polars-lazyframe-groupby"]], "polars.LazyFrame.pipe": [[693, "polars-lazyframe-pipe"]], "polars.LazyFrame.cache": [[657, "polars-lazyframe-cache"]], "polars.LazyFrame.read_json": [[696, "polars-lazyframe-read-json"]], "polars.LazyFrame.show_graph": [[706, "polars-lazyframe-show-graph"]], "polars.LazyFrame.min": [[691, "polars-lazyframe-min"]], "polars.LazyFrame.with_context": [[721, "polars-lazyframe-with-context"]], "polars.LazyFrame.shift_and_fill": [[705, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.fill_nan": [[669, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.collect": [[660, "polars-lazyframe-collect"]], "polars.LazyFrame.set_sorted": [[703, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.head": [[677, "polars-lazyframe-head"]], "polars.LazyFrame.last": [[682, "polars-lazyframe-last"]], "polars.LazyFrame.groupby_rolling": [[676, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.drop_nulls": [[664, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.explain": [[666, "polars-lazyframe-explain"]], "polars.LazyFrame.quantile": [[695, "polars-lazyframe-quantile"]], "polars.LazyFrame.limit": [[684, "polars-lazyframe-limit"]], "polars.LazyFrame.schema": [[699, "polars-lazyframe-schema"]], "polars.LazyFrame.inspect": [[678, "polars-lazyframe-inspect"]], "polars.LazyFrame.unique": [[714, "polars-lazyframe-unique"]], "polars.LazyFrame.deserialize": [[662, "polars-lazyframe-deserialize"]], "polars.LazyFrame.rename": [[697, "polars-lazyframe-rename"]], "polars.LazyFrame.unnest": [[715, "polars-lazyframe-unnest"]], "polars.LazyFrame.explode": [[667, "polars-lazyframe-explode"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[723, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.melt": [[689, "polars-lazyframe-melt"]], "polars.LazyFrame.null_count": [[692, "polars-lazyframe-null-count"]], "polars.LazyFrame.sum": [[710, "polars-lazyframe-sum"]], "polars.LazyFrame.drop": [[663, "polars-lazyframe-drop"]], "polars.LazyFrame.take_every": [[712, "polars-lazyframe-take-every"]], "polars.LazyFrame.fetch": [[668, "polars-lazyframe-fetch"]], "polars.LazyFrame.serialize": [[702, "polars-lazyframe-serialize"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[724, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[728, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.LazyFrame.filter": [[671, "polars-lazyframe-filter"]], "polars.LazyFrame.groupby_dynamic": [[675, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.first": [[672, "polars-lazyframe-first"]], "polars.LazyFrame.merge_sorted": [[690, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.with_columns": [[719, "polars-lazyframe-with-columns"]], "polars.LazyFrame.reverse": [[698, "polars-lazyframe-reverse"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[727, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.slice": [[707, "polars-lazyframe-slice"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[729, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.lazy": [[683, "polars-lazyframe-lazy"]], "polars.LazyFrame.clear": [[658, "polars-lazyframe-clear"]], "polars.LazyFrame.top_k": [[713, "polars-lazyframe-top-k"]], "polars.LazyFrame.fill_null": [[670, "polars-lazyframe-fill-null"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[726, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.LazyFrame.with_row_count": [[722, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.dtypes": [[665, "polars-lazyframe-dtypes"]], "polars.LazyFrame.width": [[718, "polars-lazyframe-width"]], "polars.LazyFrame.interpolate": [[679, "polars-lazyframe-interpolate"]], "polars.LazyFrame.update": [[716, "polars-lazyframe-update"]], "polars.LazyFrame.join": [[680, "polars-lazyframe-join"]], "polars.LazyFrame.var": [[717, "polars-lazyframe-var"]], "polars.LazyFrame.max": [[686, "polars-lazyframe-max"]], "polars.LazyFrame.mean": [[687, "polars-lazyframe-mean"]], "polars.LazyFrame.shift": [[704, "polars-lazyframe-shift"]], "polars.LazyFrame.sort": [[708, "polars-lazyframe-sort"]], "polars.LazyFrame.from_json": [[673, "polars-lazyframe-from-json"]], "polars.LazyFrame.std": [[709, "polars-lazyframe-std"]], "polars.LazyFrame.select_seq": [[701, "polars-lazyframe-select-seq"]], "polars.LazyFrame.clone": [[659, "polars-lazyframe-clone"]], "polars.LazyFrame.select": [[700, "polars-lazyframe-select"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[733, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.Series.arccosh": [[753, "polars-series-arccosh"]], "polars.Series.bin.ends_with": [[770, "polars-series-bin-ends-with"]], "polars.Series.cbrt": [[778, "polars-series-cbrt"]], "polars.Series.cat.set_ordering": [[776, "polars-series-cat-set-ordering"]], "polars.Series.arccos": [[752, "polars-series-arccos"]], "polars.Series.apply": [[751, "polars-series-apply"]], "polars.Series.arg_unique": [[762, "polars-series-arg-unique"]], "polars.Series.drop_nulls": [[798, "polars-series-drop-nulls"]], "polars.Series.dt": [[799, "polars-series-dt"]], "polars.Series.ceil": [[779, "polars-series-ceil"]], "polars.Series.chunk_lengths": [[780, "polars-series-chunk-lengths"]], "polars.Series.cummin": [[789, "polars-series-cummin"]], "Selectors": [[744, "selectors"]], "Importing": [[744, "importing"]], "Set operations": [[744, "set-operations"]], "Functions": [[744, "functions"], [652, "functions"], [641, "functions"]], "polars.Series.bin.contains": [[767, "polars-series-bin-contains"]], "polars.Series.cumprod": [[790, "polars-series-cumprod"]], "polars.Series.arr.unique": [[766, "polars-series-arr-unique"]], "Read/write logical plan": [[742, "read-write-logical-plan"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[737, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.alias": [[747, "polars-series-alias"]], "polars.Series.arr.max": [[763, "polars-series-arr-max"]], "polars.Series.cosh": [[787, "polars-series-cosh"]], "polars.Series.clone": [[785, "polars-series-clone"]], "polars.Series.arg_min": [[759, "polars-series-arg-min"]], "polars.Series.bin.starts_with": [[771, "polars-series-bin-starts-with"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[731, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.Series.arctanh": [[757, "polars-series-arctanh"]], "polars.Series.cat": [[774, "polars-series-cat"]], "polars.Series.cos": [[786, "polars-series-cos"]], "polars.Series.dot": [[796, "polars-series-dot"]], "polars.Series.all": [[748, "polars-series-all"]], "polars.Series.arctan": [[756, "polars-series-arctan"]], "polars.Series.arcsin": [[754, "polars-series-arcsin"]], "polars.Series.cut": [[793, "polars-series-cut"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[732, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.Series.cumsum": [[791, "polars-series-cumsum"]], "polars.Series.arg_true": [[761, "polars-series-arg-true"]], "polars.Series.arr.sum": [[765, "polars-series-arr-sum"]], "polars.Series.bin.decode": [[768, "polars-series-bin-decode"]], "polars.Series.cat.get_categories": [[775, "polars-series-cat-get-categories"]], "polars.Series.dt.base_utc_offset": [[800, "polars-series-dt-base-utc-offset"]], "polars.Series.clear": [[781, "polars-series-clear"]], "polars.Series.cummax": [[788, "polars-series-cummax"]], "polars.Series.bin.encode": [[769, "polars-series-bin-encode"]], "polars.Series.arg_sort": [[760, "polars-series-arg-sort"]], "polars.Series.clip": [[782, "polars-series-clip"]], "polars.Series.bottom_k": [[772, "polars-series-bottom-k"]], "polars.Series.cat.uses_lexical_ordering": [[777, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.arg_max": [[758, "polars-series-arg-max"]], "polars.Series.arr.min": [[764, "polars-series-arr-min"]], "polars.Series.describe": [[794, "polars-series-describe"]], "polars.Series.cast": [[773, "polars-series-cast"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[736, "polars-lazyframe-groupby-lazygroupby-sum"]], "LazyFrame": [[741, "lazyframe"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[734, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.Series.diff": [[795, "polars-series-diff"]], "polars.Series.abs": [[746, "polars-series-abs"]], "polars.Series.clip_max": [[783, "polars-series-clip-max"]], "polars.Series.dt.combine": [[802, "polars-series-dt-combine"]], "polars.Series.dt.cast_time_unit": [[801, "polars-series-dt-cast-time-unit"]], "polars.Series.drop_nans": [[797, "polars-series-drop-nans"]], "GroupBy": [[740, "groupby"], [255, "groupby"]], "polars.Series.arcsinh": [[755, "polars-series-arcsinh"]], "polars.Series.clip_min": [[784, "polars-series-clip-min"]], "polars.Series.append": [[750, "polars-series-append"]], "polars.Series.cumulative_eval": [[792, "polars-series-cumulative-eval"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[730, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[735, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.any": [[749, "polars-series-any"]], "polars.Expr.str.json_extract": [[521, "polars-expr-str-json-extract"]], "polars.Expr.str.slice": [[532, "polars-expr-str-slice"]], "polars.Expr.str.splitn": [[535, "polars-expr-str-splitn"]], "polars.Expr.top_k": [[558, "polars-expr-top-k"]], "polars.col": [[580, "polars-col"]], "polars.Expr.str.count_match": [[513, "polars-expr-str-count-match"]], "polars.Expr.str.n_chars": [[526, "polars-expr-str-n-chars"]], "polars.Expr.str.extract_groups": [[520, "polars-expr-str-extract-groups"]], "polars.Expr.sum": [[551, "polars-expr-sum"]], "polars.Expr.var": [[564, "polars-expr-var"]], "polars.concat_list": [[581, "polars-concat-list"]], "polars.all": [[567, "polars-all"]], "polars.Expr.str.to_time": [[543, "polars-expr-str-to-time"]], "polars.corr": [[583, "polars-corr"]], "polars.Expr.suffix": [[550, "polars-expr-suffix"]], "polars.Expr.str.strptime": [[538, "polars-expr-str-strptime"]], "polars.arctan2": [[574, "polars-arctan2"]], "polars.Expr.unique": [[560, "polars-expr-unique"]], "polars.Expr.str.explode": [[517, "polars-expr-str-explode"]], "polars.Expr.str.decode": [[514, "polars-expr-str-decode"]], "polars.Expr.unique_counts": [[561, "polars-expr-unique-counts"]], "polars.arg_where": [[577, "polars-arg-where"]], "polars.Expr.str.lengths": [[523, "polars-expr-str-lengths"]], "polars.Expr.str.json_path_match": [[522, "polars-expr-str-json-path-match"]], "polars.Expr.str.rstrip": [[531, "polars-expr-str-rstrip"]], "polars.Expr.take": [[553, "polars-expr-take"]], "polars.Expr.str.extract_all": [[519, "polars-expr-str-extract-all"]], "polars.concat_str": [[582, "polars-concat-str"]], "polars.Expr.str.ljust": [[524, "polars-expr-str-ljust"]], "polars.Expr.str.encode": [[515, "polars-expr-str-encode"]], "polars.approx_n_unique": [[572, "polars-approx-n-unique"]], "polars.arg_sort_by": [[576, "polars-arg-sort-by"]], "polars.Expr.sub": [[549, "polars-expr-sub"]], "polars.Expr.str.contains": [[512, "polars-expr-str-contains"]], "polars.Expr.tail": [[552, "polars-expr-tail"]], "polars.Expr.value_counts": [[563, "polars-expr-value-counts"]], "polars.Expr.str.concat": [[511, "polars-expr-str-concat"]], "polars.Expr.str.to_uppercase": [[545, "polars-expr-str-to-uppercase"]], "polars.Expr.str.rjust": [[530, "polars-expr-str-rjust"]], "polars.Expr.struct.rename_fields": [[548, "polars-expr-struct-rename-fields"]], "polars.Expr.tan": [[555, "polars-expr-tan"]], "polars.Expr.str.replace_all": [[529, "polars-expr-str-replace-all"]], "polars.Expr.truediv": [[559, "polars-expr-truediv"]], "polars.Expr.str.extract": [[518, "polars-expr-str-extract"]], "polars.Expr.str.lstrip": [[525, "polars-expr-str-lstrip"]], "polars.Expr.str.replace": [[528, "polars-expr-str-replace"]], "polars.Expr.str.to_decimal": [[541, "polars-expr-str-to-decimal"]], "polars.Expr.str.to_titlecase": [[544, "polars-expr-str-to-titlecase"]], "polars.Expr.to_physical": [[557, "polars-expr-to-physical"]], "polars.Expr.str.split_exact": [[534, "polars-expr-str-split-exact"]], "polars.any_horizontal": [[570, "polars-any-horizontal"]], "polars.apply": [[571, "polars-apply"]], "polars.arctan2d": [[575, "polars-arctan2d"]], "polars.avg": [[578, "polars-avg"]], "polars.Expr.tanh": [[556, "polars-expr-tanh"]], "polars.all_horizontal": [[568, "polars-all-horizontal"]], "polars.arange": [[573, "polars-arange"]], "polars.any": [[569, "polars-any"]], "polars.Expr.str.ends_with": [[516, "polars-expr-str-ends-with"]], "polars.Expr.take_every": [[554, "polars-expr-take-every"]], "polars.Expr.str.split": [[533, "polars-expr-str-split"]], "polars.Expr.str.starts_with": [[536, "polars-expr-str-starts-with"]], "polars.Expr.str.to_datetime": [[540, "polars-expr-str-to-datetime"]], "polars.Expr.str.strip": [[537, "polars-expr-str-strip"]], "polars.Expr.upper_bound": [[562, "polars-expr-upper-bound"]], "polars.Expr.str.to_date": [[539, "polars-expr-str-to-date"]], "polars.Expr.struct.field": [[547, "polars-expr-struct-field"]], "polars.Expr.xor": [[566, "polars-expr-xor"]], "polars.Expr.str.zfill": [[546, "polars-expr-str-zfill"]], "polars.Expr.str.to_lowercase": [[542, "polars-expr-str-to-lowercase"]], "polars.Expr.where": [[565, "polars-expr-where"]], "polars.coalesce": [[579, "polars-coalesce"]], "polars.Expr.str.parse_int": [[527, "polars-expr-str-parse-int"]], "polars.Expr.skew": [[505, "polars-expr-skew"]], "polars.Expr.meta.has_multiple_outputs": [[447, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.ne": [[463, "polars-expr-ne"]], "polars.Expr.meta.root_names": [[452, "polars-expr-meta-root-names"]], "polars.Expr.or_": [[466, "polars-expr-or"]], "polars.Expr.radians": [[475, "polars-expr-radians"]], "polars.Expr.qcut": [[473, "polars-expr-qcut"]], "polars.Expr.ne_missing": [[464, "polars-expr-ne-missing"]], "polars.Expr.meta.undo_aliases": [[454, "polars-expr-meta-undo-aliases"]], "polars.Expr.min": [[456, "polars-expr-min"]], "polars.Expr.reinterpret": [[478, "polars-expr-reinterpret"]], "polars.Expr.repeat_by": [[479, "polars-expr-repeat-by"]], "polars.Expr.rolling_max": [[485, "polars-expr-rolling-max"]], "polars.Expr.sort_by": [[508, "polars-expr-sort-by"]], "polars.Expr.reshape": [[480, "polars-expr-reshape"]], "polars.Expr.std": [[510, "polars-expr-std"]], "polars.Expr.sign": [[502, "polars-expr-sign"]], "polars.Expr.rechunk": [[477, "polars-expr-rechunk"]], "polars.Expr.rle_id": [[483, "polars-expr-rle-id"]], "polars.Expr.search_sorted": [[496, "polars-expr-search-sorted"]], "polars.Expr.reverse": [[481, "polars-expr-reverse"]], "polars.Expr.rolling_apply": [[484, "polars-expr-rolling-apply"]], "polars.Expr.mean": [[444, "polars-expr-mean"]], "polars.Expr.lower_bound": [[438, "polars-expr-lower-bound"]], "polars.Expr.over": [[467, "polars-expr-over"]], "polars.Expr.slice": [[506, "polars-expr-slice"]], "polars.Expr.meta.output_name": [[450, "polars-expr-meta-output-name"]], "polars.Expr.meta.pop": [[451, "polars-expr-meta-pop"]], "polars.Expr.lt": [[439, "polars-expr-lt"]], "polars.Expr.rolling_var": [[493, "polars-expr-rolling-var"]], "polars.Expr.null_count": [[465, "polars-expr-null-count"]], "polars.Expr.map": [[440, "polars-expr-map"]], "polars.Expr.rolling_quantile": [[489, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_sum": [[492, "polars-expr-rolling-sum"]], "polars.Expr.mul": [[459, "polars-expr-mul"]], "polars.Expr.sinh": [[504, "polars-expr-sinh"]], "polars.Expr.sample": [[495, "polars-expr-sample"]], "polars.Expr.mode": [[458, "polars-expr-mode"]], "polars.Expr.round": [[494, "polars-expr-round"]], "polars.Expr.pct_change": [[468, "polars-expr-pct-change"]], "polars.Expr.shrink_dtype": [[500, "polars-expr-shrink-dtype"]], "polars.Expr.meta.write_json": [[455, "polars-expr-meta-write-json"]], "polars.Expr.quantile": [[474, "polars-expr-quantile"]], "polars.Expr.rolling_mean": [[486, "polars-expr-rolling-mean"]], "polars.Expr.rolling_std": [[491, "polars-expr-rolling-std"]], "polars.Expr.rolling_min": [[488, "polars-expr-rolling-min"]], "polars.Expr.rle": [[482, "polars-expr-rle"]], "polars.Expr.sqrt": [[509, "polars-expr-sqrt"]], "polars.Expr.rolling_median": [[487, "polars-expr-rolling-median"]], "polars.Expr.shift": [[498, "polars-expr-shift"]], "polars.Expr.nan_min": [[462, "polars-expr-nan-min"]], "polars.Expr.product": [[472, "polars-expr-product"]], "polars.Expr.pow": [[470, "polars-expr-pow"]], "polars.Expr.n_unique": [[460, "polars-expr-n-unique"]], "polars.Expr.set_sorted": [[497, "polars-expr-set-sorted"]], "polars.Expr.pipe": [[469, "polars-expr-pipe"]], "polars.Expr.sin": [[503, "polars-expr-sin"]], "polars.Expr.map_alias": [[441, "polars-expr-map-alias"]], "polars.Expr.meta.eq": [[446, "polars-expr-meta-eq"]], "polars.Expr.meta.is_regex_projection": [[448, "polars-expr-meta-is-regex-projection"]], "polars.Expr.meta.ne": [[449, "polars-expr-meta-ne"]], "polars.Expr.shuffle": [[501, "polars-expr-shuffle"]], "polars.Expr.max": [[443, "polars-expr-max"]], "polars.Expr.nan_max": [[461, "polars-expr-nan-max"]], "polars.Expr.prefix": [[471, "polars-expr-prefix"]], "polars.Expr.mod": [[457, "polars-expr-mod"]], "polars.Expr.sort": [[507, "polars-expr-sort"]], "polars.Expr.rank": [[476, "polars-expr-rank"]], "polars.Expr.meta.tree_format": [[453, "polars-expr-meta-tree-format"]], "polars.Expr.median": [[445, "polars-expr-median"]], "polars.Expr.map_dict": [[442, "polars-expr-map-dict"]], "polars.Expr.rolling_skew": [[490, "polars-expr-rolling-skew"]], "polars.Expr.shift_and_fill": [[499, "polars-expr-shift-and-fill"]], "polars.Expr.exclude": [[365, "polars-expr-exclude"]], "polars.Expr.list.max": [[419, "polars-expr-list-max"]], "polars.Expr.list.join": [[416, "polars-expr-list-join"]], "polars.Expr.log1p": [[437, "polars-expr-log1p"]], "polars.Expr.fill_nan": [[369, "polars-expr-fill-nan"]], "polars.Expr.is_duplicated": [[386, "polars-expr-is-duplicated"]], "polars.Expr.list.set_symmetric_difference": [[425, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.explode": [[367, "polars-expr-explode"]], "polars.Expr.floor": [[374, "polars-expr-floor"]], "polars.Expr.list.arg_max": [[405, "polars-expr-list-arg-max"]], "polars.Expr.list.last": [[417, "polars-expr-list-last"]], "polars.Expr.is_nan": [[391, "polars-expr-is-nan"]], "polars.Expr.first": [[372, "polars-expr-first"]], "polars.Expr.kurtosis": [[398, "polars-expr-kurtosis"]], "polars.Expr.list.min": [[421, "polars-expr-list-min"]], "polars.Expr.list.count_match": [[409, "polars-expr-list-count-match"]], "polars.Expr.list.shift": [[427, "polars-expr-list-shift"]], "polars.Expr.gt": [[379, "polars-expr-gt"]], "polars.Expr.list.head": [[415, "polars-expr-list-head"]], "polars.Expr.list.slice": [[428, "polars-expr-list-slice"]], "polars.Expr.list.set_intersection": [[424, "polars-expr-list-set-intersection"]], "polars.Expr.log": [[435, "polars-expr-log"]], "polars.Expr.hash": [[380, "polars-expr-hash"]], "polars.Expr.list.all": [[403, "polars-expr-list-all"]], "polars.Expr.list.arg_min": [[406, "polars-expr-list-arg-min"]], "polars.Expr.list.get": [[414, "polars-expr-list-get"]], "polars.Expr.filter": [[371, "polars-expr-filter"]], "polars.Expr.list.unique": [[434, "polars-expr-list-unique"]], "polars.Expr.list.sort": [[429, "polars-expr-list-sort"]], "polars.Expr.ge": [[378, "polars-expr-ge"]], "polars.Expr.forward_fill": [[376, "polars-expr-forward-fill"]], "polars.Expr.fill_null": [[370, "polars-expr-fill-null"]], "polars.Expr.from_json": [[377, "polars-expr-from-json"]], "polars.Expr.is_first": [[388, "polars-expr-is-first"]], "polars.Expr.list.to_struct": [[433, "polars-expr-list-to-struct"]], "polars.Expr.floordiv": [[375, "polars-expr-floordiv"]], "polars.Expr.list.any": [[404, "polars-expr-list-any"]], "polars.Expr.list.take": [[432, "polars-expr-list-take"]], "polars.Expr.is_between": [[385, "polars-expr-is-between"]], "polars.Expr.list.tail": [[431, "polars-expr-list-tail"]], "polars.Expr.extend_constant": [[368, "polars-expr-extend-constant"]], "polars.Expr.list.explode": [[412, "polars-expr-list-explode"]], "polars.Expr.inspect": [[383, "polars-expr-inspect"]], "polars.Expr.len": [[401, "polars-expr-len"]], "polars.Expr.le": [[400, "polars-expr-le"]], "polars.Expr.is_not_null": [[394, "polars-expr-is-not-null"]], "polars.Expr.list.diff": [[410, "polars-expr-list-diff"]], "polars.Expr.list.reverse": [[422, "polars-expr-list-reverse"]], "polars.Expr.implode": [[382, "polars-expr-implode"]], "polars.Expr.is_null": [[395, "polars-expr-is-null"]], "polars.Expr.limit": [[402, "polars-expr-limit"]], "polars.Expr.list.set_union": [[426, "polars-expr-list-set-union"]], "polars.Expr.is_finite": [[387, "polars-expr-is-finite"]], "polars.Expr.is_unique": [[396, "polars-expr-is-unique"]], "polars.Expr.is_in": [[389, "polars-expr-is-in"]], "polars.Expr.flatten": [[373, "polars-expr-flatten"]], "polars.Expr.list.eval": [[411, "polars-expr-list-eval"]], "polars.Expr.list.mean": [[420, "polars-expr-list-mean"]], "polars.Expr.list.sum": [[430, "polars-expr-list-sum"]], "polars.Expr.list.contains": [[408, "polars-expr-list-contains"]], "polars.Expr.interpolate": [[384, "polars-expr-interpolate"]], "polars.Expr.is_not": [[392, "polars-expr-is-not"]], "polars.Expr.is_not_nan": [[393, "polars-expr-is-not-nan"]], "polars.Expr.list.concat": [[407, "polars-expr-list-concat"]], "polars.Expr.keep_name": [[397, "polars-expr-keep-name"]], "polars.Expr.list.lengths": [[418, "polars-expr-list-lengths"]], "polars.Expr.last": [[399, "polars-expr-last"]], "polars.Expr.list.set_difference": [[423, "polars-expr-list-set-difference"]], "polars.Expr.list.first": [[413, "polars-expr-list-first"]], "polars.Expr.exp": [[366, "polars-expr-exp"]], "polars.Expr.is_infinite": [[390, "polars-expr-is-infinite"]], "polars.Expr.log10": [[436, "polars-expr-log10"]], "polars.Expr.head": [[381, "polars-expr-head"]], "polars.Expr.dt.replace_time_zone": [[346, "polars-expr-dt-replace-time-zone"]], "polars.Expr.ceil": [[299, "polars-expr-ceil"]], "polars.Expr.clip_min": [[302, "polars-expr-clip-min"]], "polars.Expr.dt.cast_time_unit": [[319, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.milliseconds": [[335, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.month_end": [[339, "polars-expr-dt-month-end"]], "polars.Expr.entropy": [[359, "polars-expr-entropy"]], "polars.Expr.cast": [[295, "polars-expr-cast"]], "polars.Expr.cumsum": [[310, "polars-expr-cumsum"]], "polars.Expr.dt.to_string": [[353, "polars-expr-dt-to-string"]], "polars.Expr.dt.year": [[358, "polars-expr-dt-year"]], "polars.Expr.dt.offset_by": [[343, "polars-expr-dt-offset-by"]], "polars.Expr.drop_nans": [[316, "polars-expr-drop-nans"]], "polars.Expr.dt.timestamp": [[352, "polars-expr-dt-timestamp"]], "polars.Expr.dt.strftime": [[350, "polars-expr-dt-strftime"]], "polars.Expr.dt.hour": [[328, "polars-expr-dt-hour"]], "polars.Expr.dt.minute": [[336, "polars-expr-dt-minute"]], "polars.Expr.dt.truncate": [[354, "polars-expr-dt-truncate"]], "polars.Expr.dt.microsecond": [[332, "polars-expr-dt-microsecond"]], "polars.Expr.cbrt": [[298, "polars-expr-cbrt"]], "polars.Expr.dt.datetime": [[323, "polars-expr-dt-datetime"]], "polars.Expr.dt.seconds": [[349, "polars-expr-dt-seconds"]], "polars.Expr.eq": [[360, "polars-expr-eq"]], "polars.Expr.clip": [[300, "polars-expr-clip"]], "polars.Expr.dt.base_utc_offset": [[318, "polars-expr-dt-base-utc-offset"]], "polars.Expr.ewm_var": [[364, "polars-expr-ewm-var"]], "polars.Expr.dt.iso_year": [[331, "polars-expr-dt-iso-year"]], "polars.Expr.cosh": [[304, "polars-expr-cosh"]], "polars.Expr.dt.day": [[324, "polars-expr-dt-day"]], "polars.Expr.dt.combine": [[320, "polars-expr-dt-combine"]], "polars.Expr.bin.starts_with": [[292, "polars-expr-bin-starts-with"]], "polars.Expr.dt.millisecond": [[334, "polars-expr-dt-millisecond"]], "polars.Expr.dt.hours": [[329, "polars-expr-dt-hours"]], "polars.Expr.bottom_k": [[293, "polars-expr-bottom-k"]], "polars.Expr.count": [[305, "polars-expr-count"]], "polars.Expr.dt.nanosecond": [[341, "polars-expr-dt-nanosecond"]], "polars.Expr.dot": [[315, "polars-expr-dot"]], "polars.Expr.cummin": [[308, "polars-expr-cummin"]], "polars.Expr.dt.month_start": [[340, "polars-expr-dt-month-start"]], "polars.Expr.dt.nanoseconds": [[342, "polars-expr-dt-nanoseconds"]], "polars.Expr.degrees": [[313, "polars-expr-degrees"]], "polars.Expr.dt.month": [[338, "polars-expr-dt-month"]], "polars.Expr.cumcount": [[306, "polars-expr-cumcount"]], "polars.Expr.eq_missing": [[361, "polars-expr-eq-missing"]], "polars.Expr.dt.microseconds": [[333, "polars-expr-dt-microseconds"]], "polars.Expr.cut": [[312, "polars-expr-cut"]], "polars.Expr.dt.days": [[325, "polars-expr-dt-days"]], "polars.Expr.dt.minutes": [[337, "polars-expr-dt-minutes"]], "polars.Expr.dt.weekday": [[356, "polars-expr-dt-weekday"]], "polars.Expr.dt.round": [[347, "polars-expr-dt-round"]], "polars.Expr.cat.get_categories": [[296, "polars-expr-cat-get-categories"]], "polars.Expr.cos": [[303, "polars-expr-cos"]], "polars.Expr.dt.date": [[322, "polars-expr-dt-date"]], "polars.Expr.dt.ordinal_day": [[344, "polars-expr-dt-ordinal-day"]], "polars.Expr.clip_max": [[301, "polars-expr-clip-max"]], "polars.Expr.cummax": [[307, "polars-expr-cummax"]], "polars.Expr.dt.week": [[355, "polars-expr-dt-week"]], "polars.Expr.dt.epoch": [[327, "polars-expr-dt-epoch"]], "polars.Expr.cumulative_eval": [[311, "polars-expr-cumulative-eval"]], "polars.Expr.dt.with_time_unit": [[357, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.is_leap_year": [[330, "polars-expr-dt-is-leap-year"]], "polars.Expr.cache": [[294, "polars-expr-cache"]], "polars.Expr.diff": [[314, "polars-expr-diff"]], "polars.Expr.dt.convert_time_zone": [[321, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.dst_offset": [[326, "polars-expr-dt-dst-offset"]], "polars.Expr.ewm_mean": [[362, "polars-expr-ewm-mean"]], "polars.Expr.cumprod": [[309, "polars-expr-cumprod"]], "polars.Expr.dt.quarter": [[345, "polars-expr-dt-quarter"]], "polars.Expr.dt.second": [[348, "polars-expr-dt-second"]], "polars.Expr.ewm_std": [[363, "polars-expr-ewm-std"]], "polars.Expr.drop_nulls": [[317, "polars-expr-drop-nulls"]], "polars.Expr.dt.time": [[351, "polars-expr-dt-time"]], "polars.Expr.cat.set_ordering": [[297, "polars-expr-cat-set-ordering"]], "Conversion": [[652, "conversion"]], "Parallelization": [[652, "parallelization"]], "StringCache": [[652, "stringcache"]], "polars.cumreduce": [[587, "polars-cumreduce"]], "Columns / names": [[639, "columns-names"]], "polars.last": [[606, "polars-last"]], "polars.sum_horizontal": [[627, "polars-sum-horizontal"]], "polars.n_unique": [[615, "polars-n-unique"]], "polars.element": [[595, "polars-element"]], "polars.ones": [[616, "polars-ones"]], "polars.rolling_corr": [[620, "polars-rolling-corr"]], "polars.struct": [[625, "polars-struct"]], "polars.groups": [[601, "polars-groups"]], "polars.int_ranges": [[605, "polars-int-ranges"]], "polars.exclude": [[596, "polars-exclude"]], "polars.min": [[613, "polars-min"]], "API reference": [[653, "api-reference"]], "polars.select": [[622, "polars-select"]], "polars.fold": [[598, "polars-fold"]], "polars.cov": [[585, "polars-cov"]], "polars.LazyFrame.bottom_k": [[656, "polars-lazyframe-bottom-k"]], "polars.repeat": [[619, "polars-repeat"]], "polars.lit": [[607, "polars-lit"]], "polars.tail": [[628, "polars-tail"]], "polars.std": [[624, "polars-std"]], "polars.mean": [[611, "polars-mean"]], "polars.datetime": [[593, "polars-datetime"]], "polars.format": [[599, "polars-format"]], "polars.time": [[629, "polars-time"]], "Expressions": [[642, "expressions"]], "polars.date_ranges": [[592, "polars-date-ranges"]], "polars.duration": [[594, "polars-duration"]], "Meta": [[644, "meta"]], "polars.rolling_cov": [[621, "polars-rolling-cov"]], "polars.from_epoch": [[600, "polars-from-epoch"]], "polars.when": [[633, "polars-when"]], "polars.time_range": [[630, "polars-time-range"]], "polars.zeros": [[634, "polars-zeros"]], "polars.sql_expr": [[623, "polars-sql-expr"]], "polars.count": [[584, "polars-count"]], "polars.first": [[597, "polars-first"]], "polars.date_range": [[591, "polars-date-range"]], "polars.map": [[608, "polars-map"]], "polars.date": [[590, "polars-date"]], "polars.head": [[602, "polars-head"]], "polars.median": [[612, "polars-median"]], "polars.time_ranges": [[631, "polars-time-ranges"]], "polars.max_horizontal": [[610, "polars-max-horizontal"]], "polars.int_range": [[604, "polars-int-range"]], "Window": [[651, "window"]], "Input/output": [[654, "input-output"]], "CSV": [[654, "csv"]], "Feather/ IPC": [[654, "feather-ipc"]], "Parquet": [[654, "parquet"]], "Database": [[654, "database"]], "JSON": [[654, "json"]], "AVRO": [[654, "avro"]], "Excel": [[654, "excel"]], "Delta Lake": [[654, "delta-lake"]], "Datasets": [[654, "datasets"]], "BatchedCsvReader": [[654, "batchedcsvreader"]], "polars.reduce": [[618, "polars-reduce"]], "polars.cumsum_horizontal": [[589, "polars-cumsum-horizontal"]], "polars.min_horizontal": [[614, "polars-min-horizontal"]], "Operators": [[647, "operators"]], "Conjunction": [[647, "conjunction"]], "Comparison": [[647, "comparison"]], "Numeric": [[647, "numeric"], [259, "numeric"]], "polars.implode": [[603, "polars-implode"]], "polars.sum": [[626, "polars-sum"]], "polars.quantile": [[617, "polars-quantile"]], "polars.cumsum": [[588, "polars-cumsum"]], "polars.cumfold": [[586, "polars-cumfold"]], "polars.max": [[609, "polars-max"]], "polars.var": [[632, "polars-var"]], "polars.DataFrame.frame_equal": [[153, "polars-dataframe-frame-equal"]], "polars.DataFrame.filter": [[149, "polars-dataframe-filter"]], "polars.DataFrame.is_unique": [[168, "polars-dataframe-is-unique"]], "polars.DataFrame.n_chunks": [[182, "polars-dataframe-n-chunks"]], "polars.DataFrame.hstack": [[163, "polars-dataframe-hstack"]], "polars.DataFrame.is_empty": [[167, "polars-dataframe-is-empty"]], "polars.DataFrame.replace": [[192, "polars-dataframe-replace"]], "polars.DataFrame.insert_at_idx": [[164, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.iter_slices": [[171, "polars-dataframe-iter-slices"]], "polars.DataFrame.max": [[176, "polars-dataframe-max"]], "polars.DataFrame.row": [[195, "polars-dataframe-row"]], "polars.DataFrame.sample": [[198, "polars-dataframe-sample"]], "polars.DataFrame.slice": [[207, "polars-dataframe-slice"]], "polars.DataFrame.fill_nan": [[147, "polars-dataframe-fill-nan"]], "polars.DataFrame.get_column": [[154, "polars-dataframe-get-column"]], "polars.DataFrame.head": [[161, "polars-dataframe-head"]], "polars.DataFrame.replace_at_idx": [[193, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.partition_by": [[185, "polars-dataframe-partition-by"]], "polars.DataFrame.reverse": [[194, "polars-dataframe-reverse"]], "polars.DataFrame.rename": [[191, "polars-dataframe-rename"]], "polars.DataFrame.to_init_repr": [[217, "polars-dataframe-to-init-repr"]], "polars.DataFrame.limit": [[175, "polars-dataframe-limit"]], "polars.DataFrame.melt": [[179, "polars-dataframe-melt"]], "polars.DataFrame.flags": [[151, "polars-dataframe-flags"]], "polars.DataFrame.lazy": [[174, "polars-dataframe-lazy"]], "polars.DataFrame.null_count": [[184, "polars-dataframe-null-count"]], "polars.DataFrame.set_sorted": [[202, "polars-dataframe-set-sorted"]], "polars.DataFrame.merge_sorted": [[180, "polars-dataframe-merge-sorted"]], "polars.DataFrame.take_every": [[212, "polars-dataframe-take-every"]], "polars.DataFrame.median": [[178, "polars-dataframe-median"]], "polars.DataFrame.fill_null": [[148, "polars-dataframe-fill-null"]], "polars.DataFrame.pipe": [[186, "polars-dataframe-pipe"]], "polars.DataFrame.mean": [[177, "polars-dataframe-mean"]], "polars.DataFrame.shape": [[203, "polars-dataframe-shape"]], "polars.DataFrame.fold": [[152, "polars-dataframe-fold"]], "polars.DataFrame.sort": [[208, "polars-dataframe-sort"]], "polars.DataFrame.rechunk": [[190, "polars-dataframe-rechunk"]], "polars.DataFrame.to_dict": [[214, "polars-dataframe-to-dict"]], "polars.DataFrame.iter_rows": [[170, "polars-dataframe-iter-rows"]], "polars.DataFrame.interpolate": [[165, "polars-dataframe-interpolate"]], "polars.DataFrame.height": [[162, "polars-dataframe-height"]], "polars.DataFrame.get_columns": [[155, "polars-dataframe-get-columns"]], "polars.DataFrame.select_seq": [[201, "polars-dataframe-select-seq"]], "polars.DataFrame.shrink_to_fit": [[206, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.shift_and_fill": [[205, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.quantile": [[189, "polars-dataframe-quantile"]], "polars.DataFrame.shift": [[204, "polars-dataframe-shift"]], "polars.DataFrame.groupby_rolling": [[159, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.find_idx_by_name": [[150, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.hash_rows": [[160, "polars-dataframe-hash-rows"]], "polars.DataFrame.to_dicts": [[215, "polars-dataframe-to-dicts"]], "polars.DataFrame.n_unique": [[183, "polars-dataframe-n-unique"]], "polars.DataFrame.extend": [[146, "polars-dataframe-extend"]], "polars.DataFrame.std": [[209, "polars-dataframe-std"]], "polars.DataFrame.is_duplicated": [[166, "polars-dataframe-is-duplicated"]], "polars.DataFrame.join": [[172, "polars-dataframe-join"]], "polars.DataFrame.rows": [[196, "polars-dataframe-rows"]], "polars.DataFrame.to_dummies": [[216, "polars-dataframe-to-dummies"]], "polars.DataFrame.product": [[188, "polars-dataframe-product"]], "polars.DataFrame.min": [[181, "polars-dataframe-min"]], "polars.DataFrame.schema": [[199, "polars-dataframe-schema"]], "polars.DataFrame.sum": [[210, "polars-dataframe-sum"]], "polars.DataFrame.tail": [[211, "polars-dataframe-tail"]], "polars.DataFrame.groupby": [[157, "polars-dataframe-groupby"]], "polars.DataFrame.join_asof": [[173, "polars-dataframe-join-asof"]], "polars.DataFrame.pivot": [[187, "polars-dataframe-pivot"]], "polars.DataFrame.glimpse": [[156, "polars-dataframe-glimpse"]], "polars.DataFrame.to_arrow": [[213, "polars-dataframe-to-arrow"]], "polars.DataFrame.rows_by_key": [[197, "polars-dataframe-rows-by-key"]], "polars.DataFrame.to_numpy": [[218, "polars-dataframe-to-numpy"]], "polars.DataFrame.item": [[169, "polars-dataframe-item"]], "polars.DataFrame.select": [[200, "polars-dataframe-select"]], "polars.DataFrame.groupby_dynamic": [[158, "polars-dataframe-groupby-dynamic"]], "polars.dataframe.groupby.GroupBy.quantile": [[248, "polars-dataframe-groupby-groupby-quantile"]], "polars.DataFrame.unstack": [[226, "polars-dataframe-unstack"]], "polars.DataFrame.to_pandas": [[219, "polars-dataframe-to-pandas"]], "polars.DataFrame.top_k": [[222, "polars-dataframe-top-k"]], "polars.dataframe.groupby.GroupBy.min": [[246, "polars-dataframe-groupby-groupby-min"]], "polars.DataFrame.width": [[231, "polars-dataframe-width"]], "Data types": [[259, "data-types"]], "Nested": [[259, "nested"]], "Other": [[259, "other"]], "polars.Expr.and_": [[267, "polars-expr-and"]], "polars.Expr.arr.min": [[284, "polars-expr-arr-min"]], "polars.Expr.bin.ends_with": [[291, "polars-expr-bin-ends-with"]], "polars.dataframe.groupby.GroupBy.sum": [[249, "polars-dataframe-groupby-groupby-sum"]], "polars.Expr.arg_unique": [[282, "polars-expr-arg-unique"]], "polars.Expr.agg_groups": [[264, "polars-expr-agg-groups"]], "polars.DataFrame.var": [[229, "polars-dataframe-var"]], "polars.DataFrame.upsample": [[228, "polars-dataframe-upsample"]], "polars.dataframe.groupby.GroupBy.first": [[240, "polars-dataframe-groupby-groupby-first"]], "polars.Expr.apply": [[270, "polars-expr-apply"]], "polars.Expr.arr.sum": [[285, "polars-expr-arr-sum"]], "polars.DataFrame.update": [[227, "polars-dataframe-update"]], "DataFrame": [[256, "dataframe"]], "Exceptions": [[260, "exceptions"]], "polars.Expr.arctan": [[276, "polars-expr-arctan"]], "polars.DataFrame.to_struct": [[221, "polars-dataframe-to-struct"]], "polars.dataframe.groupby.GroupBy.n_unique": [[247, "polars-dataframe-groupby-groupby-n-unique"]], "polars.Expr.add": [[263, "polars-expr-add"]], "polars.dataframe.groupby.GroupBy.head": [[241, "polars-dataframe-groupby-groupby-head"]], "polars.Expr.all": [[266, "polars-expr-all"]], "polars.Expr.arctanh": [[277, "polars-expr-arctanh"]], "polars.Expr.backward_fill": [[287, "polars-expr-backward-fill"]], "polars.Expr.bin.decode": [[289, "polars-expr-bin-decode"]], "polars.Expr.abs": [[262, "polars-expr-abs"]], "polars.DataFrame.with_row_count": [[234, "polars-dataframe-with-row-count"]], "polars.dataframe.groupby.GroupBy.apply": [[238, "polars-dataframe-groupby-groupby-apply"]], "polars.Expr.arg_max": [[278, "polars-expr-arg-max"]], "polars.Expr.arccosh": [[273, "polars-expr-arccosh"]], "polars.Expr.bin.encode": [[290, "polars-expr-bin-encode"]], "polars.DataFrame.to_series": [[220, "polars-dataframe-to-series"]], "polars.dataframe.groupby.GroupBy.last": [[242, "polars-dataframe-groupby-groupby-last"]], "polars.Expr.arg_min": [[279, "polars-expr-arg-min"]], "polars.Expr.any": [[268, "polars-expr-any"]], "polars.DataFrame.unnest": [[225, "polars-dataframe-unnest"]], "polars.dataframe.groupby.GroupBy.median": [[245, "polars-dataframe-groupby-groupby-median"]], "polars.dataframe.groupby.GroupBy.tail": [[250, "polars-dataframe-groupby-groupby-tail"]], "polars.Expr.arg_sort": [[280, "polars-expr-arg-sort"]], "polars.DataFrame.unique": [[224, "polars-dataframe-unique"]], "polars.Expr.arcsinh": [[275, "polars-expr-arcsinh"]], "polars.DataFrame.transpose": [[223, "polars-dataframe-transpose"]], "polars.Expr.bin.contains": [[288, "polars-expr-bin-contains"]], "polars.Expr.approx_n_unique": [[271, "polars-expr-approx-n-unique"]], "polars.dataframe.groupby.GroupBy.agg": [[236, "polars-dataframe-groupby-groupby-agg"]], "polars.DataFrame.with_columns": [[232, "polars-dataframe-with-columns"]], "polars.Expr.arr.max": [[283, "polars-expr-arr-max"]], "polars.dataframe.groupby.GroupBy.count": [[239, "polars-dataframe-groupby-groupby-count"]], "polars.DataFrame.with_columns_seq": [[233, "polars-dataframe-with-columns-seq"]], "polars.Expr.arg_true": [[281, "polars-expr-arg-true"]], "polars.DataFrame.vstack": [[230, "polars-dataframe-vstack"]], "polars.dataframe.groupby.GroupBy.all": [[237, "polars-dataframe-groupby-groupby-all"]], "polars.dataframe.groupby.GroupBy.mean": [[244, "polars-dataframe-groupby-groupby-mean"]], "polars.Expr.append": [[269, "polars-expr-append"]], "polars.Expr.arcsin": [[274, "polars-expr-arcsin"]], "polars.Expr.arr.unique": [[286, "polars-expr-arr-unique"]], "polars.Expr.arccos": [[272, "polars-expr-arccos"]], "polars.dataframe.groupby.GroupBy.max": [[243, "polars-dataframe-groupby-groupby-max"]], "polars.dataframe.groupby.GroupBy.__iter__": [[235, "polars-dataframe-groupby-groupby-iter"]], "polars.Expr.alias": [[265, "polars-expr-alias"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[8, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[9, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[10, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[13, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[14, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[15, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[16, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[17, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[18, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[23, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[24, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[25, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[26, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[27, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[28, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[29, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[30, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[31, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[32, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[33, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[34, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[35, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[36, "polars.DataType"]], "__init__() (polars.datatype method)": [[36, "polars.DataType.__init__"]], "date (class in polars)": [[37, "polars.Date"]], "__init__() (polars.date method)": [[37, "polars.Date.__init__"]], "datetime (class in polars)": [[38, "polars.Datetime"]], "__init__() (polars.datetime method)": [[38, "polars.Datetime.__init__"]], "decimal (class in polars)": [[39, "polars.Decimal"]], "__init__() (polars.decimal method)": [[39, "polars.Decimal.__init__"]], "duration (class in polars)": [[40, "polars.Duration"]], "__init__() (polars.duration method)": [[40, "polars.Duration.__init__"]], "float32 (class in polars)": [[41, "polars.Float32"]], "__init__() (polars.float32 method)": [[41, "polars.Float32.__init__"]], "float64 (class in polars)": [[42, "polars.Float64"]], "__init__() (polars.float64 method)": [[42, "polars.Float64.__init__"]], "int16 (class in polars)": [[43, "polars.Int16"]], "__init__() (polars.int16 method)": [[43, "polars.Int16.__init__"]], "int32 (class in polars)": [[44, "polars.Int32"]], "__init__() (polars.int32 method)": [[44, "polars.Int32.__init__"]], "int64 (class in polars)": [[45, "polars.Int64"]], "__init__() (polars.int64 method)": [[45, "polars.Int64.__init__"]], "int8 (class in polars)": [[46, "polars.Int8"]], "__init__() (polars.int8 method)": [[46, "polars.Int8.__init__"]], "sink_ipc() (polars.lazyframe method)": [[47, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[49, "polars.List"]], "__init__() (polars.list method)": [[49, "polars.List.__init__"]], "null (class in polars)": [[50, "polars.Null"]], "__init__() (polars.null method)": [[50, "polars.Null.__init__"]], "object (class in polars)": [[51, "polars.Object"]], "__init__() (polars.object method)": [[51, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[52, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[53, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[54, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[55, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[56, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[57, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[58, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[58, "polars.StringCache.__init__"]], "struct (class in polars)": [[59, "polars.Struct"]], "__init__() (polars.struct method)": [[59, "polars.Struct.__init__"]], "time (class in polars)": [[60, "polars.Time"]], "__init__() (polars.time method)": [[60, "polars.Time.__init__"]], "uint16 (class in polars)": [[61, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[61, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[62, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[62, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[63, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[63, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[64, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[64, "polars.UInt8.__init__"]], "unknown (class in polars)": [[65, "polars.Unknown"]], "__init__() (polars.unknown method)": [[65, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[66, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[66, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[67, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[68, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[69, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[70, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[71, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[72, "polars.build_info"]], "collect_all() (in module polars)": [[73, "polars.collect_all"]], "concat() (in module polars)": [[74, "polars.concat"]], "enable_string_cache() (in module polars)": [[75, "polars.enable_string_cache"]], "arrowerror": [[76, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[77, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[78, "polars.exceptions.ComputeError"]], "duplicateerror": [[79, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[80, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[81, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[82, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[83, "polars.exceptions.PolarsPanicError"]], "rowserror": [[84, "polars.exceptions.RowsError"]], "schemaerror": [[85, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[86, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[87, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[88, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[89, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[90, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[91, "polars.from_dataframe"]], "from_dict() (in module polars)": [[92, "polars.from_dict"]], "from_dicts() (in module polars)": [[93, "polars.from_dicts"]], "from_numpy() (in module polars)": [[94, "polars.from_numpy"]], "from_pandas() (in module polars)": [[95, "polars.from_pandas"]], "from_records() (in module polars)": [[96, "polars.from_records"]], "from_repr() (in module polars)": [[97, "polars.from_repr"]], "get_index_type() (in module polars)": [[98, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[99, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[100, "polars.read_avro"]], "read_csv() (in module polars)": [[101, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[102, "polars.read_csv_batched"]], "read_database() (in module polars)": [[103, "polars.read_database"]], "read_delta() (in module polars)": [[104, "polars.read_delta"]], "read_excel() (in module polars)": [[105, "polars.read_excel"]], "read_ipc() (in module polars)": [[106, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[107, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[108, "polars.read_json"]], "read_ndjson() (in module polars)": [[109, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[110, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[111, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[112, "polars.scan_csv"]], "scan_delta() (in module polars)": [[113, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[114, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[115, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[116, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[117, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[118, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[119, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[120, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[121, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[121, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[122, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[126, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[127, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[128, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[129, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[132, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[133, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[134, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[135, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[136, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[137, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[138, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[139, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[140, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[141, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[142, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[143, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[144, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[145, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[146, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[147, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[148, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[149, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[150, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[151, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[152, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[153, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[154, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[155, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[156, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[157, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[158, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[159, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[160, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[161, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[162, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[163, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[164, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[165, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[166, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[167, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[168, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[169, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[170, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[171, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[172, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[173, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[174, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[175, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[176, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[177, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[178, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[179, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[180, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[181, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[182, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[183, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[184, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[185, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[186, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[187, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[188, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[189, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[190, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[191, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[192, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[193, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[194, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[195, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[196, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[197, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[198, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[199, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[200, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[201, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[202, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[203, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[204, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[205, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[206, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[207, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[208, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[209, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[210, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[211, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[212, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[213, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[214, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[215, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[216, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[217, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[218, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[219, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[220, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[221, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[222, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[223, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[224, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[225, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[226, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[227, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[228, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[229, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[230, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[231, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[232, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[233, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[234, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[246, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[247, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[248, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[249, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[250, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[262, "polars.Expr.abs"]], "add() (polars.expr method)": [[263, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[264, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[265, "polars.Expr.alias"]], "all() (polars.expr method)": [[266, "polars.Expr.all"]], "and_() (polars.expr method)": [[267, "polars.Expr.and_"]], "any() (polars.expr method)": [[268, "polars.Expr.any"]], "append() (polars.expr method)": [[269, "polars.Expr.append"]], "apply() (polars.expr method)": [[270, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[271, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[272, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[273, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[274, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[275, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[276, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[277, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[278, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[279, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[280, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[281, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[282, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[283, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[284, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[285, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[286, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[287, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[288, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[289, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[290, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[291, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[292, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[293, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[294, "polars.Expr.cache"]], "cast() (polars.expr method)": [[295, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[296, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[297, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[298, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[299, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[300, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[301, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[302, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[303, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[304, "polars.Expr.cosh"]], "count() (polars.expr method)": [[305, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[306, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[307, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[308, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[309, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[310, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[311, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[312, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[313, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[314, "polars.Expr.diff"]], "dot() (polars.expr method)": [[315, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[316, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[317, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[318, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[319, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[320, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[321, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[322, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[323, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[324, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[325, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[326, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[327, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[328, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[329, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[330, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[331, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[332, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[333, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[334, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[335, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[336, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[337, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[338, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[339, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[340, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[341, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[342, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[343, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[344, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[345, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[346, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[347, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[348, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[349, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[350, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[351, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[352, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[353, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[354, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[355, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[356, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[357, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[358, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[359, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[360, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[361, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[362, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[363, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[364, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[365, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[366, "polars.Expr.exp"]], "explode() (polars.expr method)": [[367, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[368, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[369, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[370, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[371, "polars.Expr.filter"]], "first() (polars.expr method)": [[372, "polars.Expr.first"]], "flatten() (polars.expr method)": [[373, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[374, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[375, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[376, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[377, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[378, "polars.Expr.ge"]], "gt() (polars.expr method)": [[379, "polars.Expr.gt"]], "hash() (polars.expr method)": [[380, "polars.Expr.hash"]], "head() (polars.expr method)": [[381, "polars.Expr.head"]], "implode() (polars.expr method)": [[382, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[383, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[384, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[385, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[386, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[387, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[388, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[389, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[390, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[391, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[392, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[393, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[394, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[395, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[396, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[397, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[398, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[399, "polars.Expr.last"]], "le() (polars.expr method)": [[400, "polars.Expr.le"]], "len() (polars.expr method)": [[401, "polars.Expr.len"]], "limit() (polars.expr method)": [[402, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[403, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[404, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[405, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[406, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[407, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[408, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[409, "polars.Expr.list.count_match"]], "diff() (polars.expr.list method)": [[410, "polars.Expr.list.diff"]], "eval() (polars.expr.list method)": [[411, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[412, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[413, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[414, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[415, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[416, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[417, "polars.Expr.list.last"]], "lengths() (polars.expr.list method)": [[418, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[419, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[420, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[421, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[422, "polars.Expr.list.reverse"]], "set_difference() (polars.expr.list method)": [[423, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[424, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[425, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[426, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[427, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[428, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[429, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[430, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[431, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[432, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[433, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[434, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[435, "polars.Expr.log"]], "log10() (polars.expr method)": [[436, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[437, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[438, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[439, "polars.Expr.lt"]], "map() (polars.expr method)": [[440, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[441, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[442, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[443, "polars.Expr.max"]], "mean() (polars.expr method)": [[444, "polars.Expr.mean"]], "median() (polars.expr method)": [[445, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[446, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[447, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[448, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[449, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[450, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[451, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[452, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[453, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[454, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[455, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[456, "polars.Expr.min"]], "mod() (polars.expr method)": [[457, "polars.Expr.mod"]], "mode() (polars.expr method)": [[458, "polars.Expr.mode"]], "mul() (polars.expr method)": [[459, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[460, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[461, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[462, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[463, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[464, "polars.Expr.ne_missing"]], "null_count() (polars.expr method)": [[465, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[466, "polars.Expr.or_"]], "over() (polars.expr method)": [[467, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[468, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[469, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[470, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[471, "polars.Expr.prefix"]], "product() (polars.expr method)": [[472, "polars.Expr.product"]], "qcut() (polars.expr method)": [[473, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[474, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[475, "polars.Expr.radians"]], "rank() (polars.expr method)": [[476, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[477, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[478, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[479, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[480, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[481, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[482, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[483, "polars.Expr.rle_id"]], "rolling_apply() (polars.expr method)": [[484, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[485, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[486, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[487, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[488, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[489, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[490, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[491, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[492, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[493, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[494, "polars.Expr.round"]], "sample() (polars.expr method)": [[495, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[496, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[497, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[498, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[499, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[500, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[501, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[502, "polars.Expr.sign"]], "sin() (polars.expr method)": [[503, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[504, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[505, "polars.Expr.skew"]], "slice() (polars.expr method)": [[506, "polars.Expr.slice"]], "sort() (polars.expr method)": [[507, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[508, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[509, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[510, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[511, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[512, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[513, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[514, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[515, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[516, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[517, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[518, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[519, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[520, "polars.Expr.str.extract_groups"]], "json_extract() (polars.expr.str method)": [[521, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[522, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[523, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[524, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[525, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[526, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[527, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[528, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[529, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[530, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[531, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[532, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[533, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[534, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[535, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[536, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[537, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[538, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[539, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[540, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[541, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[542, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[543, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[544, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[545, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[546, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[547, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[548, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[549, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[550, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[551, "polars.Expr.sum"]], "tail() (polars.expr method)": [[552, "polars.Expr.tail"]], "take() (polars.expr method)": [[553, "polars.Expr.take"]], "take_every() (polars.expr method)": [[554, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[555, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[556, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[557, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[558, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[559, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[560, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[561, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[562, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[563, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[564, "polars.Expr.var"]], "where() (polars.expr method)": [[565, "polars.Expr.where"]], "xor() (polars.expr method)": [[566, "polars.Expr.xor"]], "all() (in module polars)": [[567, "polars.all"]], "all_horizontal() (in module polars)": [[568, "polars.all_horizontal"]], "any() (in module polars)": [[569, "polars.any"]], "any_horizontal() (in module polars)": [[570, "polars.any_horizontal"]], "apply() (in module polars)": [[571, "polars.apply"]], "approx_n_unique() (in module polars)": [[572, "polars.approx_n_unique"]], "arange() (in module polars)": [[573, "polars.arange"]], "arctan2() (in module polars)": [[574, "polars.arctan2"]], "arctan2d() (in module polars)": [[575, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[576, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[577, "polars.arg_where"]], "avg() (in module polars)": [[578, "polars.avg"]], "coalesce() (in module polars)": [[579, "polars.coalesce"]], "col() (in module polars)": [[580, "polars.col"]], "concat_list() (in module polars)": [[581, "polars.concat_list"]], "concat_str() (in module polars)": [[582, "polars.concat_str"]], "corr() (in module polars)": [[583, "polars.corr"]], "count() (in module polars)": [[584, "polars.count"]], "cov() (in module polars)": [[585, "polars.cov"]], "cumfold() (in module polars)": [[586, "polars.cumfold"]], "cumreduce() (in module polars)": [[587, "polars.cumreduce"]], "cumsum() (in module polars)": [[588, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[589, "polars.cumsum_horizontal"]], "date() (in module polars)": [[590, "polars.date"]], "date_range() (in module polars)": [[591, "polars.date_range"]], "date_ranges() (in module polars)": [[592, "polars.date_ranges"]], "datetime() (in module polars)": [[593, "polars.datetime"]], "duration() (in module polars)": [[594, "polars.duration"]], "element() (in module polars)": [[595, "polars.element"]], "exclude() (in module polars)": [[596, "polars.exclude"]], "first() (in module polars)": [[597, "polars.first"]], "fold() (in module polars)": [[598, "polars.fold"]], "format() (in module polars)": [[599, "polars.format"]], "from_epoch() (in module polars)": [[600, "polars.from_epoch"]], "groups() (in module polars)": [[601, "polars.groups"]], "head() (in module polars)": [[602, "polars.head"]], "implode() (in module polars)": [[603, "polars.implode"]], "int_range() (in module polars)": [[604, "polars.int_range"]], "int_ranges() (in module polars)": [[605, "polars.int_ranges"]], "last() (in module polars)": [[606, "polars.last"]], "lit() (in module polars)": [[607, "polars.lit"]], "map() (in module polars)": [[608, "polars.map"]], "max() (in module polars)": [[609, "polars.max"]], "max_horizontal() (in module polars)": [[610, "polars.max_horizontal"]], "mean() (in module polars)": [[611, "polars.mean"]], "median() (in module polars)": [[612, "polars.median"]], "min() (in module polars)": [[613, "polars.min"]], "min_horizontal() (in module polars)": [[614, "polars.min_horizontal"]], "n_unique() (in module polars)": [[615, "polars.n_unique"]], "ones() (in module polars)": [[616, "polars.ones"]], "quantile() (in module polars)": [[617, "polars.quantile"]], "reduce() (in module polars)": [[618, "polars.reduce"]], "repeat() (in module polars)": [[619, "polars.repeat"]], "rolling_corr() (in module polars)": [[620, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[621, "polars.rolling_cov"]], "select() (in module polars)": [[622, "polars.select"]], "sql_expr() (in module polars)": [[623, "polars.sql_expr"]], "std() (in module polars)": [[624, "polars.std"]], "struct() (in module polars)": [[625, "polars.struct"]], "sum() (in module polars)": [[626, "polars.sum"]], "sum_horizontal() (in module polars)": [[627, "polars.sum_horizontal"]], "tail() (in module polars)": [[628, "polars.tail"]], "time() (in module polars)": [[629, "polars.time"]], "time_range() (in module polars)": [[630, "polars.time_range"]], "time_ranges() (in module polars)": [[631, "polars.time_ranges"]], "var() (in module polars)": [[632, "polars.var"]], "when() (in module polars)": [[633, "polars.when"]], "zeros() (in module polars)": [[634, "polars.zeros"]], "bottom_k() (polars.lazyframe method)": [[656, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[657, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[658, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[659, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[660, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[661, "polars.LazyFrame.columns"]], "deserialize() (polars.lazyframe class method)": [[662, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[663, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[664, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[665, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[666, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[667, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[668, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[669, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[670, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[671, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[672, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[673, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[674, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[675, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[676, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[677, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[678, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[679, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[680, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[681, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[682, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[683, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[684, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[685, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[686, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[687, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[688, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[689, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[690, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[691, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[692, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[693, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[694, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[695, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[696, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[697, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[698, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[699, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[700, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[701, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[702, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[703, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[704, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[705, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[706, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[707, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[708, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[709, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[710, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[711, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[712, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[713, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[714, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[715, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[716, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[717, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[718, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[719, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[720, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[721, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[722, "polars.LazyFrame.with_row_count"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[723, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[724, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[725, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[726, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[727, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[728, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[729, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[730, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[731, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[732, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[733, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[734, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[735, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[736, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[737, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[744, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[744, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[744, "polars.selectors.by_name"]], "contains() (in module polars.selectors)": [[744, "polars.selectors.contains"]], "datetime() (in module polars.selectors)": [[744, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[744, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[744, "polars.selectors.ends_with"]], "first() (in module polars.selectors)": [[744, "polars.selectors.first"]], "float() (in module polars.selectors)": [[744, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[744, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[744, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[744, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[744, "polars.selectors.matches"]], "module": [[744, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[744, "polars.selectors.numeric"]], "polars.selectors": [[744, "module-polars.selectors"]], "selector_column_names() (in module polars.selectors)": [[744, "polars.selectors.selector_column_names"]], "starts_with() (in module polars.selectors)": [[744, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[744, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[744, "polars.selectors.temporal"]], "abs() (polars.series method)": [[746, "polars.Series.abs"]], "alias() (polars.series method)": [[747, "polars.Series.alias"]], "all() (polars.series method)": [[748, "polars.Series.all"]], "any() (polars.series method)": [[749, "polars.Series.any"]], "append() (polars.series method)": [[750, "polars.Series.append"]], "apply() (polars.series method)": [[751, "polars.Series.apply"]], "arccos() (polars.series method)": [[752, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[753, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[754, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[755, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[756, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[757, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[758, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[759, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[760, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[761, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[762, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[763, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[764, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[765, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[766, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[767, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[768, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[769, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[770, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[771, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[772, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[773, "polars.Series.cast"]], "cat (polars.series attribute)": [[774, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[775, "polars.Series.cat.get_categories"]], "set_ordering() (polars.series.cat method)": [[776, "polars.Series.cat.set_ordering"]], "uses_lexical_ordering() (polars.series.cat method)": [[777, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[778, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[779, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[780, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[781, "polars.Series.clear"]], "clip() (polars.series method)": [[782, "polars.Series.clip"]], "clip_max() (polars.series method)": [[783, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[784, "polars.Series.clip_min"]], "clone() (polars.series method)": [[785, "polars.Series.clone"]], "cos() (polars.series method)": [[786, "polars.Series.cos"]], "cosh() (polars.series method)": [[787, "polars.Series.cosh"]], "cummax() (polars.series method)": [[788, "polars.Series.cummax"]], "cummin() (polars.series method)": [[789, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[790, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[791, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[792, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[793, "polars.Series.cut"]], "describe() (polars.series method)": [[794, "polars.Series.describe"]], "diff() (polars.series method)": [[795, "polars.Series.diff"]], "dot() (polars.series method)": [[796, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[797, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[798, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[799, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[800, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[801, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[802, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[803, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[804, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[805, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[806, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[807, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[808, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[809, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[810, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[811, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[812, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[813, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[814, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[815, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[816, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[817, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[818, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[819, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[820, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[821, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[822, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[823, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[824, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[825, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[826, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[827, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[828, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[829, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[830, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[831, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[832, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[833, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[834, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[835, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[836, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[837, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[838, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[839, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[840, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[841, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[842, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[843, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[844, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[845, "polars.Series.dtype"]], "entropy() (polars.series method)": [[846, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[847, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[848, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[849, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[850, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[851, "polars.Series.exp"]], "explode() (polars.series method)": [[852, "polars.Series.explode"]], "extend() (polars.series method)": [[853, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[854, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[855, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[856, "polars.Series.fill_null"]], "filter() (polars.series method)": [[857, "polars.Series.filter"]], "flags (polars.series attribute)": [[858, "polars.Series.flags"]], "floor() (polars.series method)": [[859, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[860, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[861, "polars.Series.has_validity"]], "hash() (polars.series method)": [[862, "polars.Series.hash"]], "head() (polars.series method)": [[863, "polars.Series.head"]], "hist() (polars.series method)": [[864, "polars.Series.hist"]], "implode() (polars.series method)": [[865, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[866, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[867, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[868, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[869, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[870, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[871, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[872, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[873, "polars.Series.is_first"]], "is_float() (polars.series method)": [[874, "polars.Series.is_float"]], "is_in() (polars.series method)": [[875, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[876, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[877, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[878, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[879, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[880, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[881, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[882, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[883, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[884, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[885, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[886, "polars.Series.is_utf8"]], "item() (polars.series method)": [[887, "polars.Series.item"]], "kurtosis() (polars.series method)": [[888, "polars.Series.kurtosis"]], "len() (polars.series method)": [[889, "polars.Series.len"]], "limit() (polars.series method)": [[890, "polars.Series.limit"]], "list (polars.series attribute)": [[891, "polars.Series.list"]], "all() (polars.series.list method)": [[892, "polars.Series.list.all"]], "any() (polars.series.list method)": [[893, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[894, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[895, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[896, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[897, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[898, "polars.Series.list.count_match"]], "diff() (polars.series.list method)": [[899, "polars.Series.list.diff"]], "eval() (polars.series.list method)": [[900, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[901, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[902, "polars.Series.list.first"]], "get() (polars.series.list method)": [[903, "polars.Series.list.get"]], "head() (polars.series.list method)": [[904, "polars.Series.list.head"]], "join() (polars.series.list method)": [[905, "polars.Series.list.join"]], "last() (polars.series.list method)": [[906, "polars.Series.list.last"]], "lengths() (polars.series.list method)": [[907, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[908, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[909, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[910, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[911, "polars.Series.list.reverse"]], "set_difference() (polars.series.list method)": [[912, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[913, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[914, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[915, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[916, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[917, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[918, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[919, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[920, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[921, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[922, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[923, "polars.Series.list.unique"]], "log() (polars.series method)": [[924, "polars.Series.log"]], "log10() (polars.series method)": [[925, "polars.Series.log10"]], "log1p() (polars.series method)": [[926, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[927, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[928, "polars.Series.map_dict"]], "max() (polars.series method)": [[929, "polars.Series.max"]], "mean() (polars.series method)": [[930, "polars.Series.mean"]], "median() (polars.series method)": [[931, "polars.Series.median"]], "min() (polars.series method)": [[932, "polars.Series.min"]], "mode() (polars.series method)": [[933, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[934, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[935, "polars.Series.n_unique"]], "name (polars.series attribute)": [[936, "polars.Series.name"]], "nan_max() (polars.series method)": [[937, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[938, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[939, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[940, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[941, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[942, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[943, "polars.Series.peak_min"]], "product() (polars.series method)": [[944, "polars.Series.product"]], "qcut() (polars.series method)": [[945, "polars.Series.qcut"]], "quantile() (polars.series method)": [[946, "polars.Series.quantile"]], "rank() (polars.series method)": [[947, "polars.Series.rank"]], "rechunk() (polars.series method)": [[948, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[949, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[950, "polars.Series.rename"]], "reshape() (polars.series method)": [[951, "polars.Series.reshape"]], "reverse() (polars.series method)": [[952, "polars.Series.reverse"]], "rle() (polars.series method)": [[953, "polars.Series.rle"]], "rle_id() (polars.series method)": [[954, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[955, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[956, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[957, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[958, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[959, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[960, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[961, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[962, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[963, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[964, "polars.Series.rolling_var"]], "round() (polars.series method)": [[965, "polars.Series.round"]], "sample() (polars.series method)": [[966, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[967, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[968, "polars.Series.series_equal"]], "set() (polars.series method)": [[969, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[970, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[971, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[972, "polars.Series.shape"]], "shift() (polars.series method)": [[973, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[974, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[975, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[976, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[977, "polars.Series.shuffle"]], "sign() (polars.series method)": [[978, "polars.Series.sign"]], "sin() (polars.series method)": [[979, "polars.Series.sin"]], "sinh() (polars.series method)": [[980, "polars.Series.sinh"]], "skew() (polars.series method)": [[981, "polars.Series.skew"]], "slice() (polars.series method)": [[982, "polars.Series.slice"]], "sort() (polars.series method)": [[983, "polars.Series.sort"]], "sqrt() (polars.series method)": [[984, "polars.Series.sqrt"]], "std() (polars.series method)": [[985, "polars.Series.std"]], "str (polars.series attribute)": [[986, "polars.Series.str"]], "concat() (polars.series.str method)": [[987, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[988, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[989, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[990, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[991, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[992, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[993, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[994, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[995, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[996, "polars.Series.str.extract_groups"]], "json_extract() (polars.series.str method)": [[997, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[998, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[999, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1000, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1001, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1002, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[1003, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1004, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1005, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[1006, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1007, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1008, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1009, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1010, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1011, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1012, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1013, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[1014, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1015, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1016, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1017, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[1018, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1019, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1020, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1021, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1022, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1023, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1024, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[1025, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1026, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1027, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1028, "polars.Series.sum"]], "tail() (polars.series method)": [[1029, "polars.Series.tail"]], "take() (polars.series method)": [[1030, "polars.Series.take"]], "take_every() (polars.series method)": [[1031, "polars.Series.take_every"]], "tan() (polars.series method)": [[1032, "polars.Series.tan"]], "tanh() (polars.series method)": [[1033, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[1034, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[1035, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1036, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1037, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1038, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1039, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1040, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1041, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1042, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1043, "polars.Series.top_k"]], "unique() (polars.series method)": [[1044, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1045, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1046, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1047, "polars.Series.value_counts"]], "var() (polars.series method)": [[1048, "polars.Series.var"]], "view() (polars.series method)": [[1049, "polars.Series.view"]], "zip_with() (polars.series method)": [[1050, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1066, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1066, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1066, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1066, "polars.SQLContext.__init__"]]}})